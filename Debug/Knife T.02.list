
Knife T.02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbcc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800cda0  0800cda0  0001cda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf20  0800cf20  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf20  0800cf20  0001cf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf28  0800cf28  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf28  0800cf28  0001cf28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf2c  0800cf2c  0001cf2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800cf30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e40  20000200  0800d12c  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001040  0800d12c  00021040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cafd  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000462c  00000000  00000000  0003cd29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00041358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  000425b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b6e  00000000  00000000  00043658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c9c  00000000  00000000  000661c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7798  00000000  00000000  0007ee62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001365fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c0  00000000  00000000  00136650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd84 	.word	0x0800cd84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800cd84 	.word	0x0800cd84

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96e 	b.w	8000f0c <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468c      	mov	ip, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8083 	bne.w	8000d5e <__udivmoddi4+0x116>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d947      	bls.n	8000cee <__udivmoddi4+0xa6>
 8000c5e:	fab2 f282 	clz	r2, r2
 8000c62:	b142      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	f1c2 0020 	rsb	r0, r2, #32
 8000c68:	fa24 f000 	lsr.w	r0, r4, r0
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4097      	lsls	r7, r2
 8000c70:	ea40 0c01 	orr.w	ip, r0, r1
 8000c74:	4094      	lsls	r4, r2
 8000c76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c80:	fa1f fe87 	uxth.w	lr, r7
 8000c84:	fb08 c116 	mls	r1, r8, r6, ip
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x60>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9a:	f080 8119 	bcs.w	8000ed0 <__udivmoddi4+0x288>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 8116 	bls.w	8000ed0 <__udivmoddi4+0x288>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x8c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	f080 8105 	bcs.w	8000ed4 <__udivmoddi4+0x28c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8102 	bls.w	8000ed4 <__udivmoddi4+0x28c>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd8:	eba4 040e 	sub.w	r4, r4, lr
 8000cdc:	2600      	movs	r6, #0
 8000cde:	b11d      	cbz	r5, 8000ce8 <__udivmoddi4+0xa0>
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xaa>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f282 	clz	r2, r2
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d150      	bne.n	8000d9c <__udivmoddi4+0x154>
 8000cfa:	1bcb      	subs	r3, r1, r7
 8000cfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	2601      	movs	r6, #1
 8000d06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0a:	0c21      	lsrs	r1, r4, #16
 8000d0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d14:	fb08 f30c 	mul.w	r3, r8, ip
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0xe4>
 8000d1c:	1879      	adds	r1, r7, r1
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0xe2>
 8000d24:	428b      	cmp	r3, r1
 8000d26:	f200 80e9 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1ac9      	subs	r1, r1, r3
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x10c>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x10a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80d9 	bhi.w	8000f04 <__udivmoddi4+0x2bc>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e7bf      	b.n	8000cde <__udivmoddi4+0x96>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0x12e>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 80b1 	beq.w	8000eca <__udivmoddi4+0x282>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f683 	clz	r6, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d14a      	bne.n	8000e14 <__udivmoddi4+0x1cc>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0x140>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80b8 	bhi.w	8000ef8 <__udivmoddi4+0x2b0>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	468c      	mov	ip, r1
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d0a8      	beq.n	8000ce8 <__udivmoddi4+0xa0>
 8000d96:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9a:	e7a5      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000d9c:	f1c2 0320 	rsb	r3, r2, #32
 8000da0:	fa20 f603 	lsr.w	r6, r0, r3
 8000da4:	4097      	lsls	r7, r2
 8000da6:	fa01 f002 	lsl.w	r0, r1, r2
 8000daa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dae:	40d9      	lsrs	r1, r3
 8000db0:	4330      	orrs	r0, r6
 8000db2:	0c03      	lsrs	r3, r0, #16
 8000db4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db8:	fa1f f887 	uxth.w	r8, r7
 8000dbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb06 f108 	mul.w	r1, r6, r8
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	fa04 f402 	lsl.w	r4, r4, r2
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x19c>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dd6:	f080 808d 	bcs.w	8000ef4 <__udivmoddi4+0x2ac>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 808a 	bls.w	8000ef4 <__udivmoddi4+0x2ac>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b281      	uxth	r1, r0
 8000de8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb00 f308 	mul.w	r3, r0, r8
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x1c4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e02:	d273      	bcs.n	8000eec <__udivmoddi4+0x2a4>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d971      	bls.n	8000eec <__udivmoddi4+0x2a4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4439      	add	r1, r7
 8000e0c:	1acb      	subs	r3, r1, r3
 8000e0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e12:	e778      	b.n	8000d06 <__udivmoddi4+0xbe>
 8000e14:	f1c6 0c20 	rsb	ip, r6, #32
 8000e18:	fa03 f406 	lsl.w	r4, r3, r6
 8000e1c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e20:	431c      	orrs	r4, r3
 8000e22:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e26:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e2e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e32:	431f      	orrs	r7, r3
 8000e34:	0c3b      	lsrs	r3, r7, #16
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fa1f f884 	uxth.w	r8, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e46:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4a:	458a      	cmp	sl, r1
 8000e4c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e50:	fa00 f306 	lsl.w	r3, r0, r6
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x220>
 8000e56:	1861      	adds	r1, r4, r1
 8000e58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e5c:	d248      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	d946      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4421      	add	r1, r4
 8000e68:	eba1 010a 	sub.w	r1, r1, sl
 8000e6c:	b2bf      	uxth	r7, r7
 8000e6e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e72:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e76:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7a:	fb00 f808 	mul.w	r8, r0, r8
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x24a>
 8000e82:	19e7      	adds	r7, r4, r7
 8000e84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e88:	d22e      	bcs.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8a:	45b8      	cmp	r8, r7
 8000e8c:	d92c      	bls.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4427      	add	r7, r4
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	eba7 0708 	sub.w	r7, r7, r8
 8000e9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9e:	454f      	cmp	r7, r9
 8000ea0:	46c6      	mov	lr, r8
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	d31a      	bcc.n	8000edc <__udivmoddi4+0x294>
 8000ea6:	d017      	beq.n	8000ed8 <__udivmoddi4+0x290>
 8000ea8:	b15d      	cbz	r5, 8000ec2 <__udivmoddi4+0x27a>
 8000eaa:	ebb3 020e 	subs.w	r2, r3, lr
 8000eae:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eb6:	40f2      	lsrs	r2, r6
 8000eb8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ebc:	40f7      	lsrs	r7, r6
 8000ebe:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e70b      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0x60>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6fd      	b.n	8000cd4 <__udivmoddi4+0x8c>
 8000ed8:	4543      	cmp	r3, r8
 8000eda:	d2e5      	bcs.n	8000ea8 <__udivmoddi4+0x260>
 8000edc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7df      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e7d2      	b.n	8000e92 <__udivmoddi4+0x24a>
 8000eec:	4660      	mov	r0, ip
 8000eee:	e78d      	b.n	8000e0c <__udivmoddi4+0x1c4>
 8000ef0:	4681      	mov	r9, r0
 8000ef2:	e7b9      	b.n	8000e68 <__udivmoddi4+0x220>
 8000ef4:	4666      	mov	r6, ip
 8000ef6:	e775      	b.n	8000de4 <__udivmoddi4+0x19c>
 8000ef8:	4630      	mov	r0, r6
 8000efa:	e74a      	b.n	8000d92 <__udivmoddi4+0x14a>
 8000efc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f00:	4439      	add	r1, r7
 8000f02:	e713      	b.n	8000d2c <__udivmoddi4+0xe4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	443c      	add	r4, r7
 8000f08:	e724      	b.n	8000d54 <__udivmoddi4+0x10c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <ADS122C04_GetDRDY>:


int a;
int b;

static uint8_t ADS122C04_GetDRDY(ADS122C04 *dev) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint8_t rxData[1];

	ADS122C04_ReadRegister(dev, ADS122C04_READ_CMD(ADS122C04_CONFIG_2_REG),
 8000f18:	f107 020c 	add.w	r2, r7, #12
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	2128      	movs	r1, #40	; 0x28
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f916 	bl	8001152 <ADS122C04_ReadRegister>
			rxData, 1);
	uint8_t flag = ((rxData[0] >> 7) & 0x01);
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	09db      	lsrs	r3, r3, #7
 8000f2a:	73fb      	strb	r3, [r7, #15]

	return flag;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <ADS122C04_StartCurrent>:

static HAL_StatusTypeDef ADS122C04_StartCurrent(ADS122C04 *dev) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	// do new reading
	HAL_StatusTypeDef result;

	uint8_t configData[1] = { dev->mux[dev->current] << 4 | dev->gain << 1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7d5b      	ldrb	r3, [r3, #21]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	7e5b      	ldrb	r3, [r3, #25]
 8000f4a:	011b      	lsls	r3, r3, #4
			| ADS122C04_PGA_BYPASS };
 8000f4c:	b25a      	sxtb	r2, r3
	uint8_t configData[1] = { dev->mux[dev->current] << 4 | dev->gain << 1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7e1b      	ldrb	r3, [r3, #24]
 8000f52:	005b      	lsls	r3, r3, #1
			| ADS122C04_PGA_BYPASS };
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
	uint8_t configData[1] = { dev->mux[dev->current] << 4 | dev->gain << 1
 8000f5c:	733b      	strb	r3, [r7, #12]
	result = ADS122C04_WriteRegister(dev,
 8000f5e:	f107 020c 	add.w	r2, r7, #12
 8000f62:	2301      	movs	r3, #1
 8000f64:	2140      	movs	r1, #64	; 0x40
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f914 	bl	8001194 <ADS122C04_WriteRegister>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
			ADS122C04_WRITE_CMD(ADS122C04_CONFIG_0_REG), configData, 1);

	if (result == HAL_OK) {
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10a      	bne.n	8000f8c <ADS122C04_StartCurrent+0x56>
		uint8_t startData = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	72fb      	strb	r3, [r7, #11]
		result = ADS122C04_WriteRegister(dev, ADS122C04_START_CMD, &startData,
 8000f7a:	f107 020b 	add.w	r2, r7, #11
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2108      	movs	r1, #8
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f906 	bl	8001194 <ADS122C04_WriteRegister>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
				0);
	}

	return result;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <ADS122C04_ReadCurrent>:

static HAL_StatusTypeDef ADS122C04_ReadCurrent(ADS122C04 *dev) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	if (dev->ready) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7d1b      	ldrb	r3, [r3, #20]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00a      	beq.n	8000fbe <ADS122C04_ReadCurrent+0x26>
		result = ADS122C04_StartCurrent(dev);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffc4 	bl	8000f36 <ADS122C04_StartCurrent>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	75fb      	strb	r3, [r7, #23]

		if (result == HAL_OK) {
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <ADS122C04_ReadCurrent+0x26>
			dev->ready = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	751a      	strb	r2, [r3, #20]
		}
	}

	uint8_t flag = ADS122C04_GetDRDY(dev);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa6 	bl	8000f10 <ADS122C04_GetDRDY>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	if (flag) {
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d03d      	beq.n	800104a <ADS122C04_ReadCurrent+0xb2>
		uint8_t data[3];

		result = ADS122C04_ReadRegister(dev, ADS122C04_RDATA_CMD, data, 3);
 8000fce:	f107 020c 	add.w	r2, r7, #12
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f8bb 	bl	8001152 <ADS122C04_ReadRegister>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	75fb      	strb	r3, [r7, #23]

		if (result == HAL_OK) {
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d131      	bne.n	800104a <ADS122C04_ReadCurrent+0xb2>
			uint32_t r = ((uint32_t) data[2]) | ((uint32_t) data[1] << 8)
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	431a      	orrs	r2, r3
					| ((uint32_t) data[0] << 16);
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
 8000ff2:	041b      	lsls	r3, r3, #16
			uint32_t r = ((uint32_t) data[2]) | ((uint32_t) data[1] << 8)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]

			dev->ready = 1;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	751a      	strb	r2, [r3, #20]
			dev->interrupt = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	759a      	strb	r2, [r3, #22]

			if (dev->addr == ADS122C04_I2C_ADDR_1) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7ddb      	ldrb	r3, [r3, #23]
 8001008:	2b82      	cmp	r3, #130	; 0x82
 800100a:	d10b      	bne.n	8001024 <ADS122C04_ReadCurrent+0x8c>
				r = (r << 8) - 4294967295 / 2;
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001014:	3301      	adds	r3, #1
 8001016:	613b      	str	r3, [r7, #16]
				r = r >> 8;
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	613b      	str	r3, [r7, #16]
				a = r;
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <ADS122C04_ReadCurrent+0xbc>)
 8001022:	6013      	str	r3, [r2, #0]
			}

			dev->ain[dev->current] = r;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7d5b      	ldrb	r3, [r3, #21]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	ee07 2a90 	vmov	s15, r2
 800102e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	3304      	adds	r3, #4
 800103a:	edc3 7a00 	vstr	s15, [r3]
			dev->current = dev->current + 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7d5b      	ldrb	r3, [r3, #21]
 8001042:	3301      	adds	r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	755a      	strb	r2, [r3, #21]
		}
	}

	return result;
 800104a:	7dfb      	ldrb	r3, [r7, #23]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000258 	.word	0x20000258

08001058 <ADS122C04_Initialize>:

uint8_t ADS122C04_Initialize(ADS122C04 *dev, I2C_HandleTypeDef *i2cHandle,
		uint8_t addr) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	4613      	mov	r3, r2
 8001064:	71fb      	strb	r3, [r7, #7]
	dev->i2cHandle = i2cHandle;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	601a      	str	r2, [r3, #0]

	dev->ain[0] = 0.0f;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
	dev->ain[1] = 0.0f;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
	dev->ain[2] = 0.0f;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
	dev->ain[3] = 0.0f;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	611a      	str	r2, [r3, #16]

	dev->ready = 1;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2201      	movs	r2, #1
 8001090:	751a      	strb	r2, [r3, #20]
	dev->current = 0;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	755a      	strb	r2, [r3, #21]
	dev->addr = addr;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	75da      	strb	r2, [r3, #23]

	if (addr == ADS122C04_I2C_ADDR_0) {
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b80      	cmp	r3, #128	; 0x80
 80010a2:	d112      	bne.n	80010ca <ADS122C04_Initialize+0x72>
		dev->gain = ADS122C04_GAIN;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	761a      	strb	r2, [r3, #24]
		dev->mux[0] = ADS122C04_MUX_AIN0;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2208      	movs	r2, #8
 80010ae:	765a      	strb	r2, [r3, #25]
		dev->mux[1] = ADS122C04_MUX_AIN1;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2209      	movs	r2, #9
 80010b4:	769a      	strb	r2, [r3, #26]
		dev->mux[2] = ADS122C04_MUX_AIN2;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	220a      	movs	r2, #10
 80010ba:	76da      	strb	r2, [r3, #27]
		dev->mux[3] = ADS122C04_MUX_AIN3;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	220b      	movs	r2, #11
 80010c0:	771a      	strb	r2, [r3, #28]
		dev->muxLenght = 4;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2204      	movs	r2, #4
 80010c6:	775a      	strb	r2, [r3, #29]
 80010c8:	e00b      	b.n	80010e2 <ADS122C04_Initialize+0x8a>
	} else {
		dev->gain = 0x7;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2207      	movs	r2, #7
 80010ce:	761a      	strb	r2, [r3, #24]
		dev->mux[0] = ADS122C04_MUX_AIN0P1N;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	765a      	strb	r2, [r3, #25]
		dev->mux[1] = ADS122C04_MUX_AIN2P3N;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2207      	movs	r2, #7
 80010da:	769a      	strb	r2, [r3, #26]
		dev->muxLenght = 2;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2202      	movs	r2, #2
 80010e0:	775a      	strb	r2, [r3, #29]
	}

	// 330 sps, normal, single, refp refn, no temp
	uint8_t configData[1] = { 0x82 };
 80010e2:	2382      	movs	r3, #130	; 0x82
 80010e4:	753b      	strb	r3, [r7, #20]
	ADS122C04_WriteRegister(dev, ADS122C04_WRITE_CMD(ADS122C04_CONFIG_1_REG),
 80010e6:	f107 0214 	add.w	r2, r7, #20
 80010ea:	2301      	movs	r3, #1
 80010ec:	2144      	movs	r1, #68	; 0x44
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f850 	bl	8001194 <ADS122C04_WriteRegister>
			configData, 1);
	return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <ADS122C04_ProcessInterrupt>:

void ADS122C04_ProcessInterrupt(ADS122C04 *dev) {
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	dev->interrupt = 1;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	759a      	strb	r2, [r3, #22]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <ADS122C04_ReadAll>:

void ADS122C04_SetGain(ADS122C04 *dev, uint8_t gain) {
	dev->gain = gain;
}

HAL_StatusTypeDef ADS122C04_ReadAll(ADS122C04 *dev) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

	while (dev->current < dev->muxLenght) {
 8001124:	e004      	b.n	8001130 <ADS122C04_ReadAll+0x18>
		result = ADS122C04_ReadCurrent(dev);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff36 	bl	8000f98 <ADS122C04_ReadCurrent>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
	while (dev->current < dev->muxLenght) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7d5a      	ldrb	r2, [r3, #21]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7f5b      	ldrb	r3, [r3, #29]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3f4      	bcc.n	8001126 <ADS122C04_ReadAll+0xe>
	}

	dev->ready = 1;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	751a      	strb	r2, [r3, #20]
	dev->current = 0;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	755a      	strb	r2, [r3, #21]

	return result;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <ADS122C04_ReadRegister>:

HAL_StatusTypeDef ADS122C04_ReadRegister(ADS122C04 *dev, uint8_t reg,
		uint8_t *data, uint8_t length) {
 8001152:	b590      	push	{r4, r7, lr}
 8001154:	b089      	sub	sp, #36	; 0x24
 8001156:	af04      	add	r7, sp, #16
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	461a      	mov	r2, r3
 800115e:	460b      	mov	r3, r1
 8001160:	72fb      	strb	r3, [r7, #11]
 8001162:	4613      	mov	r3, r2
 8001164:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, dev->addr, reg,
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	7ddb      	ldrb	r3, [r3, #23]
 800116e:	b299      	uxth	r1, r3
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	b29a      	uxth	r2, r3
 8001174:	7abb      	ldrb	r3, [r7, #10]
 8001176:	b29b      	uxth	r3, r3
 8001178:	f04f 34ff 	mov.w	r4, #4294967295
 800117c:	9402      	str	r4, [sp, #8]
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	f003 f81d 	bl	80041c4 <HAL_I2C_Mem_Read>
 800118a:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}

08001194 <ADS122C04_WriteRegister>:

HAL_StatusTypeDef ADS122C04_WriteRegister(ADS122C04 *dev, uint8_t reg,
		uint8_t *data, uint8_t length) {
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af04      	add	r7, sp, #16
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	461a      	mov	r2, r3
 80011a0:	460b      	mov	r3, r1
 80011a2:	72fb      	strb	r3, [r7, #11]
 80011a4:	4613      	mov	r3, r2
 80011a6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(dev->i2cHandle, dev->addr, reg,
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	7ddb      	ldrb	r3, [r3, #23]
 80011b0:	b299      	uxth	r1, r3
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	7abb      	ldrb	r3, [r7, #10]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	f04f 34ff 	mov.w	r4, #4294967295
 80011be:	9402      	str	r4, [sp, #8]
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	f002 ff02 	bl	8003fd0 <HAL_I2C_Mem_Write>
 80011cc:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, length,
	HAL_MAX_DELAY);
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}

080011d6 <__Flash_Read_Data>:

#include "CalibrationStore.h"
#include "math.h"

static void __Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf,
		uint16_t numberofwords) {
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	4613      	mov	r3, r2
 80011e2:	80fb      	strh	r3, [r7, #6]
	while (1) {
		*RxBuf = *(uint32_t*) StartPageAddress;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3304      	adds	r3, #4
 80011f0:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3304      	adds	r3, #4
 80011f6:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--))
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	1e5a      	subs	r2, r3, #1
 80011fc:	80fa      	strh	r2, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d000      	beq.n	8001204 <__Flash_Read_Data+0x2e>
		*RxBuf = *(uint32_t*) StartPageAddress;
 8001202:	e7ef      	b.n	80011e4 <__Flash_Read_Data+0xe>
			break;
 8001204:	bf00      	nop
	}
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	0000      	movs	r0, r0
 8001214:	0000      	movs	r0, r0
	...

08001218 <limit>:

static double limit(double value, int decimalPrecision) {
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001222:	6078      	str	r0, [r7, #4]
	int calcScale = (int) pow(10, decimalPrecision);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff f995 	bl	8000554 <__aeabi_i2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	ec43 2b11 	vmov	d1, r2, r3
 8001232:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001298 <limit+0x80>
 8001236:	f00a fdf7 	bl	800be28 <pow>
 800123a:	ec53 2b10 	vmov	r2, r3, d0
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fca1 	bl	8000b88 <__aeabi_d2iz>
 8001246:	4603      	mov	r3, r0
 8001248:	617b      	str	r3, [r7, #20]
	return (double) round(value * calcScale) / calcScale;
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff f982 	bl	8000554 <__aeabi_i2d>
 8001250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001254:	f7ff f9e8 	bl	8000628 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	ec43 2b17 	vmov	d7, r2, r3
 8001260:	eeb0 0a47 	vmov.f32	s0, s14
 8001264:	eef0 0a67 	vmov.f32	s1, s15
 8001268:	f00a fd98 	bl	800bd9c <round>
 800126c:	ec55 4b10 	vmov	r4, r5, d0
 8001270:	6978      	ldr	r0, [r7, #20]
 8001272:	f7ff f96f 	bl	8000554 <__aeabi_i2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff fafd 	bl	800087c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	ec43 2b17 	vmov	d7, r2, r3
}
 800128a:	eeb0 0a47 	vmov.f32	s0, s14
 800128e:	eef0 0a67 	vmov.f32	s1, s15
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bdb0      	pop	{r4, r5, r7, pc}
 8001298:	00000000 	.word	0x00000000
 800129c:	40240000 	.word	0x40240000

080012a0 <map>:

static double map(double sourceNumber, double fromA, double fromB, double toA,
		double toB, int decimalPrecision) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b098      	sub	sp, #96	; 0x60
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80012aa:	ed87 1b08 	vstr	d1, [r7, #32]
 80012ae:	ed87 2b06 	vstr	d2, [r7, #24]
 80012b2:	ed87 3b04 	vstr	d3, [r7, #16]
 80012b6:	ed87 4b02 	vstr	d4, [r7, #8]
 80012ba:	6078      	str	r0, [r7, #4]
	double deltaA = fromB - fromA;
 80012bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c4:	f7fe fff8 	bl	80002b8 <__aeabi_dsub>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double deltaB = toB - toA;
 80012d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d8:	f7fe ffee 	bl	80002b8 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double scale = deltaB / deltaA;
 80012e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80012e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012ec:	f7ff fac6 	bl	800087c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double negA = -1 * fromA;
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	643b      	str	r3, [r7, #64]	; 0x40
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001302:	647b      	str	r3, [r7, #68]	; 0x44
	double offset = (negA * scale) + toA;
 8001304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001308:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001318:	f7fe ffd0 	bl	80002bc <__adddf3>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double finalNumber = (sourceNumber * scale) + offset;
 8001324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001328:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800132c:	f7ff f97c 	bl	8000628 <__aeabi_dmul>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001338:	f7fe ffc0 	bl	80002bc <__adddf3>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	return limit(finalNumber, decimalPrecision);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800134a:	f7ff ff65 	bl	8001218 <limit>
 800134e:	eeb0 7a40 	vmov.f32	s14, s0
 8001352:	eef0 7a60 	vmov.f32	s15, s1
}
 8001356:	eeb0 0a47 	vmov.f32	s0, s14
 800135a:	eef0 0a67 	vmov.f32	s1, s15
 800135e:	3760      	adds	r7, #96	; 0x60
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0000      	movs	r0, r0
	...

08001368 <CalibrationStore_ProcessAxis>:

static double CalibrationStore_ProcessAxis(double value, double __min,
		double __max) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001372:	ed87 1b02 	vstr	d1, [r7, #8]
 8001376:	ed87 2b00 	vstr	d2, [r7]
	return map(min(max( value, __min), __max), __min, __max, 0,
 800137a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800137e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001382:	f7ff fbe1 	bl	8000b48 <__aeabi_dcmpgt>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <CalibrationStore_ProcessAxis+0x2a>
 800138c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001390:	e001      	b.n	8001396 <CalibrationStore_ProcessAxis+0x2e>
 8001392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800139a:	f7ff fbb7 	bl	8000b0c <__aeabi_dcmplt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <CalibrationStore_ProcessAxis+0x5a>
 80013a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ac:	f7ff fbcc 	bl	8000b48 <__aeabi_dcmpgt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <CalibrationStore_ProcessAxis+0x54>
 80013b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80013ba:	e004      	b.n	80013c6 <CalibrationStore_ProcessAxis+0x5e>
 80013bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80013c0:	e001      	b.n	80013c6 <CalibrationStore_ProcessAxis+0x5e>
 80013c2:	ed97 7b00 	vldr	d7, [r7]
 80013c6:	2002      	movs	r0, #2
 80013c8:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 8001400 <CalibrationStore_ProcessAxis+0x98>
 80013cc:	ed9f 3b0e 	vldr	d3, [pc, #56]	; 8001408 <CalibrationStore_ProcessAxis+0xa0>
 80013d0:	ed97 2b00 	vldr	d2, [r7]
 80013d4:	ed97 1b02 	vldr	d1, [r7, #8]
 80013d8:	eeb0 0a47 	vmov.f32	s0, s14
 80013dc:	eef0 0a67 	vmov.f32	s1, s15
 80013e0:	f7ff ff5e 	bl	80012a0 <map>
 80013e4:	eeb0 7a40 	vmov.f32	s14, s0
 80013e8:	eef0 7a60 	vmov.f32	s15, s1
	CalibrationStore_BitSize, 2);
}
 80013ec:	eeb0 0a47 	vmov.f32	s0, s14
 80013f0:	eef0 0a67 	vmov.f32	s1, s15
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	00000000 	.word	0x00000000
 8001404:	40efffe0 	.word	0x40efffe0
	...

08001410 <CalibrationStore_ProcessThrottle>:

static double CalibrationStore_ProcessThrottle(double value, double __min,
		double __mil, double __max) {
 8001410:	b580      	push	{r7, lr}
 8001412:	ed2d 8b02 	vpush	{d8}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	ed87 0b06 	vstr	d0, [r7, #24]
 800141e:	ed87 1b04 	vstr	d1, [r7, #16]
 8001422:	ed87 2b02 	vstr	d2, [r7, #8]
 8001426:	ed87 3b00 	vstr	d3, [r7]
	double maxValue = (((__mil + 0.5 - __min) / CalibrationStore_MIL) * 100)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <CalibrationStore_ProcessThrottle+0x168>)
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7fe ff42 	bl	80002bc <__adddf3>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001444:	f7fe ff38 	bl	80002b8 <__aeabi_dsub>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	a343      	add	r3, pc, #268	; (adr r3, 8001560 <CalibrationStore_ProcessThrottle+0x150>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff fa11 	bl	800087c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b45      	ldr	r3, [pc, #276]	; (800157c <CalibrationStore_ProcessThrottle+0x16c>)
 8001468:	f7ff f8de 	bl	8000628 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001474:	f7fe ff22 	bl	80002bc <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			+ __min;
	return map(min(max( value, __min + CalibrationStore_Margin), maxValue),
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <CalibrationStore_ProcessThrottle+0x168>)
 8001486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148a:	f7fe ff17 	bl	80002bc <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001496:	f7ff fb57 	bl	8000b48 <__aeabi_dcmpgt>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <CalibrationStore_ProcessThrottle+0x96>
 80014a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014a4:	e00a      	b.n	80014bc <CalibrationStore_ProcessThrottle+0xac>
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <CalibrationStore_ProcessThrottle+0x168>)
 80014ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014b0:	f7fe ff04 	bl	80002bc <__adddf3>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014c0:	f7ff fb24 	bl	8000b0c <__aeabi_dcmplt>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d01e      	beq.n	8001508 <CalibrationStore_ProcessThrottle+0xf8>
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <CalibrationStore_ProcessThrottle+0x168>)
 80014d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014d4:	f7fe fef2 	bl	80002bc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014e0:	f7ff fb32 	bl	8000b48 <__aeabi_dcmpgt>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <CalibrationStore_ProcessThrottle+0xe0>
 80014ea:	ed97 8b06 	vldr	d8, [r7, #24]
 80014ee:	e00d      	b.n	800150c <CalibrationStore_ProcessThrottle+0xfc>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <CalibrationStore_ProcessThrottle+0x168>)
 80014f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014fa:	f7fe fedf 	bl	80002bc <__adddf3>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	ec43 2b18 	vmov	d8, r2, r3
 8001506:	e001      	b.n	800150c <CalibrationStore_ProcessThrottle+0xfc>
 8001508:	ed97 8b08 	vldr	d8, [r7, #32]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <CalibrationStore_ProcessThrottle+0x168>)
 8001512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001516:	f7fe fed1 	bl	80002bc <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b17 	vmov	d7, r2, r3
 8001522:	2002      	movs	r0, #2
 8001524:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8001568 <CalibrationStore_ProcessThrottle+0x158>
 8001528:	ed9f 3b11 	vldr	d3, [pc, #68]	; 8001570 <CalibrationStore_ProcessThrottle+0x160>
 800152c:	ed97 2b08 	vldr	d2, [r7, #32]
 8001530:	eeb0 1a47 	vmov.f32	s2, s14
 8001534:	eef0 1a67 	vmov.f32	s3, s15
 8001538:	eeb0 0a48 	vmov.f32	s0, s16
 800153c:	eef0 0a68 	vmov.f32	s1, s17
 8001540:	f7ff feae 	bl	80012a0 <map>
 8001544:	eeb0 7a40 	vmov.f32	s14, s0
 8001548:	eef0 7a60 	vmov.f32	s15, s1
			__min + CalibrationStore_Margin, maxValue, 0,
			CalibrationStore_BitSize, 2);
}
 800154c:	eeb0 0a47 	vmov.f32	s0, s14
 8001550:	eef0 0a67 	vmov.f32	s1, s15
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	ecbd 8b02 	vpop	{d8}
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	00000000 	.word	0x00000000
 8001564:	4052c000 	.word	0x4052c000
 8001568:	00000000 	.word	0x00000000
 800156c:	40efffe0 	.word	0x40efffe0
	...
 8001578:	3fe00000 	.word	0x3fe00000
 800157c:	40590000 	.word	0x40590000

08001580 <CalibrationStore_ProcessCenterAxis>:

static double CalibrationStore_ProcessCenterAxis(double value, double __min,
		double center, double __max) {
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b090      	sub	sp, #64	; 0x40
 8001584:	af00      	add	r7, sp, #0
 8001586:	ed87 0b06 	vstr	d0, [r7, #24]
 800158a:	ed87 1b04 	vstr	d1, [r7, #16]
 800158e:	ed87 2b02 	vstr	d2, [r7, #8]
 8001592:	ed87 3b00 	vstr	d3, [r7]
	double offset =
			center - __min < __max - center ? center - __min : __max - center;
 8001596:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800159a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800159e:	f7fe fe8b 	bl	80002b8 <__aeabi_dsub>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4614      	mov	r4, r2
 80015a8:	461d      	mov	r5, r3
 80015aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b2:	f7fe fe81 	bl	80002b8 <__aeabi_dsub>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7ff faa5 	bl	8000b0c <__aeabi_dcmplt>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <CalibrationStore_ProcessCenterAxis+0x5a>
 80015c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d0:	f7fe fe72 	bl	80002b8 <__aeabi_dsub>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	e007      	b.n	80015ea <CalibrationStore_ProcessCenterAxis+0x6a>
 80015da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015e2:	f7fe fe69 	bl	80002b8 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
	double offset =
 80015ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double _min = center - offset;
 80015ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015f6:	f7fe fe5f 	bl	80002b8 <__aeabi_dsub>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double _max = center + offset;
 8001602:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800160a:	f7fe fe57 	bl	80002bc <__adddf3>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	value = min(max( value, _min), _max);
 8001616:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800161a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800161e:	f7ff fa93 	bl	8000b48 <__aeabi_dcmpgt>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <CalibrationStore_ProcessCenterAxis+0xae>
 8001628:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800162c:	e001      	b.n	8001632 <CalibrationStore_ProcessCenterAxis+0xb2>
 800162e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001636:	f7ff fa69 	bl	8000b0c <__aeabi_dcmplt>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <CalibrationStore_ProcessCenterAxis+0xde>
 8001640:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001644:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001648:	f7ff fa7e 	bl	8000b48 <__aeabi_dcmpgt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <CalibrationStore_ProcessCenterAxis+0xd8>
 8001652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001656:	e004      	b.n	8001662 <CalibrationStore_ProcessCenterAxis+0xe2>
 8001658:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800165c:	e001      	b.n	8001662 <CalibrationStore_ProcessCenterAxis+0xe2>
 800165e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001662:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double result = map(value, _min, _max, 0, CalibrationStore_BitSize, 2);
 8001666:	2002      	movs	r0, #2
 8001668:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 80016a0 <CalibrationStore_ProcessCenterAxis+0x120>
 800166c:	ed9f 3b0e 	vldr	d3, [pc, #56]	; 80016a8 <CalibrationStore_ProcessCenterAxis+0x128>
 8001670:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001674:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001678:	ed97 0b06 	vldr	d0, [r7, #24]
 800167c:	f7ff fe10 	bl	80012a0 <map>
 8001680:	ed87 0b08 	vstr	d0, [r7, #32]

	return result;
 8001684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001688:	ec43 2b17 	vmov	d7, r2, r3
}
 800168c:	eeb0 0a47 	vmov.f32	s0, s14
 8001690:	eef0 0a67 	vmov.f32	s1, s15
 8001694:	3740      	adds	r7, #64	; 0x40
 8001696:	46bd      	mov	sp, r7
 8001698:	bdb0      	pop	{r4, r5, r7, pc}
 800169a:	bf00      	nop
 800169c:	f3af 8000 	nop.w
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40efffe0 	.word	0x40efffe0
	...

080016b0 <CalibrationStore_Filter>:

static double CalibrationStore_Filter(double value, double *store,
		uint8_t current) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
	store[current] = value;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	18d1      	adds	r1, r2, r3
 80016c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016cc:	e9c1 2300 	strd	r2, r3, [r1]

	int i;
	double result;
	for (i = 0; i < CalibrationStore_FilterAmount; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	e010      	b.n	80016f8 <CalibrationStore_Filter+0x48>
		result += store[i];
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016e6:	f7fe fde9 	bl	80002bc <__adddf3>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (i = 0; i < CalibrationStore_FilterAmount; i++) {
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b13      	cmp	r3, #19
 80016fc:	ddeb      	ble.n	80016d6 <CalibrationStore_Filter+0x26>
	}

	return result / CalibrationStore_FilterAmount;
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <CalibrationStore_Filter+0x74>)
 8001704:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001708:	f7ff f8b8 	bl	800087c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	ec43 2b17 	vmov	d7, r2, r3
}
 8001714:	eeb0 0a47 	vmov.f32	s0, s14
 8001718:	eef0 0a67 	vmov.f32	s1, s15
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40340000 	.word	0x40340000

08001728 <CalibrationStore_Calibrate>:
	dev->rz_mil = val->rz / 2;
	dev->rz_max = val->rz;
}

void CalibrationStore_Calibrate(CalibrationStore *dev,
		CalibrationStoreValues *val) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	dev->x_axis_min = min(dev->x_axis_min || val->x_axis, val->x_axis);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10b      	bne.n	8001752 <CalibrationStore_Calibrate+0x2a>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	f7ff f9d6 	bl	8000af8 <__aeabi_dcmpeq>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <CalibrationStore_Calibrate+0x2e>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <CalibrationStore_Calibrate+0x30>
 8001756:	2300      	movs	r3, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fefb 	bl	8000554 <__aeabi_i2d>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f9d2 	bl	8000b0c <__aeabi_dcmplt>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01d      	beq.n	80017aa <CalibrationStore_Calibrate+0x82>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10b      	bne.n	800178e <CalibrationStore_Calibrate+0x66>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	f7ff f9b8 	bl	8000af8 <__aeabi_dcmpeq>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <CalibrationStore_Calibrate+0x6a>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <CalibrationStore_Calibrate+0x6c>
 8001792:	2300      	movs	r3, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fedd 	bl	8000554 <__aeabi_i2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7ff fa19 	bl	8000bd8 <__aeabi_d2uiz>
 80017a6:	4603      	mov	r3, r0
 80017a8:	e007      	b.n	80017ba <CalibrationStore_Calibrate+0x92>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fa10 	bl	8000bd8 <__aeabi_d2uiz>
 80017b8:	4603      	mov	r3, r0
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
	dev->x_axis_center = val->x_axis;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff fa06 	bl	8000bd8 <__aeabi_d2uiz>
 80017cc:	4602      	mov	r2, r0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	605a      	str	r2, [r3, #4]
	dev->x_axis_max = max(dev->x_axis_max, val->x_axis);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe feac 	bl	8000534 <__aeabi_ui2d>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7ff f9b1 	bl	8000b48 <__aeabi_dcmpgt>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00c      	beq.n	8001806 <CalibrationStore_Calibrate+0xde>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe9f 	bl	8000534 <__aeabi_ui2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff f9eb 	bl	8000bd8 <__aeabi_d2uiz>
 8001802:	4603      	mov	r3, r0
 8001804:	e007      	b.n	8001816 <CalibrationStore_Calibrate+0xee>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f9e2 	bl	8000bd8 <__aeabi_d2uiz>
 8001814:	4603      	mov	r3, r0
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6093      	str	r3, [r2, #8]

	dev->y_axis_min = min(dev->y_axis_min || val->y_axis, val->y_axis);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10b      	bne.n	800183a <CalibrationStore_Calibrate+0x112>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f7ff f962 	bl	8000af8 <__aeabi_dcmpeq>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <CalibrationStore_Calibrate+0x116>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <CalibrationStore_Calibrate+0x118>
 800183e:	2300      	movs	r3, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe87 	bl	8000554 <__aeabi_i2d>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800184c:	f7ff f95e 	bl	8000b0c <__aeabi_dcmplt>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01d      	beq.n	8001892 <CalibrationStore_Calibrate+0x16a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10b      	bne.n	8001876 <CalibrationStore_Calibrate+0x14e>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f7ff f944 	bl	8000af8 <__aeabi_dcmpeq>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <CalibrationStore_Calibrate+0x152>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <CalibrationStore_Calibrate+0x154>
 800187a:	2300      	movs	r3, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe69 	bl	8000554 <__aeabi_i2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f9a5 	bl	8000bd8 <__aeabi_d2uiz>
 800188e:	4603      	mov	r3, r0
 8001890:	e007      	b.n	80018a2 <CalibrationStore_Calibrate+0x17a>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f99c 	bl	8000bd8 <__aeabi_d2uiz>
 80018a0:	4603      	mov	r3, r0
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	60d3      	str	r3, [r2, #12]
	dev->y_axis_center = val->y_axis;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f992 	bl	8000bd8 <__aeabi_d2uiz>
 80018b4:	4602      	mov	r2, r0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	611a      	str	r2, [r3, #16]
	dev->y_axis_max = max(dev->y_axis_max, val->y_axis);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe38 	bl	8000534 <__aeabi_ui2d>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ca:	f7ff f93d 	bl	8000b48 <__aeabi_dcmpgt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00c      	beq.n	80018ee <CalibrationStore_Calibrate+0x1c6>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe2b 	bl	8000534 <__aeabi_ui2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f977 	bl	8000bd8 <__aeabi_d2uiz>
 80018ea:	4603      	mov	r3, r0
 80018ec:	e007      	b.n	80018fe <CalibrationStore_Calibrate+0x1d6>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f7ff f96e 	bl	8000bd8 <__aeabi_d2uiz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6153      	str	r3, [r2, #20]

	dev->rx_min = min(dev->rx_min == 0 ? val->rx : dev->rx_min, val->rx);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d026      	beq.n	8001958 <CalibrationStore_Calibrate+0x230>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe10 	bl	8000534 <__aeabi_ui2d>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800191a:	f7ff f8f7 	bl	8000b0c <__aeabi_dcmplt>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d019      	beq.n	8001958 <CalibrationStore_Calibrate+0x230>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d108      	bne.n	800193e <CalibrationStore_Calibrate+0x216>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f94f 	bl	8000bd8 <__aeabi_d2uiz>
 800193a:	4603      	mov	r3, r0
 800193c:	e014      	b.n	8001968 <CalibrationStore_Calibrate+0x240>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdf6 	bl	8000534 <__aeabi_ui2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f942 	bl	8000bd8 <__aeabi_d2uiz>
 8001954:	4603      	mov	r3, r0
 8001956:	e007      	b.n	8001968 <CalibrationStore_Calibrate+0x240>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f939 	bl	8000bd8 <__aeabi_d2uiz>
 8001966:	4603      	mov	r3, r0
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6193      	str	r3, [r2, #24]
	dev->rx_center = val->rx;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f92f 	bl	8000bd8 <__aeabi_d2uiz>
 800197a:	4602      	mov	r2, r0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	61da      	str	r2, [r3, #28]
	dev->rx_max = max(dev->rx_max, val->rx);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fdd5 	bl	8000534 <__aeabi_ui2d>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001990:	f7ff f8da 	bl	8000b48 <__aeabi_dcmpgt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <CalibrationStore_Calibrate+0x28c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdc8 	bl	8000534 <__aeabi_ui2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f914 	bl	8000bd8 <__aeabi_d2uiz>
 80019b0:	4603      	mov	r3, r0
 80019b2:	e007      	b.n	80019c4 <CalibrationStore_Calibrate+0x29c>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f90b 	bl	8000bd8 <__aeabi_d2uiz>
 80019c2:	4603      	mov	r3, r0
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6213      	str	r3, [r2, #32]

	dev->ry_min = min(dev->ry_min == 0 ? val->ry : dev->ry_min, val->ry);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d026      	beq.n	8001a1e <CalibrationStore_Calibrate+0x2f6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdad 	bl	8000534 <__aeabi_ui2d>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019e0:	f7ff f894 	bl	8000b0c <__aeabi_dcmplt>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d019      	beq.n	8001a1e <CalibrationStore_Calibrate+0x2f6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d108      	bne.n	8001a04 <CalibrationStore_Calibrate+0x2dc>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f8ec 	bl	8000bd8 <__aeabi_d2uiz>
 8001a00:	4603      	mov	r3, r0
 8001a02:	e014      	b.n	8001a2e <CalibrationStore_Calibrate+0x306>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd93 	bl	8000534 <__aeabi_ui2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8df 	bl	8000bd8 <__aeabi_d2uiz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	e007      	b.n	8001a2e <CalibrationStore_Calibrate+0x306>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f8d6 	bl	8000bd8 <__aeabi_d2uiz>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6253      	str	r3, [r2, #36]	; 0x24
	dev->ry_max = max(dev->ry_max, val->ry);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd7c 	bl	8000534 <__aeabi_ui2d>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a42:	f7ff f881 	bl	8000b48 <__aeabi_dcmpgt>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00c      	beq.n	8001a66 <CalibrationStore_Calibrate+0x33e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd6f 	bl	8000534 <__aeabi_ui2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f8bb 	bl	8000bd8 <__aeabi_d2uiz>
 8001a62:	4603      	mov	r3, r0
 8001a64:	e007      	b.n	8001a76 <CalibrationStore_Calibrate+0x34e>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f8b2 	bl	8000bd8 <__aeabi_d2uiz>
 8001a74:	4603      	mov	r3, r0
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6293      	str	r3, [r2, #40]	; 0x28

	dev->rz_min = min(dev->rz_min == 0 ? val->rz : dev->rz_min, val->rz);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	f7ff f836 	bl	8000af8 <__aeabi_dcmpeq>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11e      	bne.n	8001ad0 <CalibrationStore_Calibrate+0x3a8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a9e:	f7ff f835 	bl	8000b0c <__aeabi_dcmplt>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <CalibrationStore_Calibrate+0x3a8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f7ff f81f 	bl	8000af8 <__aeabi_dcmpeq>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <CalibrationStore_Calibrate+0x3a0>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ac6:	e006      	b.n	8001ad6 <CalibrationStore_Calibrate+0x3ae>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ace:	e002      	b.n	8001ad6 <CalibrationStore_Calibrate+0x3ae>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dev->rz_mil = val->rz;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	dev->rz_max = max(dev->rz_max, val->rz);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001af4:	f7ff f828 	bl	8000b48 <__aeabi_dcmpgt>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <CalibrationStore_Calibrate+0x3de>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001b04:	e002      	b.n	8001b0c <CalibrationStore_Calibrate+0x3e4>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	0000      	movs	r0, r0
 8001b1c:	0000      	movs	r0, r0
	...

08001b20 <CalibrationStore_Process>:

void CalibrationStore_Process(CalibrationStore *dev,
		CalibrationStoreValues *val) {
 8001b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b24:	ed2d 8b02 	vpush	{d8}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]

	val->currentF =
			val->currentF < CalibrationStore_FilterAmount - 1 ?
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	val->currentF =
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d805      	bhi.n	8001b46 <CalibrationStore_Process+0x26>
					val->currentF + 1 : 0;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	val->currentF =
 8001b40:	3301      	adds	r3, #1
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	e000      	b.n	8001b48 <CalibrationStore_Process+0x28>
 8001b46:	2200      	movs	r2, #0
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	val->x_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->x_axis,
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	ed93 8b00 	vldr	d8, [r3]
			dev->x_axis_min, dev->x_axis_center, dev->x_axis_max) + 32768;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
	val->x_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->x_axis,
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fceb 	bl	8000534 <__aeabi_ui2d>
 8001b5e:	4604      	mov	r4, r0
 8001b60:	460d      	mov	r5, r1
			dev->x_axis_min, dev->x_axis_center, dev->x_axis_max) + 32768;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
	val->x_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->x_axis,
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fce4 	bl	8000534 <__aeabi_ui2d>
 8001b6c:	4680      	mov	r8, r0
 8001b6e:	4689      	mov	r9, r1
			dev->x_axis_min, dev->x_axis_center, dev->x_axis_max) + 32768;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
	val->x_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->x_axis,
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fcdd 	bl	8000534 <__aeabi_ui2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	ec43 2b13 	vmov	d3, r2, r3
 8001b82:	ec49 8b12 	vmov	d2, r8, r9
 8001b86:	ec45 4b11 	vmov	d1, r4, r5
 8001b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8001b8e:	eef0 0a68 	vmov.f32	s1, s17
 8001b92:	f7ff fcf5 	bl	8001580 <CalibrationStore_ProcessCenterAxis>
 8001b96:	ec53 2b10 	vmov	r2, r3, d0
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff f81b 	bl	8000bd8 <__aeabi_d2uiz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29b      	uxth	r3, r3
			dev->x_axis_min, dev->x_axis_center, dev->x_axis_max) + 32768;
 8001ba6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	val->x_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->x_axis,
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcd2 	bl	8000554 <__aeabi_i2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	e9c1 2300 	strd	r2, r3, [r1]
//	val->x_axis = CalibrationStore_Filter(val->x_axis, val->x_axis_f,
//			val->currentF) - 32768;

	val->y_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->y_axis,
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	ed93 8b02 	vldr	d8, [r3, #8]
			dev->y_axis_min, dev->y_axis_center, dev->y_axis_max) + 32768;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
	val->y_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->y_axis,
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcb5 	bl	8000534 <__aeabi_ui2d>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
			dev->y_axis_min, dev->y_axis_center, dev->y_axis_max) + 32768;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
	val->y_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->y_axis,
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcae 	bl	8000534 <__aeabi_ui2d>
 8001bd8:	4680      	mov	r8, r0
 8001bda:	4689      	mov	r9, r1
			dev->y_axis_min, dev->y_axis_center, dev->y_axis_max) + 32768;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
	val->y_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->y_axis,
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fca7 	bl	8000534 <__aeabi_ui2d>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	ec43 2b13 	vmov	d3, r2, r3
 8001bee:	ec49 8b12 	vmov	d2, r8, r9
 8001bf2:	ec45 4b11 	vmov	d1, r4, r5
 8001bf6:	eeb0 0a48 	vmov.f32	s0, s16
 8001bfa:	eef0 0a68 	vmov.f32	s1, s17
 8001bfe:	f7ff fcbf 	bl	8001580 <CalibrationStore_ProcessCenterAxis>
 8001c02:	ec53 2b10 	vmov	r2, r3, d0
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe ffe5 	bl	8000bd8 <__aeabi_d2uiz>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29b      	uxth	r3, r3
			dev->y_axis_min, dev->y_axis_center, dev->y_axis_max) + 32768;
 8001c12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	val->y_axis = (uint16_t)CalibrationStore_ProcessCenterAxis(val->y_axis,
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc9c 	bl	8000554 <__aeabi_i2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	e9c1 2302 	strd	r2, r3, [r1, #8]
//	val->y_axis = CalibrationStore_Filter(val->y_axis, &val->y_axis_f,
//			val->currentF);

	val->rx = CalibrationStore_ProcessCenterAxis(val->rx, dev->rx_min,
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	ed93 8b04 	vldr	d8, [r3, #16]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc7f 	bl	8000534 <__aeabi_ui2d>
 8001c36:	4604      	mov	r4, r0
 8001c38:	460d      	mov	r5, r1
			dev->rx_center, dev->rx_max) - 32768;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
	val->rx = CalibrationStore_ProcessCenterAxis(val->rx, dev->rx_min,
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc78 	bl	8000534 <__aeabi_ui2d>
 8001c44:	4680      	mov	r8, r0
 8001c46:	4689      	mov	r9, r1
			dev->rx_center, dev->rx_max) - 32768;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
	val->rx = CalibrationStore_ProcessCenterAxis(val->rx, dev->rx_min,
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc71 	bl	8000534 <__aeabi_ui2d>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	ec43 2b13 	vmov	d3, r2, r3
 8001c5a:	ec49 8b12 	vmov	d2, r8, r9
 8001c5e:	ec45 4b11 	vmov	d1, r4, r5
 8001c62:	eeb0 0a48 	vmov.f32	s0, s16
 8001c66:	eef0 0a68 	vmov.f32	s1, s17
 8001c6a:	f7ff fc89 	bl	8001580 <CalibrationStore_ProcessCenterAxis>
 8001c6e:	ec51 0b10 	vmov	r0, r1, d0
			dev->rx_center, dev->rx_max) - 32768;
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	4b70      	ldr	r3, [pc, #448]	; (8001e38 <CalibrationStore_Process+0x318>)
 8001c78:	f7fe fb1e 	bl	80002b8 <__aeabi_dsub>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
	val->rx = CalibrationStore_ProcessCenterAxis(val->rx, dev->rx_min,
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	e9c1 2304 	strd	r2, r3, [r1, #16]

	val->ry = CalibrationStore_ProcessAxis(val->ry, dev->ry_min, dev->ry_max)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	ed93 8b06 	vldr	d8, [r3, #24]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc4f 	bl	8000534 <__aeabi_ui2d>
 8001c96:	4604      	mov	r4, r0
 8001c98:	460d      	mov	r5, r1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc48 	bl	8000534 <__aeabi_ui2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	ec43 2b12 	vmov	d2, r2, r3
 8001cac:	ec45 4b11 	vmov	d1, r4, r5
 8001cb0:	eeb0 0a48 	vmov.f32	s0, s16
 8001cb4:	eef0 0a68 	vmov.f32	s1, s17
 8001cb8:	f7ff fb56 	bl	8001368 <CalibrationStore_ProcessAxis>
 8001cbc:	ec51 0b10 	vmov	r0, r1, d0
			- 32768;
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b5c      	ldr	r3, [pc, #368]	; (8001e38 <CalibrationStore_Process+0x318>)
 8001cc6:	f7fe faf7 	bl	80002b8 <__aeabi_dsub>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
	val->ry = CalibrationStore_ProcessAxis(val->ry, dev->ry_min, dev->ry_max)
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	e9c1 2306 	strd	r2, r3, [r1, #24]

	val->cutoff = val->rz < (dev->rz_min - 5) ? 0x1 : 0x0;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <CalibrationStore_Process+0x31c>)
 8001ce6:	f7fe fae7 	bl	80002b8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	2101      	movs	r1, #1
 8001cf0:	460e      	mov	r6, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe ff09 	bl	8000b0c <__aeabi_dcmplt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <CalibrationStore_Process+0x1e4>
 8001d00:	2300      	movs	r3, #0
 8001d02:	461e      	mov	r6, r3
 8001d04:	b2f3      	uxtb	r3, r6
 8001d06:	461a      	mov	r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	val->rz = CalibrationStore_ProcessThrottle(limit(val->rz, 1), dev->rz_min,
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	ed93 7b08 	vldr	d7, [r3, #32]
 8001d14:	2001      	movs	r0, #1
 8001d16:	eeb0 0a47 	vmov.f32	s0, s14
 8001d1a:	eef0 0a67 	vmov.f32	s1, s15
 8001d1e:	f7ff fa7b 	bl	8001218 <limit>
 8001d22:	eeb0 4a40 	vmov.f32	s8, s0
 8001d26:	eef0 4a60 	vmov.f32	s9, s1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001d3c:	eeb0 3a45 	vmov.f32	s6, s10
 8001d40:	eef0 3a65 	vmov.f32	s7, s11
 8001d44:	eeb0 2a46 	vmov.f32	s4, s12
 8001d48:	eef0 2a66 	vmov.f32	s5, s13
 8001d4c:	eeb0 1a47 	vmov.f32	s2, s14
 8001d50:	eef0 1a67 	vmov.f32	s3, s15
 8001d54:	eeb0 0a44 	vmov.f32	s0, s8
 8001d58:	eef0 0a64 	vmov.f32	s1, s9
 8001d5c:	f7ff fb58 	bl	8001410 <CalibrationStore_ProcessThrottle>
 8001d60:	eeb0 7a40 	vmov.f32	s14, s0
 8001d64:	eef0 7a60 	vmov.f32	s15, s1
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	ed83 7b08 	vstr	d7, [r3, #32]
			dev->rz_mil, dev->rz_max);
	val->rz = CalibrationStore_Filter(val->rz, val->rx_f, val->currentF);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	ed93 7b08 	vldr	d7, [r3, #32]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	f503 72b8 	add.w	r2, r3, #368	; 0x170
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	eeb0 0a47 	vmov.f32	s0, s14
 8001d88:	eef0 0a67 	vmov.f32	s1, s15
 8001d8c:	f7ff fc90 	bl	80016b0 <CalibrationStore_Filter>
 8001d90:	eeb0 7a40 	vmov.f32	s14, s0
 8001d94:	eef0 7a60 	vmov.f32	s15, s1
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	ed83 7b08 	vstr	d7, [r3, #32]
	val->rz = min(max( val->rz, 0), CalibrationStore_BitSize) - 32768;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	f7fe fecc 	bl	8000b48 <__aeabi_dcmpgt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <CalibrationStore_Process+0x2b8>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	461c      	mov	r4, r3
 8001dc0:	a31b      	add	r3, pc, #108	; (adr r3, 8001e30 <CalibrationStore_Process+0x310>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fea1 	bl	8000b0c <__aeabi_dcmplt>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <CalibrationStore_Process+0x2b4>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	461c      	mov	r4, r3
 8001dd4:	b2e3      	uxtb	r3, r4
 8001dd6:	e000      	b.n	8001dda <CalibrationStore_Process+0x2ba>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d014      	beq.n	8001e08 <CalibrationStore_Process+0x2e8>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f7fe feac 	bl	8000b48 <__aeabi_dcmpgt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <CalibrationStore_Process+0x2de>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001dfc:	e007      	b.n	8001e0e <CalibrationStore_Process+0x2ee>
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	e002      	b.n	8001e0e <CalibrationStore_Process+0x2ee>
 8001e08:	a109      	add	r1, pc, #36	; (adr r1, 8001e30 <CalibrationStore_Process+0x310>)
 8001e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <CalibrationStore_Process+0x318>)
 8001e14:	f7fe fa50 	bl	80002b8 <__aeabi_dsub>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	e9c1 2308 	strd	r2, r3, [r1, #32]

}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	ecbd 8b02 	vpop	{d8}
 8001e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40efffe0 	.word	0x40efffe0
 8001e38:	40e00000 	.word	0x40e00000
 8001e3c:	40140000 	.word	0x40140000

08001e40 <CalibrationStore_Store>:

uint32_t CalibrationStore_Store(CalibrationStore *dev) {
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	466b      	mov	r3, sp
 8001e4a:	461d      	mov	r5, r3

	uint32_t baseAddress = CalibrationStore_BaseAddress;
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <CalibrationStore_Store+0xe0>)
 8001e4e:	61bb      	str	r3, [r7, #24]
	int numofwords = (sizeof(CalibrationStore) / 4)
 8001e50:	2312      	movs	r3, #18
 8001e52:	617b      	str	r3, [r7, #20]
			+ ((sizeof(CalibrationStore) % 4) != 0);
	int sofar = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]

	uint32_t data[numofwords];
 8001e58:	697c      	ldr	r4, [r7, #20]
 8001e5a:	1e63      	subs	r3, r4, #1
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4623      	mov	r3, r4
 8001e60:	4618      	mov	r0, r3
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	014b      	lsls	r3, r1, #5
 8001e70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e74:	0142      	lsls	r2, r0, #5
 8001e76:	4623      	mov	r3, r4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	014b      	lsls	r3, r1, #5
 8001e88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e8c:	0142      	lsls	r2, r0, #5
 8001e8e:	4623      	mov	r3, r4
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	3307      	adds	r3, #7
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	ebad 0d03 	sub.w	sp, sp, r3
 8001e9c:	466b      	mov	r3, sp
 8001e9e:	3303      	adds	r3, #3
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	60fb      	str	r3, [r7, #12]
	memcpy(data, dev, sizeof(CalibrationStore));
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2248      	movs	r2, #72	; 0x48
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f008 fe01 	bl	800aab4 <memcpy>

	HAL_FLASH_Unlock();
 8001eb2:	f001 fb09 	bl	80034c8 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/
	FLASH_Erase_Sector(CalibrationStore_Sector, VOLTAGE_RANGE_3);
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	2005      	movs	r0, #5
 8001eba:	f001 fc83 	bl	80037c4 <FLASH_Erase_Sector>
	FLASH_WaitForLastOperation(100);
 8001ebe:	2064      	movs	r0, #100	; 0x64
 8001ec0:	f001 fb40 	bl	8003544 <FLASH_WaitForLastOperation>

	HAL_Delay(500);
 8001ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ec8:	f001 f942 	bl	8003150 <HAL_Delay>

	/* Program the user Flash area word by word*/
	while (sofar < numofwords) {
 8001ecc:	e01b      	b.n	8001f06 <CalibrationStore_Store+0xc6>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, baseAddress, data[sofar])
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	69b9      	ldr	r1, [r7, #24]
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f001 fa9e 	bl	8003420 <HAL_FLASH_Program>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <CalibrationStore_Store+0xb8>
				== HAL_OK) {
			baseAddress += 4; // use StartPageAddress += 2 for half word and 8 for double word
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	3304      	adds	r3, #4
 8001eee:	61bb      	str	r3, [r7, #24]
			sofar++;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e003      	b.n	8001f00 <CalibrationStore_Store+0xc0>
		} else {
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError();
 8001ef8:	f001 fb18 	bl	800352c <HAL_FLASH_GetError>
 8001efc:	4603      	mov	r3, r0
 8001efe:	e009      	b.n	8001f14 <CalibrationStore_Store+0xd4>
		}
		FLASH_WaitForLastOperation(10);
 8001f00:	200a      	movs	r0, #10
 8001f02:	f001 fb1f 	bl	8003544 <FLASH_WaitForLastOperation>
	while (sofar < numofwords) {
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbdf      	blt.n	8001ece <CalibrationStore_Store+0x8e>
	}

	HAL_FLASH_Lock();
 8001f0e:	f001 fafd 	bl	800350c <HAL_FLASH_Lock>

	return 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	46ad      	mov	sp, r5
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	08020000 	.word	0x08020000

08001f24 <CalibrationStore_Retrieve>:

uint32_t CalibrationStore_Retrieve(CalibrationStore *dev) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b0cc      	sub	sp, #304	; 0x130
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	6018      	str	r0, [r3, #0]
	int numofwords = (sizeof(CalibrationStore) / 4)
 8001f2e:	2312      	movs	r3, #18
 8001f30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			+ ((sizeof(CalibrationStore) % 4) != 0);

	char *RxData[sizeof(CalibrationStore)];
	__Flash_Read_Data( CalibrationStore_BaseAddress, RxData, numofwords);
 8001f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <CalibrationStore_Retrieve+0x3c>)
 8001f42:	f7ff f948 	bl	80011d6 <__Flash_Read_Data>

	memcpy(dev, RxData, sizeof(CalibrationStore));
 8001f46:	f107 010c 	add.w	r1, r7, #12
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2248      	movs	r2, #72	; 0x48
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	f008 fdb0 	bl	800aab4 <memcpy>
}
 8001f54:	bf00      	nop
 8001f56:	4618      	mov	r0, r3
 8001f58:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	08020000 	.word	0x08020000

08001f64 <LEDS_Initialize>:

#include "Leds.h"

void LEDS_Initialize(LEDS *leds, uint16_t delay) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
	leds->current = 0;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
	leds->delay = delay;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
	leds->last = HAL_GetTick();
 8001f7c:	f001 f8dc 	bl	8003138 <HAL_GetTick>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	605a      	str	r2, [r3, #4]
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <LEDS_Set>:

void LEDS_Set(uint8_t id, uint8_t state) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
	switch (id) {
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d826      	bhi.n	8001ff4 <LEDS_Set+0x64>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <LEDS_Set+0x1c>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fbd 	.word	0x08001fbd
 8001fb0:	08001fcb 	.word	0x08001fcb
 8001fb4:	08001fd9 	.word	0x08001fd9
 8001fb8:	08001fe7 	.word	0x08001fe7
	case 0:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state);
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	480e      	ldr	r0, [pc, #56]	; (8001ffc <LEDS_Set+0x6c>)
 8001fc4:	f001 fe8e 	bl	8003ce4 <HAL_GPIO_WritePin>
		break;
 8001fc8:	e014      	b.n	8001ff4 <LEDS_Set+0x64>
	case 1:
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state);
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2101      	movs	r1, #1
 8001fd0:	480b      	ldr	r0, [pc, #44]	; (8002000 <LEDS_Set+0x70>)
 8001fd2:	f001 fe87 	bl	8003ce4 <HAL_GPIO_WritePin>
		break;
 8001fd6:	e00d      	b.n	8001ff4 <LEDS_Set+0x64>
	case 2:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state);
 8001fd8:	79bb      	ldrb	r3, [r7, #6]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4808      	ldr	r0, [pc, #32]	; (8002000 <LEDS_Set+0x70>)
 8001fe0:	f001 fe80 	bl	8003ce4 <HAL_GPIO_WritePin>
		break;
 8001fe4:	e006      	b.n	8001ff4 <LEDS_Set+0x64>
	case 3:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, state);
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2104      	movs	r1, #4
 8001fec:	4804      	ldr	r0, [pc, #16]	; (8002000 <LEDS_Set+0x70>)
 8001fee:	f001 fe79 	bl	8003ce4 <HAL_GPIO_WritePin>
		break;
 8001ff2:	bf00      	nop
	}
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400

08002004 <LEDS_Run>:

void LEDS_Run(LEDS *leds, uint8_t reverse) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
	uint32_t time = HAL_GetTick();
 8002010:	f001 f892 	bl	8003138 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

	if (time > leds->last + leds->delay) {
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4293      	cmp	r3, r2
 8002026:	d92e      	bls.n	8002086 <LEDS_Run+0x82>
		leds->last = time;
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	605a      	str	r2, [r3, #4]

		LEDS_Set(leds->current, 1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2101      	movs	r1, #1
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ffab 	bl	8001f90 <LEDS_Set>
		reverse ? leds->current == 0 ? leds->current = 3 : leds->current--
		: leds->current == 3 ? leds->current = 0 : leds->current++;
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <LEDS_Run+0x5a>
		reverse ? leds->current == 0 ? leds->current = 3 : leds->current--
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <LEDS_Run+0x4c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e014      	b.n	800207a <LEDS_Run+0x76>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e00d      	b.n	800207a <LEDS_Run+0x76>
		: leds->current == 3 ? leds->current = 0 : leds->current++;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d103      	bne.n	800206e <LEDS_Run+0x6a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e005      	b.n	800207a <LEDS_Run+0x76>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	701a      	strb	r2, [r3, #0]
		LEDS_Set(leds->current, 0);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff85 	bl	8001f90 <LEDS_Set>
	}
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <LEDS_SetDelay>:

void LEDS_SetDelay(LEDS *leds, uint16_t delay) {
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	807b      	strh	r3, [r7, #2]
	leds->delay = delay;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <MLX90393_Initialize>:
#include <math.h>

#define pi acos(-1.0)

HAL_StatusTypeDef MLX90393_Initialize(MLX90393 *dev,
		I2C_HandleTypeDef *i2cHandle) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]

	dev->i2cHandle = i2cHandle;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	601a      	str	r2, [r3, #0]
	dev->x = 0;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	809a      	strh	r2, [r3, #4]
	dev->y = 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	80da      	strh	r2, [r3, #6]
	dev->ready = 0;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	721a      	strb	r2, [r3, #8]

	uint8_t configData[2] = { MLX90393_REG_Z_SERIES
 80020d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020d6:	81bb      	strh	r3, [r7, #12]
			<< 7| MLX90393_REG_GAIN_SEL << 4 | MLX90393_REG_HALLCONF, 0xE0 };
	uint8_t data = 0x0;
 80020d8:	2300      	movs	r3, #0
 80020da:	72fb      	strb	r3, [r7, #11]

	result = MLX90393_SetFilter(dev, MLX90393_FILTER_6);
 80020dc:	2106      	movs	r1, #6
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f88d 	bl	80021fe <MLX90393_SetFilter>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
	// set registers config
	result = MLX90393_WriteRegister(dev, MLX90393_REG_1, configData, 2);
 80020e8:	f107 020c 	add.w	r2, r7, #12
 80020ec:	2302      	movs	r3, #2
 80020ee:	2100      	movs	r1, #0
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f865 	bl	80021c0 <MLX90393_WriteRegister>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]

	// start burst mode
	result = MLX90393_WriteRegister(dev, MLX90393_I2C_CMD_SB | 0x6, &data, 0);
 80020fa:	f107 020b 	add.w	r2, r7, #11
 80020fe:	2300      	movs	r3, #0
 8002100:	2116      	movs	r1, #22
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f85c 	bl	80021c0 <MLX90393_WriteRegister>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]

	return result;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <MLX90393_ReadFromInterrupt>:

HAL_StatusTypeDef MLX90393_ReadFromInterrupt(MLX90393 *dev) {
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
	uint8_t data[5];

	// request the measurements for the x and y axis

//	if (dev->ready == 1) {
		result = MLX90393_ReadRegister(dev, MLX90393_I2C_CMD_RM | 0x6, data, 5);
 8002122:	f107 0208 	add.w	r2, r7, #8
 8002126:	2305      	movs	r3, #5
 8002128:	2146      	movs	r1, #70	; 0x46
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f829 	bl	8002182 <MLX90393_ReadRegister>
 8002130:	4603      	mov	r3, r0
 8002132:	73fb      	strb	r3, [r7, #15]

		if (result == HAL_OK) {
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d111      	bne.n	800215e <MLX90393_ReadFromInterrupt+0x48>
			dev->x = ((uint16_t) data[2]) | ((uint16_t) data[1] << 8);
 800213a:	7abb      	ldrb	r3, [r7, #10]
 800213c:	b21a      	sxth	r2, r3
 800213e:	7a7b      	ldrb	r3, [r7, #9]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	b21b      	sxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b21a      	sxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	809a      	strh	r2, [r3, #4]
			dev->y = ((uint16_t) data[4]) | ((uint16_t) data[3] << 8);
 800214c:	7b3b      	ldrb	r3, [r7, #12]
 800214e:	b21a      	sxth	r2, r3
 8002150:	7afb      	ldrb	r3, [r7, #11]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	80da      	strh	r2, [r3, #6]
		}
//		dev->ready = 0;
//	}

	return result;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <MLX90393_ProcessInterrupt>:

void MLX90393_ProcessInterrupt(MLX90393 *dev) {
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	dev->ready = 1;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	721a      	strb	r2, [r3, #8]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <MLX90393_ReadRegister>:

HAL_StatusTypeDef MLX90393_ReadRegister(MLX90393 *dev, uint8_t reg,
		uint8_t *data, uint8_t length) {
 8002182:	b580      	push	{r7, lr}
 8002184:	b088      	sub	sp, #32
 8002186:	af04      	add	r7, sp, #16
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	461a      	mov	r2, r3
 800218e:	460b      	mov	r3, r1
 8002190:	72fb      	strb	r3, [r7, #11]
 8002192:	4613      	mov	r3, r2
 8002194:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, MLX90393_I2C_ADDR, reg,
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	b29a      	uxth	r2, r3
 800219e:	7abb      	ldrb	r3, [r7, #10]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f04f 31ff 	mov.w	r1, #4294967295
 80021a6:	9102      	str	r1, [sp, #8]
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	2120      	movs	r1, #32
 80021b2:	f002 f807 	bl	80041c4 <HAL_I2C_Mem_Read>
 80021b6:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <MLX90393_WriteRegister>:

HAL_StatusTypeDef MLX90393_WriteRegister(MLX90393 *dev, uint8_t reg,
		uint8_t *data, uint8_t length) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af04      	add	r7, sp, #16
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	461a      	mov	r2, r3
 80021cc:	460b      	mov	r3, r1
 80021ce:	72fb      	strb	r3, [r7, #11]
 80021d0:	4613      	mov	r3, r2
 80021d2:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(dev->i2cHandle, MLX90393_I2C_ADDR, reg,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	7abb      	ldrb	r3, [r7, #10]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	9102      	str	r1, [sp, #8]
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	2301      	movs	r3, #1
 80021ee:	2120      	movs	r1, #32
 80021f0:	f001 feee 	bl	8003fd0 <HAL_I2C_Mem_Write>
 80021f4:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <MLX90393_SetFilter>:

HAL_StatusTypeDef MLX90393_SetFilter(MLX90393 *dev, mlx90393_filter_t filter) {
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	MLX90393_ReadRegister(dev, MLX90393_REG_3, &data, 1);
 800220a:	f107 020f 	add.w	r2, r7, #15
 800220e:	2301      	movs	r3, #1
 8002210:	2102      	movs	r1, #2
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffb5 	bl	8002182 <MLX90393_ReadRegister>

	data &= ~0x1C;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	f023 031c 	bic.w	r3, r3, #28
 800221e:	b2db      	uxtb	r3, r3
 8002220:	73fb      	strb	r3, [r7, #15]
	data |= filter << 2;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	b25a      	sxtb	r2, r3
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	b25b      	sxtb	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	73fb      	strb	r3, [r7, #15]

	return MLX90393_WriteRegister(dev, MLX90393_REG_3, &data, 1);
 8002234:	f107 020f 	add.w	r2, r7, #15
 8002238:	2301      	movs	r3, #1
 800223a:	2102      	movs	r1, #2
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ffbf 	bl	80021c0 <MLX90393_WriteRegister>
 8002242:	4603      	mov	r3, r0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	0000      	movs	r0, r0
	...

08002250 <MLX90393_Rotation>:

double MLX90393_Rotation(MLX90393 *dev) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	double radians = 0.0;
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double x = abs(dev->x);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	bfb8      	it	lt
 800226e:	425b      	neglt	r3, r3
 8002270:	b29b      	uxth	r3, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f96e 	bl	8000554 <__aeabi_i2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double y = abs(dev->y);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002286:	2b00      	cmp	r3, #0
 8002288:	bfb8      	it	lt
 800228a:	425b      	neglt	r3, r3
 800228c:	b29b      	uxth	r3, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f960 	bl	8000554 <__aeabi_i2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (dev->x > 0 && dev->y > 0) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	dd20      	ble.n	80022e8 <MLX90393_Rotation+0x98>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	dd1b      	ble.n	80022e8 <MLX90393_Rotation+0x98>
		radians = atan(y / x) * (180 / pi);
 80022b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022b8:	f7fe fae0 	bl	800087c <__aeabi_ddiv>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	ec43 2b17 	vmov	d7, r2, r3
 80022c4:	eeb0 0a47 	vmov.f32	s0, s14
 80022c8:	eef0 0a67 	vmov.f32	s1, s15
 80022cc:	f009 fbbc 	bl	800ba48 <atan>
 80022d0:	ec51 0b10 	vmov	r0, r1, d0
 80022d4:	a34e      	add	r3, pc, #312	; (adr r3, 8002410 <MLX90393_Rotation+0x1c0>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fe f9a5 	bl	8000628 <__aeabi_dmul>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80022e6:	e087      	b.n	80023f8 <MLX90393_Rotation+0x1a8>
	} else if (dev->x < 0 && dev->y > 0) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da27      	bge.n	8002342 <MLX90393_Rotation+0xf2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	dd22      	ble.n	8002342 <MLX90393_Rotation+0xf2>
		radians = 180 - (atan(y / x) * (180 / pi));
 80022fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002300:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002304:	f7fe faba 	bl	800087c <__aeabi_ddiv>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	ec43 2b17 	vmov	d7, r2, r3
 8002310:	eeb0 0a47 	vmov.f32	s0, s14
 8002314:	eef0 0a67 	vmov.f32	s1, s15
 8002318:	f009 fb96 	bl	800ba48 <atan>
 800231c:	ec51 0b10 	vmov	r0, r1, d0
 8002320:	a33b      	add	r3, pc, #236	; (adr r3, 8002410 <MLX90393_Rotation+0x1c0>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fe f97f 	bl	8000628 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	f04f 0000 	mov.w	r0, #0
 8002332:	4939      	ldr	r1, [pc, #228]	; (8002418 <MLX90393_Rotation+0x1c8>)
 8002334:	f7fd ffc0 	bl	80002b8 <__aeabi_dsub>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002340:	e05a      	b.n	80023f8 <MLX90393_Rotation+0x1a8>
	} else if (dev->x < 0 && dev->y < 0) {
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	da29      	bge.n	80023a0 <MLX90393_Rotation+0x150>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002352:	2b00      	cmp	r3, #0
 8002354:	da24      	bge.n	80023a0 <MLX90393_Rotation+0x150>
		radians = (atan(y / x) * (180 / pi)) + 180;
 8002356:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800235a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800235e:	f7fe fa8d 	bl	800087c <__aeabi_ddiv>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	ec43 2b17 	vmov	d7, r2, r3
 800236a:	eeb0 0a47 	vmov.f32	s0, s14
 800236e:	eef0 0a67 	vmov.f32	s1, s15
 8002372:	f009 fb69 	bl	800ba48 <atan>
 8002376:	ec51 0b10 	vmov	r0, r1, d0
 800237a:	a325      	add	r3, pc, #148	; (adr r3, 8002410 <MLX90393_Rotation+0x1c0>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe f952 	bl	8000628 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <MLX90393_Rotation+0x1c8>)
 8002392:	f7fd ff93 	bl	80002bc <__adddf3>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800239e:	e02b      	b.n	80023f8 <MLX90393_Rotation+0x1a8>
	} else if (dev->x > 0 && dev->y < 0) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	dd26      	ble.n	80023f8 <MLX90393_Rotation+0x1a8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da21      	bge.n	80023f8 <MLX90393_Rotation+0x1a8>
		radians = 360 - (atan(y / x) * (180 / pi));
 80023b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023bc:	f7fe fa5e 	bl	800087c <__aeabi_ddiv>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	ec43 2b17 	vmov	d7, r2, r3
 80023c8:	eeb0 0a47 	vmov.f32	s0, s14
 80023cc:	eef0 0a67 	vmov.f32	s1, s15
 80023d0:	f009 fb3a 	bl	800ba48 <atan>
 80023d4:	ec51 0b10 	vmov	r0, r1, d0
 80023d8:	a30d      	add	r3, pc, #52	; (adr r3, 8002410 <MLX90393_Rotation+0x1c0>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe f923 	bl	8000628 <__aeabi_dmul>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	490c      	ldr	r1, [pc, #48]	; (800241c <MLX90393_Rotation+0x1cc>)
 80023ec:	f7fd ff64 	bl	80002b8 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	return radians;
 80023f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8002400:	eeb0 0a47 	vmov.f32	s0, s14
 8002404:	eef0 0a67 	vmov.f32	s1, s15
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	1a63c1f8 	.word	0x1a63c1f8
 8002414:	404ca5dc 	.word	0x404ca5dc
 8002418:	40668000 	.word	0x40668000
 800241c:	40768000 	.word	0x40768000

08002420 <PCAL6524_Initialize>:
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
   return b;
}

uint8_t PCAL6524_Initialize(PCAL6524 *dev, I2C_HandleTypeDef *i2cHandle) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
	dev->i2cHandle = i2cHandle;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	601a      	str	r2, [r3, #0]
	dev->inputs = 0x0;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	605a      	str	r2, [r3, #4]
	dev->ready = 0;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	721a      	strb	r2, [r3, #8]

	// set registers config
	unsigned char data = 0xff;
 800243c:	23ff      	movs	r3, #255	; 0xff
 800243e:	73fb      	strb	r3, [r7, #15]
	PCAL6524_WriteRegister(dev, PCAL6524_I2C_REG_INVERS_0, &data, 1);
 8002440:	f107 020f 	add.w	r2, r7, #15
 8002444:	2301      	movs	r3, #1
 8002446:	2108      	movs	r1, #8
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f862 	bl	8002512 <PCAL6524_WriteRegister>
	PCAL6524_WriteRegister(dev, PCAL6524_I2C_REG_INVERS_1, &data, 1);
 800244e:	f107 020f 	add.w	r2, r7, #15
 8002452:	2301      	movs	r3, #1
 8002454:	2109      	movs	r1, #9
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f85b 	bl	8002512 <PCAL6524_WriteRegister>

	return 0;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <PCAL6524_ReadFromInterrupt>:

HAL_StatusTypeDef PCAL6524_ReadFromInterrupt( PCAL6524 *dev ) {
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]

//	if (dev->ready == 1) {
		dev->ready = 0;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	721a      	strb	r2, [r3, #8]
		unsigned char buffer0;
		unsigned char buffer1;

		// request the measurements for the x and y axis
		result = PCAL6524_ReadRegister( dev, PCAL6524_I2C_REG_INPUT_0, &buffer0, 1 );
 8002478:	f107 020e 	add.w	r2, r7, #14
 800247c:	2301      	movs	r3, #1
 800247e:	2100      	movs	r1, #0
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f827 	bl	80024d4 <PCAL6524_ReadRegister>
 8002486:	4603      	mov	r3, r0
 8002488:	73fb      	strb	r3, [r7, #15]
		result = PCAL6524_ReadRegister( dev, PCAL6524_I2C_REG_INPUT_1, &buffer1, 1 );
 800248a:	f107 020d 	add.w	r2, r7, #13
 800248e:	2301      	movs	r3, #1
 8002490:	2101      	movs	r1, #1
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f81e 	bl	80024d4 <PCAL6524_ReadRegister>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]

		if (result == HAL_OK) {
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <PCAL6524_ReadFromInterrupt+0x4a>
			dev->inputs = (buffer1 << 8 ) | buffer0 ;
 80024a2:	7b7b      	ldrb	r3, [r7, #13]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	7bba      	ldrb	r2, [r7, #14]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	461a      	mov	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	605a      	str	r2, [r3, #4]
		}
//	}

	return result;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <PCAL6524_ProcessInterrupt>:

void PCAL6524_ProcessInterrupt( PCAL6524 *dev ) {
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
	dev->ready			= 1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	721a      	strb	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <PCAL6524_ReadRegister>:

HAL_StatusTypeDef PCAL6524_ReadRegister( PCAL6524 *dev, uint8_t reg, uint8_t *data, uint8_t length ) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af04      	add	r7, sp, #16
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	461a      	mov	r2, r3
 80024e0:	460b      	mov	r3, r1
 80024e2:	72fb      	strb	r3, [r7, #11]
 80024e4:	4613      	mov	r3, r2
 80024e6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read( dev->i2cHandle, PCAL6524_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	7afb      	ldrb	r3, [r7, #11]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	7abb      	ldrb	r3, [r7, #10]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	9102      	str	r1, [sp, #8]
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2301      	movs	r3, #1
 8002502:	2144      	movs	r1, #68	; 0x44
 8002504:	f001 fe5e 	bl	80041c4 <HAL_I2C_Mem_Read>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <PCAL6524_WriteRegister>:

HAL_StatusTypeDef PCAL6524_WriteRegister( PCAL6524 *dev, uint8_t reg, uint8_t *data, uint8_t length ) {
 8002512:	b580      	push	{r7, lr}
 8002514:	b088      	sub	sp, #32
 8002516:	af04      	add	r7, sp, #16
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	461a      	mov	r2, r3
 800251e:	460b      	mov	r3, r1
 8002520:	72fb      	strb	r3, [r7, #11]
 8002522:	4613      	mov	r3, r2
 8002524:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write( dev->i2cHandle, PCAL6524_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	b29a      	uxth	r2, r3
 800252e:	7abb      	ldrb	r3, [r7, #10]
 8002530:	b29b      	uxth	r3, r3
 8002532:	f04f 31ff 	mov.w	r1, #4294967295
 8002536:	9102      	str	r1, [sp, #8]
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2301      	movs	r3, #1
 8002540:	2144      	movs	r1, #68	; 0x44
 8002542:	f001 fd45 	bl	8003fd0 <HAL_I2C_Mem_Write>
 8002546:	4603      	mov	r3, r0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <PCAL6524_ReadBit>:

uint8_t PCAL6524_ReadBit( PCAL6524 *dev, uint8_t bit ) {
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
	return (dev->inputs & (1 << (bit-1))) != 0;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	3a01      	subs	r2, #1
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	0000      	movs	r0, r0
 8002584:	0000      	movs	r0, r0
	...

08002588 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800258e:	f000 fd3f 	bl	8003010 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002592:	f000 f94f 	bl	8002834 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002596:	f000 fa17 	bl	80029c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800259a:	f000 f9b9 	bl	8002910 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 800259e:	f007 fd1d 	bl	8009fdc <MX_USB_DEVICE_Init>
	MX_I2C3_Init();
 80025a2:	f000 f9e3 	bl	800296c <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */

	PCAL6524_Initialize(&buttons, &hi2c1);
 80025a6:	4992      	ldr	r1, [pc, #584]	; (80027f0 <main+0x268>)
 80025a8:	4892      	ldr	r0, [pc, #584]	; (80027f4 <main+0x26c>)
 80025aa:	f7ff ff39 	bl	8002420 <PCAL6524_Initialize>
	PCAL6524_ReadFromInterrupt(&buttons);
 80025ae:	4891      	ldr	r0, [pc, #580]	; (80027f4 <main+0x26c>)
 80025b0:	f7ff ff59 	bl	8002466 <PCAL6524_ReadFromInterrupt>

	if (PCAL6524_ReadBit(&buttons, 5)) {
 80025b4:	2105      	movs	r1, #5
 80025b6:	488f      	ldr	r0, [pc, #572]	; (80027f4 <main+0x26c>)
 80025b8:	f7ff ffca 	bl	8002550 <PCAL6524_ReadBit>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d029      	beq.n	8002616 <main+0x8e>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80025c2:	b662      	cpsie	i
}
 80025c4:	bf00      	nop
		__enable_irq();

		MX_USB_DEVICE_DeInit();
 80025c6:	f007 fcfd 	bl	8009fc4 <MX_USB_DEVICE_DeInit>

		HAL_RCC_DeInit();
 80025ca:	f004 f96b 	bl	80068a4 <HAL_RCC_DeInit>
		HAL_DeInit();
 80025ce:	f000 fd41 	bl	8003054 <HAL_DeInit>

		SysTick->CTRL = SysTick->LOAD = SysTick->VAL = 0;
 80025d2:	4a89      	ldr	r2, [pc, #548]	; (80027f8 <main+0x270>)
 80025d4:	2300      	movs	r3, #0
 80025d6:	6093      	str	r3, [r2, #8]
 80025d8:	4a87      	ldr	r2, [pc, #540]	; (80027f8 <main+0x270>)
 80025da:	6053      	str	r3, [r2, #4]
 80025dc:	4a86      	ldr	r2, [pc, #536]	; (80027f8 <main+0x270>)
 80025de:	6013      	str	r3, [r2, #0]
		__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 80025e0:	4b86      	ldr	r3, [pc, #536]	; (80027fc <main+0x274>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a85      	ldr	r2, [pc, #532]	; (80027fc <main+0x274>)
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b83      	ldr	r3, [pc, #524]	; (80027fc <main+0x274>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a82      	ldr	r2, [pc, #520]	; (80027fc <main+0x274>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6013      	str	r3, [r2, #0]

		const uint32_t p = (*((uint32_t*) 0x1FFF0000));
 80025f8:	4b81      	ldr	r3, [pc, #516]	; (8002800 <main+0x278>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f383 8808 	msr	MSP, r3
}
 8002608:	bf00      	nop
		__set_MSP(p);

		void (*SysMemBootJump)(void);
		SysMemBootJump = (void (*)(void)) (*((uint32_t*) 0x1FFF0004));
 800260a:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <main+0x27c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60bb      	str	r3, [r7, #8]
		SysMemBootJump();
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4798      	blx	r3

		while (1)
 8002614:	e7fe      	b.n	8002614 <main+0x8c>
			;
	}

	HAL_NVIC_Enable();
 8002616:	f000 fa7d 	bl	8002b14 <HAL_NVIC_Enable>

	LEDS_Initialize(&ledData, 50);
 800261a:	2132      	movs	r1, #50	; 0x32
 800261c:	487a      	ldr	r0, [pc, #488]	; (8002808 <main+0x280>)
 800261e:	f7ff fca1 	bl	8001f64 <LEDS_Initialize>
	MLX90393_Initialize(&hall, &hi2c3);
 8002622:	497a      	ldr	r1, [pc, #488]	; (800280c <main+0x284>)
 8002624:	487a      	ldr	r0, [pc, #488]	; (8002810 <main+0x288>)
 8002626:	f7ff fd41 	bl	80020ac <MLX90393_Initialize>
	ADS122C04_Initialize(&adc, &hi2c1, ADS122C04_I2C_ADDR_0);
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	4970      	ldr	r1, [pc, #448]	; (80027f0 <main+0x268>)
 800262e:	4879      	ldr	r0, [pc, #484]	; (8002814 <main+0x28c>)
 8002630:	f7fe fd12 	bl	8001058 <ADS122C04_Initialize>
	ADS122C04_Initialize(&cursor, &hi2c1, ADS122C04_I2C_ADDR_1);
 8002634:	2282      	movs	r2, #130	; 0x82
 8002636:	496e      	ldr	r1, [pc, #440]	; (80027f0 <main+0x268>)
 8002638:	4877      	ldr	r0, [pc, #476]	; (8002818 <main+0x290>)
 800263a:	f7fe fd0d 	bl	8001058 <ADS122C04_Initialize>

	// check for active buttons, if button for calibrate set timeout
	if (PCAL6524_ReadBit(&buttons, 1)) {
 800263e:	2101      	movs	r1, #1
 8002640:	486c      	ldr	r0, [pc, #432]	; (80027f4 <main+0x26c>)
 8002642:	f7ff ff85 	bl	8002550 <PCAL6524_ReadBit>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d06f      	beq.n	800272c <main+0x1a4>
		calibrationLimit = HAL_GetTick() + 20000;
 800264c:	f000 fd74 	bl	8003138 <HAL_GetTick>
 8002650:	4603      	mov	r3, r0
 8002652:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002656:	3320      	adds	r3, #32
 8002658:	4a70      	ldr	r2, [pc, #448]	; (800281c <main+0x294>)
 800265a:	6013      	str	r3, [r2, #0]
		tick = HAL_GetTick();
 800265c:	f000 fd6c 	bl	8003138 <HAL_GetTick>
 8002660:	4603      	mov	r3, r0
 8002662:	4a6f      	ldr	r2, [pc, #444]	; (8002820 <main+0x298>)
 8002664:	6013      	str	r3, [r2, #0]

		while ((tick = HAL_GetTick()) < calibrationLimit) {
 8002666:	e03e      	b.n	80026e6 <main+0x15e>
			MLX90393_ReadFromInterrupt(&hall);
 8002668:	4869      	ldr	r0, [pc, #420]	; (8002810 <main+0x288>)
 800266a:	f7ff fd54 	bl	8002116 <MLX90393_ReadFromInterrupt>
			ADS122C04_ReadAll(&adc);
 800266e:	4869      	ldr	r0, [pc, #420]	; (8002814 <main+0x28c>)
 8002670:	f7fe fd52 	bl	8001118 <ADS122C04_ReadAll>
			ADS122C04_ReadAll(&cursor);
 8002674:	4868      	ldr	r0, [pc, #416]	; (8002818 <main+0x290>)
 8002676:	f7fe fd4f 	bl	8001118 <ADS122C04_ReadAll>

			AXIS_Assign(&values, &adc, &cursor, &hall);
 800267a:	4b65      	ldr	r3, [pc, #404]	; (8002810 <main+0x288>)
 800267c:	4a66      	ldr	r2, [pc, #408]	; (8002818 <main+0x290>)
 800267e:	4965      	ldr	r1, [pc, #404]	; (8002814 <main+0x28c>)
 8002680:	4868      	ldr	r0, [pc, #416]	; (8002824 <main+0x29c>)
 8002682:	f000 fa6b 	bl	8002b5c <AXIS_Assign>
			CalibrationStore_Calibrate(&calibration, &values);
 8002686:	4967      	ldr	r1, [pc, #412]	; (8002824 <main+0x29c>)
 8002688:	4867      	ldr	r0, [pc, #412]	; (8002828 <main+0x2a0>)
 800268a:	f7ff f84d 	bl	8001728 <CalibrationStore_Calibrate>

			double percentage = (double) tick / 15000;
 800268e:	4b64      	ldr	r3, [pc, #400]	; (8002820 <main+0x298>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff4e 	bl	8000534 <__aeabi_ui2d>
 8002698:	a353      	add	r3, pc, #332	; (adr r3, 80027e8 <main+0x260>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fe f8ed 	bl	800087c <__aeabi_ddiv>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

			LEDS_SetDelay(&ledData, 500 - percentage * 500);
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b5f      	ldr	r3, [pc, #380]	; (800282c <main+0x2a4>)
 80026b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026b4:	f7fd ffb8 	bl	8000628 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	495a      	ldr	r1, [pc, #360]	; (800282c <main+0x2a4>)
 80026c2:	f7fd fdf9 	bl	80002b8 <__aeabi_dsub>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7fe fa83 	bl	8000bd8 <__aeabi_d2uiz>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	484b      	ldr	r0, [pc, #300]	; (8002808 <main+0x280>)
 80026da:	f7ff fcd8 	bl	800208e <LEDS_SetDelay>
			LEDS_Run(&ledData, 1);
 80026de:	2101      	movs	r1, #1
 80026e0:	4849      	ldr	r0, [pc, #292]	; (8002808 <main+0x280>)
 80026e2:	f7ff fc8f 	bl	8002004 <LEDS_Run>
		while ((tick = HAL_GetTick()) < calibrationLimit) {
 80026e6:	f000 fd27 	bl	8003138 <HAL_GetTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <main+0x298>)
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <main+0x298>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b49      	ldr	r3, [pc, #292]	; (800281c <main+0x294>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d3b5      	bcc.n	8002668 <main+0xe0>
		}

		LEDS_Set(0, 0);
 80026fc:	2100      	movs	r1, #0
 80026fe:	2000      	movs	r0, #0
 8002700:	f7ff fc46 	bl	8001f90 <LEDS_Set>
		LEDS_Set(1, 0);
 8002704:	2100      	movs	r1, #0
 8002706:	2001      	movs	r0, #1
 8002708:	f7ff fc42 	bl	8001f90 <LEDS_Set>
		LEDS_Set(2, 0);
 800270c:	2100      	movs	r1, #0
 800270e:	2002      	movs	r0, #2
 8002710:	f7ff fc3e 	bl	8001f90 <LEDS_Set>
		LEDS_Set(3, 0);
 8002714:	2100      	movs	r1, #0
 8002716:	2003      	movs	r0, #3
 8002718:	f7ff fc3a 	bl	8001f90 <LEDS_Set>

		LEDS_SetDelay(&ledData, 50);
 800271c:	2132      	movs	r1, #50	; 0x32
 800271e:	483a      	ldr	r0, [pc, #232]	; (8002808 <main+0x280>)
 8002720:	f7ff fcb5 	bl	800208e <LEDS_SetDelay>

		CalibrationStore_Store(&calibration);
 8002724:	4840      	ldr	r0, [pc, #256]	; (8002828 <main+0x2a0>)
 8002726:	f7ff fb8b 	bl	8001e40 <CalibrationStore_Store>
 800272a:	e002      	b.n	8002732 <main+0x1aa>
	} else {
		CalibrationStore_Retrieve(&calibration);
 800272c:	483e      	ldr	r0, [pc, #248]	; (8002828 <main+0x2a0>)
 800272e:	f7ff fbf9 	bl	8001f24 <CalibrationStore_Retrieve>
	}


	LEDS_Set(0, 1);
 8002732:	2101      	movs	r1, #1
 8002734:	2000      	movs	r0, #0
 8002736:	f7ff fc2b 	bl	8001f90 <LEDS_Set>
	LEDS_Set(1, 1);
 800273a:	2101      	movs	r1, #1
 800273c:	2001      	movs	r0, #1
 800273e:	f7ff fc27 	bl	8001f90 <LEDS_Set>
	LEDS_Set(2, 1);
 8002742:	2101      	movs	r1, #1
 8002744:	2002      	movs	r0, #2
 8002746:	f7ff fc23 	bl	8001f90 <LEDS_Set>
	LEDS_Set(3, 1);
 800274a:	2101      	movs	r1, #1
 800274c:	2003      	movs	r0, #3
 800274e:	f7ff fc1f 	bl	8001f90 <LEDS_Set>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		SYNC();
 8002752:	f000 fa41 	bl	8002bd8 <SYNC>

		CalibrationStore_Process(&calibration, &values);
 8002756:	4933      	ldr	r1, [pc, #204]	; (8002824 <main+0x29c>)
 8002758:	4833      	ldr	r0, [pc, #204]	; (8002828 <main+0x2a0>)
 800275a:	f7ff f9e1 	bl	8001b20 <CalibrationStore_Process>

		usbD.x = (int16_t) values.x_axis;
 800275e:	4b31      	ldr	r3, [pc, #196]	; (8002824 <main+0x29c>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa0e 	bl	8000b88 <__aeabi_d2iz>
 800276c:	4603      	mov	r3, r0
 800276e:	b21a      	sxth	r2, r3
 8002770:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <main+0x2a8>)
 8002772:	801a      	strh	r2, [r3, #0]
		usbD.y = (int16_t) values.y_axis;
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <main+0x29c>)
 8002776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe fa03 	bl	8000b88 <__aeabi_d2iz>
 8002782:	4603      	mov	r3, r0
 8002784:	b21a      	sxth	r2, r3
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <main+0x2a8>)
 8002788:	805a      	strh	r2, [r3, #2]

		usbD.rx = (int16_t) values.rx;
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <main+0x29c>)
 800278c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe f9f8 	bl	8000b88 <__aeabi_d2iz>
 8002798:	4603      	mov	r3, r0
 800279a:	b21a      	sxth	r2, r3
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <main+0x2a8>)
 800279e:	809a      	strh	r2, [r3, #4]
		usbD.ry = (int16_t) values.ry;
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <main+0x29c>)
 80027a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7fe f9ed 	bl	8000b88 <__aeabi_d2iz>
 80027ae:	4603      	mov	r3, r0
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <main+0x2a8>)
 80027b4:	80da      	strh	r2, [r3, #6]
		usbD.rz = (int16_t) values.rz;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <main+0x29c>)
 80027b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe f9e2 	bl	8000b88 <__aeabi_d2iz>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b21a      	sxth	r2, r3
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <main+0x2a8>)
 80027ca:	811a      	strh	r2, [r3, #8]

		usbD.cutoff = values.cutoff;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <main+0x29c>)
 80027ce:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <main+0x2a8>)
 80027d4:	731a      	strb	r2, [r3, #12]
		usbD.buttons = buttons.inputs;
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <main+0x26c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <main+0x2a8>)
 80027de:	815a      	strh	r2, [r3, #10]

		CUSTOM_HID_OutEvent_FS((uint8_t*) &usbD);
 80027e0:	4813      	ldr	r0, [pc, #76]	; (8002830 <main+0x2a8>)
 80027e2:	f007 fc3b 	bl	800a05c <CUSTOM_HID_OutEvent_FS>
		SYNC();
 80027e6:	e7b4      	b.n	8002752 <main+0x1ca>
 80027e8:	00000000 	.word	0x00000000
 80027ec:	40cd4c00 	.word	0x40cd4c00
 80027f0:	20000608 	.word	0x20000608
 80027f4:	20000714 	.word	0x20000714
 80027f8:	e000e010 	.word	0xe000e010
 80027fc:	40013800 	.word	0x40013800
 8002800:	1fff0000 	.word	0x1fff0000
 8002804:	1fff0004 	.word	0x1fff0004
 8002808:	200006b0 	.word	0x200006b0
 800280c:	20000260 	.word	0x20000260
 8002810:	20000708 	.word	0x20000708
 8002814:	2000068c 	.word	0x2000068c
 8002818:	2000065c 	.word	0x2000065c
 800281c:	20000720 	.word	0x20000720
 8002820:	200006ac 	.word	0x200006ac
 8002824:	200002b8 	.word	0x200002b8
 8002828:	200006c0 	.word	0x200006c0
 800282c:	407f4000 	.word	0x407f4000
 8002830:	2000067c 	.word	0x2000067c

08002834 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b094      	sub	sp, #80	; 0x50
 8002838:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	2234      	movs	r2, #52	; 0x34
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f008 f944 	bl	800aad0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <SystemClock_Config+0xd4>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <SystemClock_Config+0xd4>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	; 0x40
 8002868:	4b27      	ldr	r3, [pc, #156]	; (8002908 <SystemClock_Config+0xd4>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002874:	2300      	movs	r3, #0
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <SystemClock_Config+0xd8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a23      	ldr	r2, [pc, #140]	; (800290c <SystemClock_Config+0xd8>)
 800287e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <SystemClock_Config+0xd8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002890:	2301      	movs	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002898:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289a:	2302      	movs	r3, #2
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800289e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80028a4:	2310      	movs	r3, #16
 80028a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 400;
 80028a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80028ac:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028ae:	2304      	movs	r3, #4
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80028b2:	2308      	movs	r3, #8
 80028b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80028b6:	2302      	movs	r3, #2
 80028b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4618      	mov	r0, r3
 80028c0:	f004 f8bc 	bl	8006a3c <HAL_RCC_OscConfig>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0x9a>
		Error_Handler();
 80028ca:	f000 f9a5 	bl	8002c18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80028ce:	230f      	movs	r3, #15
 80028d0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d2:	2302      	movs	r3, #2
 80028d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	2103      	movs	r1, #3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fbfe 	bl	80060ec <HAL_RCC_ClockConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <SystemClock_Config+0xc6>
		Error_Handler();
 80028f6:	f000 f98f 	bl	8002c18 <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80028fa:	f003 fcdd 	bl	80062b8 <HAL_RCC_EnableCSS>
}
 80028fe:	bf00      	nop
 8002900:	3750      	adds	r7, #80	; 0x50
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000

08002910 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <MX_I2C1_Init+0x50>)
 8002916:	4a13      	ldr	r2, [pc, #76]	; (8002964 <MX_I2C1_Init+0x54>)
 8002918:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MX_I2C1_Init+0x50>)
 800291c:	4a12      	ldr	r2, [pc, #72]	; (8002968 <MX_I2C1_Init+0x58>)
 800291e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_I2C1_Init+0x50>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_I2C1_Init+0x50>)
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_I2C1_Init+0x50>)
 800292e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002932:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <MX_I2C1_Init+0x50>)
 8002936:	2200      	movs	r2, #0
 8002938:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_I2C1_Init+0x50>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <MX_I2C1_Init+0x50>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_I2C1_Init+0x50>)
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <MX_I2C1_Init+0x50>)
 800294e:	f001 f9fb 	bl	8003d48 <HAL_I2C_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002958:	f000 f95e 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000608 	.word	0x20000608
 8002964:	40005400 	.word	0x40005400
 8002968:	00061a80 	.word	0x00061a80

0800296c <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <MX_I2C3_Init+0x50>)
 8002972:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <MX_I2C3_Init+0x54>)
 8002974:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <MX_I2C3_Init+0x50>)
 8002978:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <MX_I2C3_Init+0x58>)
 800297a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <MX_I2C3_Init+0x50>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <MX_I2C3_Init+0x50>)
 8002984:	2200      	movs	r2, #0
 8002986:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <MX_I2C3_Init+0x50>)
 800298a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800298e:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <MX_I2C3_Init+0x50>)
 8002992:	2200      	movs	r2, #0
 8002994:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <MX_I2C3_Init+0x50>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <MX_I2C3_Init+0x50>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <MX_I2C3_Init+0x50>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80029a8:	4804      	ldr	r0, [pc, #16]	; (80029bc <MX_I2C3_Init+0x50>)
 80029aa:	f001 f9cd 	bl	8003d48 <HAL_I2C_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_I2C3_Init+0x4c>
		Error_Handler();
 80029b4:	f000 f930 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000260 	.word	0x20000260
 80029c0:	40005c00 	.word	0x40005c00
 80029c4:	00061a80 	.word	0x00061a80

080029c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b36      	ldr	r3, [pc, #216]	; (8002abc <MX_GPIO_Init+0xf4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a35      	ldr	r2, [pc, #212]	; (8002abc <MX_GPIO_Init+0xf4>)
 80029e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b33      	ldr	r3, [pc, #204]	; (8002abc <MX_GPIO_Init+0xf4>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <MX_GPIO_Init+0xf4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <MX_GPIO_Init+0xf4>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <MX_GPIO_Init+0xf4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4b28      	ldr	r3, [pc, #160]	; (8002abc <MX_GPIO_Init+0xf4>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a27      	ldr	r2, [pc, #156]	; (8002abc <MX_GPIO_Init+0xf4>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <MX_GPIO_Init+0xf4>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	4822      	ldr	r0, [pc, #136]	; (8002ac0 <MX_GPIO_Init+0xf8>)
 8002a38:	f001 f954 	bl	8003ce4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED2_Pin | LED3_Pin | LED4_Pin, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2107      	movs	r1, #7
 8002a40:	4820      	ldr	r0, [pc, #128]	; (8002ac4 <MX_GPIO_Init+0xfc>)
 8002a42:	f001 f94f 	bl	8003ce4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : INT_CURSOR_Pin INT_HALL_Pin */
	GPIO_InitStruct.Pin = INT_CURSOR_Pin | INT_HALL_Pin;
 8002a46:	2321      	movs	r3, #33	; 0x21
 8002a48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4819      	ldr	r0, [pc, #100]	; (8002ac0 <MX_GPIO_Init+0xf8>)
 8002a5c:	f000 fefa 	bl	8003854 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT_ADC_Pin INT_BUTTONS_Pin */
	GPIO_InitStruct.Pin = INT_ADC_Pin | INT_BUTTONS_Pin;
 8002a60:	2318      	movs	r3, #24
 8002a62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	4619      	mov	r1, r3
 8002a74:	4812      	ldr	r0, [pc, #72]	; (8002ac0 <MX_GPIO_Init+0xf8>)
 8002a76:	f000 feed 	bl	8003854 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	4619      	mov	r1, r3
 8002a90:	480b      	ldr	r0, [pc, #44]	; (8002ac0 <MX_GPIO_Init+0xf8>)
 8002a92:	f000 fedf 	bl	8003854 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED3_Pin | LED4_Pin;
 8002a96:	2307      	movs	r3, #7
 8002a98:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <MX_GPIO_Init+0xfc>)
 8002aae:	f000 fed1 	bl	8003854 <HAL_GPIO_Init>

}
 8002ab2:	bf00      	nop
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40020400 	.word	0x40020400

08002ac8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d00e      	beq.n	8002af6 <HAL_GPIO_EXTI_Callback+0x2e>
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	dc10      	bgt.n	8002afe <HAL_GPIO_EXTI_Callback+0x36>
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d002      	beq.n	8002ae6 <HAL_GPIO_EXTI_Callback+0x1e>
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d004      	beq.n	8002aee <HAL_GPIO_EXTI_Callback+0x26>
		break;
	case GPIO_PIN_5:
		MLX90393_ProcessInterrupt(&hall);
		break;
	}
}
 8002ae4:	e00b      	b.n	8002afe <HAL_GPIO_EXTI_Callback+0x36>
		ADS122C04_ProcessInterrupt(&adc);
 8002ae6:	4808      	ldr	r0, [pc, #32]	; (8002b08 <HAL_GPIO_EXTI_Callback+0x40>)
 8002ae8:	f7fe fb09 	bl	80010fe <ADS122C04_ProcessInterrupt>
		break;
 8002aec:	e007      	b.n	8002afe <HAL_GPIO_EXTI_Callback+0x36>
		PCAL6524_ProcessInterrupt(&buttons);
 8002aee:	4807      	ldr	r0, [pc, #28]	; (8002b0c <HAL_GPIO_EXTI_Callback+0x44>)
 8002af0:	f7ff fce3 	bl	80024ba <PCAL6524_ProcessInterrupt>
		break;
 8002af4:	e003      	b.n	8002afe <HAL_GPIO_EXTI_Callback+0x36>
		MLX90393_ProcessInterrupt(&hall);
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <HAL_GPIO_EXTI_Callback+0x48>)
 8002af8:	f7ff fb36 	bl	8002168 <MLX90393_ProcessInterrupt>
		break;
 8002afc:	bf00      	nop
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000068c 	.word	0x2000068c
 8002b0c:	20000714 	.word	0x20000714
 8002b10:	20000708 	.word	0x20000708

08002b14 <HAL_NVIC_Enable>:

void HAL_NVIC_Enable() {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2006      	movs	r0, #6
 8002b1e:	f000 fc3a 	bl	8003396 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b22:	2006      	movs	r0, #6
 8002b24:	f000 fc53 	bl	80033ce <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2009      	movs	r0, #9
 8002b2e:	f000 fc32 	bl	8003396 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b32:	2009      	movs	r0, #9
 8002b34:	f000 fc4b 	bl	80033ce <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	200a      	movs	r0, #10
 8002b3e:	f000 fc2a 	bl	8003396 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b42:	200a      	movs	r0, #10
 8002b44:	f000 fc43 	bl	80033ce <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2017      	movs	r0, #23
 8002b4e:	f000 fc22 	bl	8003396 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b52:	2017      	movs	r0, #23
 8002b54:	f000 fc3b 	bl	80033ce <HAL_NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <AXIS_Assign>:

void AXIS_Assign(CalibrationStoreValues *_dev, ADS122C04 *_adc, ADS122C04 *_cursor, MLX90393 *_hall) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
	_dev->rz = MLX90393_Rotation(_hall);
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f7ff fb70 	bl	8002250 <MLX90393_Rotation>
 8002b70:	eeb0 7a40 	vmov.f32	s14, s0
 8002b74:	eef0 7a60 	vmov.f32	s15, s1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	ed83 7b08 	vstr	d7, [r3, #32]
	_dev->y_axis = _cursor->ain[0];
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fcf8 	bl	8000578 <__aeabi_f2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	68f9      	ldr	r1, [r7, #12]
 8002b8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_dev->x_axis = _cursor->ain[1];
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fcee 	bl	8000578 <__aeabi_f2d>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	68f9      	ldr	r1, [r7, #12]
 8002ba2:	e9c1 2300 	strd	r2, r3, [r1]
	_dev->rx = _adc->ain[2];
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fce4 	bl	8000578 <__aeabi_f2d>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	68f9      	ldr	r1, [r7, #12]
 8002bb6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dev->ry = _adc->ain[3];
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcda 	bl	8000578 <__aeabi_f2d>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <SYNC>:

void SYNC() {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	MLX90393_ReadFromInterrupt(&hall);
 8002bdc:	4809      	ldr	r0, [pc, #36]	; (8002c04 <SYNC+0x2c>)
 8002bde:	f7ff fa9a 	bl	8002116 <MLX90393_ReadFromInterrupt>
	ADS122C04_ReadAll(&adc);
 8002be2:	4809      	ldr	r0, [pc, #36]	; (8002c08 <SYNC+0x30>)
 8002be4:	f7fe fa98 	bl	8001118 <ADS122C04_ReadAll>
	ADS122C04_ReadAll(&cursor);
 8002be8:	4808      	ldr	r0, [pc, #32]	; (8002c0c <SYNC+0x34>)
 8002bea:	f7fe fa95 	bl	8001118 <ADS122C04_ReadAll>
	AXIS_Assign(&values, &adc, &cursor, &hall);
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SYNC+0x2c>)
 8002bf0:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <SYNC+0x34>)
 8002bf2:	4905      	ldr	r1, [pc, #20]	; (8002c08 <SYNC+0x30>)
 8002bf4:	4806      	ldr	r0, [pc, #24]	; (8002c10 <SYNC+0x38>)
 8002bf6:	f7ff ffb1 	bl	8002b5c <AXIS_Assign>

	PCAL6524_ReadFromInterrupt(&buttons);
 8002bfa:	4806      	ldr	r0, [pc, #24]	; (8002c14 <SYNC+0x3c>)
 8002bfc:	f7ff fc33 	bl	8002466 <PCAL6524_ReadFromInterrupt>
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000708 	.word	0x20000708
 8002c08:	2000068c 	.word	0x2000068c
 8002c0c:	2000065c 	.word	0x2000065c
 8002c10:	200002b8 	.word	0x200002b8
 8002c14:	20000714 	.word	0x20000714

08002c18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1c:	b672      	cpsid	i
}
 8002c1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c20:	e7fe      	b.n	8002c20 <Error_Handler+0x8>
	...

08002c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08c      	sub	sp, #48	; 0x30
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 031c 	add.w	r3, r7, #28
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a41      	ldr	r2, [pc, #260]	; (8002d98 <HAL_I2C_MspInit+0x124>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d12c      	bne.n	8002cf0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4834      	ldr	r0, [pc, #208]	; (8002da0 <HAL_I2C_MspInit+0x12c>)
 8002cce:	f000 fdc1 	bl	8003854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a30      	ldr	r2, [pc, #192]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce2:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cee:	e04f      	b.n	8002d90 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	; (8002da4 <HAL_I2C_MspInit+0x130>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d14a      	bne.n	8002d90 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d38:	2312      	movs	r3, #18
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d44:	2304      	movs	r3, #4
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4816      	ldr	r0, [pc, #88]	; (8002da8 <HAL_I2C_MspInit+0x134>)
 8002d50:	f000 fd80 	bl	8003854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d54:	2310      	movs	r3, #16
 8002d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d58:	2312      	movs	r3, #18
 8002d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002d64:	2309      	movs	r3, #9
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480c      	ldr	r0, [pc, #48]	; (8002da0 <HAL_I2C_MspInit+0x12c>)
 8002d70:	f000 fd70 	bl	8003854 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d82:	6413      	str	r3, [r2, #64]	; 0x40
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_I2C_MspInit+0x128>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
}
 8002d90:	bf00      	nop
 8002d92:	3730      	adds	r7, #48	; 0x30
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40005400 	.word	0x40005400
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40005c00 	.word	0x40005c00
 8002da8:	40020000 	.word	0x40020000

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002db0:	f003 fb8e 	bl	80064d0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <NMI_Handler+0x8>

08002db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dba:	e7fe      	b.n	8002dba <HardFault_Handler+0x4>

08002dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <MemManage_Handler+0x4>

08002dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <BusFault_Handler+0x4>

08002dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <UsageFault_Handler+0x4>

08002dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dfc:	f000 f988 	bl	8003110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f000 ff85 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002e16:	2008      	movs	r0, #8
 8002e18:	f000 ff7e 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002e24:	2010      	movs	r0, #16
 8002e26:	f000 ff77 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002e32:	2020      	movs	r0, #32
 8002e34:	f000 ff70 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <OTG_FS_IRQHandler+0x10>)
 8002e42:	f002 f8f3 	bl	800502c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000c28 	.word	0x20000c28

08002e50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e00a      	b.n	8002e78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e62:	f3af 8000 	nop.w
 8002e66:	4601      	mov	r1, r0
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	60ba      	str	r2, [r7, #8]
 8002e6e:	b2ca      	uxtb	r2, r1
 8002e70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	dbf0      	blt.n	8002e62 <_read+0x12>
	}

return len;
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e009      	b.n	8002eb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	60ba      	str	r2, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3301      	adds	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	dbf1      	blt.n	8002e9c <_write+0x12>
	}
	return len;
 8002eb8:	687b      	ldr	r3, [r7, #4]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_close>:

int _close(int file)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eea:	605a      	str	r2, [r3, #4]
	return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_isatty>:

int _isatty(int file)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
	return 1;
 8002f02:	2301      	movs	r3, #1
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <_sbrk+0x5c>)
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <_sbrk+0x60>)
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <_sbrk+0x64>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <_sbrk+0x64>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <_sbrk+0x68>)
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <_sbrk+0x64>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d207      	bcs.n	8002f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f5c:	f007 fd80 	bl	800aa60 <__errno>
 8002f60:	4603      	mov	r3, r0
 8002f62:	220c      	movs	r2, #12
 8002f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e009      	b.n	8002f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <_sbrk+0x64>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <_sbrk+0x64>)
 8002f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20040000 	.word	0x20040000
 8002f8c:	00000400 	.word	0x00000400
 8002f90:	2000021c 	.word	0x2000021c
 8002f94:	20001040 	.word	0x20001040

08002f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <SystemInit+0x20>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <SystemInit+0x20>)
 8002fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fc0:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fc2:	490e      	ldr	r1, [pc, #56]	; (8002ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc8:	e002      	b.n	8002fd0 <LoopCopyDataInit>

08002fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fce:	3304      	adds	r3, #4

08002fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd4:	d3f9      	bcc.n	8002fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd6:	4a0b      	ldr	r2, [pc, #44]	; (8003004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fd8:	4c0b      	ldr	r4, [pc, #44]	; (8003008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fdc:	e001      	b.n	8002fe2 <LoopFillZerobss>

08002fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe0:	3204      	adds	r2, #4

08002fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe4:	d3fb      	bcc.n	8002fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fe6:	f7ff ffd7 	bl	8002f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fea:	f007 fd3f 	bl	800aa6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fee:	f7ff facb 	bl	8002588 <main>
  bx  lr    
 8002ff2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ff4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ffc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003000:	0800cf30 	.word	0x0800cf30
  ldr r2, =_sbss
 8003004:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003008:	20001040 	.word	0x20001040

0800300c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800300c:	e7fe      	b.n	800300c <ADC_IRQHandler>
	...

08003010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <HAL_Init+0x40>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <HAL_Init+0x40>)
 800301a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_Init+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <HAL_Init+0x40>)
 8003026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800302a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_Init+0x40>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_Init+0x40>)
 8003032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003038:	2003      	movs	r0, #3
 800303a:	f000 f9a1 	bl	8003380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800303e:	200f      	movs	r0, #15
 8003040:	f000 f836 	bl	80030b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003044:	f7ff fdee 	bl	8002c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023c00 	.word	0x40023c00

08003054 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_DeInit+0x48>)
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <HAL_DeInit+0x48>)
 8003062:	2200      	movs	r2, #0
 8003064:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_DeInit+0x48>)
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_DeInit+0x48>)
 8003070:	2200      	movs	r2, #0
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_DeInit+0x48>)
 8003076:	f04f 32ff 	mov.w	r2, #4294967295
 800307a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <HAL_DeInit+0x48>)
 800307e:	2200      	movs	r2, #0
 8003080:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_DeInit+0x48>)
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <HAL_DeInit+0x48>)
 800308c:	2200      	movs	r2, #0
 800308e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
  __HAL_RCC_AHB3_RELEASE_RESET();

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003090:	f000 f806 	bl	80030a0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_InitTick+0x54>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_InitTick+0x58>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f999 	bl	8003406 <HAL_SYSTICK_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00e      	b.n	80030fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d80a      	bhi.n	80030fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e4:	2200      	movs	r2, #0
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f000 f953 	bl	8003396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f0:	4a06      	ldr	r2, [pc, #24]	; (800310c <HAL_InitTick+0x5c>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000000 	.word	0x20000000
 8003108:	20000008 	.word	0x20000008
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x20>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_IncTick+0x24>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_IncTick+0x24>)
 8003122:	6013      	str	r3, [r2, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000008 	.word	0x20000008
 8003134:	20000724 	.word	0x20000724

08003138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return uwTick;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_GetTick+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000724 	.word	0x20000724

08003150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff ffee 	bl	8003138 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d005      	beq.n	8003176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_Delay+0x44>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003176:	bf00      	nop
 8003178:	f7ff ffde 	bl	8003138 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d8f7      	bhi.n	8003178 <HAL_Delay+0x28>
  {
  }
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000008 	.word	0x20000008

08003198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ca:	4a04      	ldr	r2, [pc, #16]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__NVIC_GetPriorityGrouping+0x18>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	f003 0307 	and.w	r3, r3, #7
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db0b      	blt.n	8003226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	4907      	ldr	r1, [pc, #28]	; (8003234 <__NVIC_EnableIRQ+0x38>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	db12      	blt.n	8003270 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	490a      	ldr	r1, [pc, #40]	; (800327c <__NVIC_DisableIRQ+0x44>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2001      	movs	r0, #1
 800325a:	fa00 f202 	lsl.w	r2, r0, r2
 800325e:	3320      	adds	r3, #32
 8003260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003264:	f3bf 8f4f 	dsb	sy
}
 8003268:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800326a:	f3bf 8f6f 	isb	sy
}
 800326e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db0a      	blt.n	80032aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	490c      	ldr	r1, [pc, #48]	; (80032cc <__NVIC_SetPriority+0x4c>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a8:	e00a      	b.n	80032c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4908      	ldr	r1, [pc, #32]	; (80032d0 <__NVIC_SetPriority+0x50>)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3b04      	subs	r3, #4
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	440b      	add	r3, r1
 80032be:	761a      	strb	r2, [r3, #24]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	bf28      	it	cs
 80032f2:	2304      	movcs	r3, #4
 80032f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <NVIC_EncodePriority+0x30>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b03      	subs	r3, #3
 8003302:	e000      	b.n	8003306 <NVIC_EncodePriority+0x32>
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	401a      	ands	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800331c:	f04f 31ff 	mov.w	r1, #4294967295
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43d9      	mvns	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	4313      	orrs	r3, r2
         );
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800334c:	d301      	bcc.n	8003352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334e:	2301      	movs	r3, #1
 8003350:	e00f      	b.n	8003372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003352:	4a0a      	ldr	r2, [pc, #40]	; (800337c <SysTick_Config+0x40>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335a:	210f      	movs	r1, #15
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	f7ff ff8e 	bl	8003280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <SysTick_Config+0x40>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <SysTick_Config+0x40>)
 800336c:	2207      	movs	r2, #7
 800336e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	e000e010 	.word	0xe000e010

08003380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff05 	bl	8003198 <__NVIC_SetPriorityGrouping>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a8:	f7ff ff1a 	bl	80031e0 <__NVIC_GetPriorityGrouping>
 80033ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	6978      	ldr	r0, [r7, #20]
 80033b4:	f7ff ff8e 	bl	80032d4 <NVIC_EncodePriority>
 80033b8:	4602      	mov	r2, r0
 80033ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff5d 	bl	8003280 <__NVIC_SetPriority>
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff0d 	bl	80031fc <__NVIC_EnableIRQ>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff1d 	bl	8003238 <__NVIC_DisableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ff94 	bl	800333c <SysTick_Config>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_FLASH_Program+0xa0>)
 8003434:	7e1b      	ldrb	r3, [r3, #24]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_FLASH_Program+0x1e>
 800343a:	2302      	movs	r3, #2
 800343c:	e03b      	b.n	80034b6 <HAL_FLASH_Program+0x96>
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_FLASH_Program+0xa0>)
 8003440:	2201      	movs	r2, #1
 8003442:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003444:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003448:	f000 f87c 	bl	8003544 <FLASH_WaitForLastOperation>
 800344c:	4603      	mov	r3, r0
 800344e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d12b      	bne.n	80034ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800345c:	783b      	ldrb	r3, [r7, #0]
 800345e:	4619      	mov	r1, r3
 8003460:	68b8      	ldr	r0, [r7, #8]
 8003462:	f000 f927 	bl	80036b4 <FLASH_Program_Byte>
 8003466:	e016      	b.n	8003496 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800346e:	883b      	ldrh	r3, [r7, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	68b8      	ldr	r0, [r7, #8]
 8003474:	f000 f8fa 	bl	800366c <FLASH_Program_HalfWord>
 8003478:	e00d      	b.n	8003496 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d105      	bne.n	800348c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4619      	mov	r1, r3
 8003484:	68b8      	ldr	r0, [r7, #8]
 8003486:	f000 f8cf 	bl	8003628 <FLASH_Program_Word>
 800348a:	e004      	b.n	8003496 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800348c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003490:	68b8      	ldr	r0, [r7, #8]
 8003492:	f000 f897 	bl	80035c4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003496:	f24c 3050 	movw	r0, #50000	; 0xc350
 800349a:	f000 f853 	bl	8003544 <FLASH_WaitForLastOperation>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80034a2:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <HAL_FLASH_Program+0xa4>)
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <HAL_FLASH_Program+0xa4>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_FLASH_Program+0xa0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000728 	.word	0x20000728
 80034c4:	40023c00 	.word	0x40023c00

080034c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_FLASH_Unlock+0x38>)
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da0b      	bge.n	80034f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_FLASH_Unlock+0x38>)
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_FLASH_Unlock+0x3c>)
 80034de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_FLASH_Unlock+0x38>)
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_FLASH_Unlock+0x40>)
 80034e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_FLASH_Unlock+0x38>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	da01      	bge.n	80034f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034f2:	79fb      	ldrb	r3, [r7, #7]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40023c00 	.word	0x40023c00
 8003504:	45670123 	.word	0x45670123
 8003508:	cdef89ab 	.word	0xcdef89ab

0800350c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_FLASH_Lock+0x1c>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_FLASH_Lock+0x1c>)
 8003516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800351a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40023c00 	.word	0x40023c00

0800352c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_FLASH_GetError+0x14>)
 8003532:	69db      	ldr	r3, [r3, #28]
}  
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000728 	.word	0x20000728

08003544 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <FLASH_WaitForLastOperation+0x78>)
 8003552:	2200      	movs	r2, #0
 8003554:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003556:	f7ff fdef 	bl	8003138 <HAL_GetTick>
 800355a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800355c:	e010      	b.n	8003580 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d00c      	beq.n	8003580 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <FLASH_WaitForLastOperation+0x38>
 800356c:	f7ff fde4 	bl	8003138 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d201      	bcs.n	8003580 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e019      	b.n	80035b4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <FLASH_WaitForLastOperation+0x7c>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e8      	bne.n	800355e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <FLASH_WaitForLastOperation+0x7c>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <FLASH_WaitForLastOperation+0x7c>)
 800359a:	2201      	movs	r2, #1
 800359c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <FLASH_WaitForLastOperation+0x7c>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80035aa:	f000 f8a5 	bl	80036f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
  
}  
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000728 	.word	0x20000728
 80035c0:	40023c00 	.word	0x40023c00

080035c4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <FLASH_Program_DoubleWord+0x60>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	4a13      	ldr	r2, [pc, #76]	; (8003624 <FLASH_Program_DoubleWord+0x60>)
 80035d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <FLASH_Program_DoubleWord+0x60>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	4a10      	ldr	r2, [pc, #64]	; (8003624 <FLASH_Program_DoubleWord+0x60>)
 80035e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <FLASH_Program_DoubleWord+0x60>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <FLASH_Program_DoubleWord+0x60>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80035fa:	f3bf 8f6f 	isb	sy
}
 80035fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	000a      	movs	r2, r1
 800360e:	2300      	movs	r3, #0
 8003610:	68f9      	ldr	r1, [r7, #12]
 8003612:	3104      	adds	r1, #4
 8003614:	4613      	mov	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40023c00 	.word	0x40023c00

08003628 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <FLASH_Program_Word+0x40>)
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <FLASH_Program_Word+0x40>)
 8003638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <FLASH_Program_Word+0x40>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <FLASH_Program_Word+0x40>)
 8003644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003648:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <FLASH_Program_Word+0x40>)
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	4a06      	ldr	r2, [pc, #24]	; (8003668 <FLASH_Program_Word+0x40>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	601a      	str	r2, [r3, #0]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40023c00 	.word	0x40023c00

0800366c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <FLASH_Program_HalfWord+0x44>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <FLASH_Program_HalfWord+0x44>)
 800367e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003682:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <FLASH_Program_HalfWord+0x44>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <FLASH_Program_HalfWord+0x44>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <FLASH_Program_HalfWord+0x44>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <FLASH_Program_HalfWord+0x44>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	801a      	strh	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00

080036b4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <FLASH_Program_Byte+0x40>)
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <FLASH_Program_Byte+0x40>)
 80036c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <FLASH_Program_Byte+0x40>)
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <FLASH_Program_Byte+0x40>)
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <FLASH_Program_Byte+0x40>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a06      	ldr	r2, [pc, #24]	; (80036f4 <FLASH_Program_Byte+0x40>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	701a      	strb	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40023c00 	.word	0x40023c00

080036f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f043 0310 	orr.w	r3, r3, #16
 8003710:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 8003712:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003714:	4b29      	ldr	r3, [pc, #164]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 8003716:	2210      	movs	r2, #16
 8003718:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800371a:	4b28      	ldr	r3, [pc, #160]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f043 0308 	orr.w	r3, r3, #8
 800372e:	4a24      	ldr	r2, [pc, #144]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 8003730:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 8003734:	2220      	movs	r2, #32
 8003736:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003744:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 800374e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 800376c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 8003770:	2280      	movs	r2, #128	; 0x80
 8003772:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 800378a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 800378e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003792:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f043 0320 	orr.w	r3, r3, #32
 80037a8:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <FLASH_SetErrorCode+0xc8>)
 80037aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <FLASH_SetErrorCode+0xc4>)
 80037ae:	2202      	movs	r2, #2
 80037b0:	60da      	str	r2, [r3, #12]
  }
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40023c00 	.word	0x40023c00
 80037c0:	20000728 	.word	0x20000728

080037c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e010      	b.n	8003802 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d103      	bne.n	80037ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80037e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e009      	b.n	8003802 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d103      	bne.n	80037fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80037f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e002      	b.n	8003802 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80037fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003800:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 8003808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	490f      	ldr	r1, [pc, #60]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 8003820:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003824:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4313      	orrs	r3, r2
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <FLASH_Erase_Sector+0x8c>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003842:	6113      	str	r3, [r2, #16]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40023c00 	.word	0x40023c00

08003854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	e14d      	b.n	8003b0c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	429a      	cmp	r2, r3
 800388a:	f040 813c 	bne.w	8003b06 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d005      	beq.n	80038a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d130      	bne.n	8003908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038dc:	2201      	movs	r2, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 0201 	and.w	r2, r3, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b03      	cmp	r3, #3
 8003912:	d017      	beq.n	8003944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d123      	bne.n	8003998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	08da      	lsrs	r2, r3, #3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3208      	adds	r2, #8
 8003958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	220f      	movs	r2, #15
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	08da      	lsrs	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3208      	adds	r2, #8
 8003992:	69b9      	ldr	r1, [r7, #24]
 8003994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0203 	and.w	r2, r3, #3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8096 	beq.w	8003b06 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b51      	ldr	r3, [pc, #324]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	4a50      	ldr	r2, [pc, #320]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 80039e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ea:	4b4e      	ldr	r3, [pc, #312]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039f6:	4a4c      	ldr	r2, [pc, #304]	; (8003b28 <HAL_GPIO_Init+0x2d4>)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	3302      	adds	r3, #2
 80039fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a43      	ldr	r2, [pc, #268]	; (8003b2c <HAL_GPIO_Init+0x2d8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00d      	beq.n	8003a3e <HAL_GPIO_Init+0x1ea>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a42      	ldr	r2, [pc, #264]	; (8003b30 <HAL_GPIO_Init+0x2dc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <HAL_GPIO_Init+0x1e6>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a41      	ldr	r2, [pc, #260]	; (8003b34 <HAL_GPIO_Init+0x2e0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_GPIO_Init+0x1e2>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e004      	b.n	8003a40 <HAL_GPIO_Init+0x1ec>
 8003a36:	2307      	movs	r3, #7
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_Init+0x1ec>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_GPIO_Init+0x1ec>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	f002 0203 	and.w	r2, r2, #3
 8003a46:	0092      	lsls	r2, r2, #2
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a50:	4935      	ldr	r1, [pc, #212]	; (8003b28 <HAL_GPIO_Init+0x2d4>)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_GPIO_Init+0x2e4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a82:	4a2d      	ldr	r2, [pc, #180]	; (8003b38 <HAL_GPIO_Init+0x2e4>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_GPIO_Init+0x2e4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aac:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <HAL_GPIO_Init+0x2e4>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_GPIO_Init+0x2e4>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_GPIO_Init+0x2e4>)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_GPIO_Init+0x2e4>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b00:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <HAL_GPIO_Init+0x2e4>)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b0f      	cmp	r3, #15
 8003b10:	f67f aeae 	bls.w	8003870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3724      	adds	r7, #36	; 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40013800 	.word	0x40013800
 8003b2c:	40020000 	.word	0x40020000
 8003b30:	40020400 	.word	0x40020400
 8003b34:	40020800 	.word	0x40020800
 8003b38:	40013c00 	.word	0x40013c00

08003b3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e0af      	b.n	8003cb8 <HAL_GPIO_DeInit+0x17c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	f040 809f 	bne.w	8003cb2 <HAL_GPIO_DeInit+0x176>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003b74:	4a56      	ldr	r2, [pc, #344]	; (8003cd0 <HAL_GPIO_DeInit+0x194>)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b80:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a4e      	ldr	r2, [pc, #312]	; (8003cd4 <HAL_GPIO_DeInit+0x198>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00d      	beq.n	8003bba <HAL_GPIO_DeInit+0x7e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a4d      	ldr	r2, [pc, #308]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d007      	beq.n	8003bb6 <HAL_GPIO_DeInit+0x7a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a4c      	ldr	r2, [pc, #304]	; (8003cdc <HAL_GPIO_DeInit+0x1a0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_GPIO_DeInit+0x76>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_DeInit+0x80>
 8003bb2:	2307      	movs	r3, #7
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_DeInit+0x80>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_DeInit+0x80>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d132      	bne.n	8003c32 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003bcc:	4b44      	ldr	r3, [pc, #272]	; (8003ce0 <HAL_GPIO_DeInit+0x1a4>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	4942      	ldr	r1, [pc, #264]	; (8003ce0 <HAL_GPIO_DeInit+0x1a4>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003bda:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <HAL_GPIO_DeInit+0x1a4>)
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	493f      	ldr	r1, [pc, #252]	; (8003ce0 <HAL_GPIO_DeInit+0x1a4>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003be8:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_GPIO_DeInit+0x1a4>)
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	493b      	ldr	r1, [pc, #236]	; (8003ce0 <HAL_GPIO_DeInit+0x1a4>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003bf6:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <HAL_GPIO_DeInit+0x1a4>)
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	4938      	ldr	r1, [pc, #224]	; (8003ce0 <HAL_GPIO_DeInit+0x1a4>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003c14:	4a2e      	ldr	r2, [pc, #184]	; (8003cd0 <HAL_GPIO_DeInit+0x194>)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	089b      	lsrs	r3, r3, #2
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	43da      	mvns	r2, r3
 8003c24:	482a      	ldr	r0, [pc, #168]	; (8003cd0 <HAL_GPIO_DeInit+0x194>)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2103      	movs	r1, #3
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	401a      	ands	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	08d2      	lsrs	r2, r2, #3
 8003c68:	4019      	ands	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3208      	adds	r2, #8
 8003c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	401a      	ands	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2103      	movs	r1, #3
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	401a      	ands	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b0f      	cmp	r3, #15
 8003cbc:	f67f af4c 	bls.w	8003b58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	40020000 	.word	0x40020000
 8003cd8:	40020400 	.word	0x40020400
 8003cdc:	40020800 	.word	0x40020800
 8003ce0:	40013c00 	.word	0x40013c00

08003ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf4:	787b      	ldrb	r3, [r7, #1]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d00:	e003      	b.n	8003d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	041a      	lsls	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d2e:	4a05      	ldr	r2, [pc, #20]	; (8003d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fec6 	bl	8002ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40013c00 	.word	0x40013c00

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e12b      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe ff80 	bl	8002c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dac:	f002 fb7c 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a81      	ldr	r2, [pc, #516]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d807      	bhi.n	8003dcc <HAL_I2C_Init+0x84>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a80      	ldr	r2, [pc, #512]	; (8003fc0 <HAL_I2C_Init+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e006      	b.n	8003dda <HAL_I2C_Init+0x92>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <HAL_I2C_Init+0x27c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bf94      	ite	ls
 8003dd4:	2301      	movls	r3, #1
 8003dd6:	2300      	movhi	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0e7      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a78      	ldr	r2, [pc, #480]	; (8003fc8 <HAL_I2C_Init+0x280>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0c9b      	lsrs	r3, r3, #18
 8003dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d802      	bhi.n	8003e1c <HAL_I2C_Init+0xd4>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	e009      	b.n	8003e30 <HAL_I2C_Init+0xe8>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	4a69      	ldr	r2, [pc, #420]	; (8003fcc <HAL_I2C_Init+0x284>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	3301      	adds	r3, #1
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	495c      	ldr	r1, [pc, #368]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	d819      	bhi.n	8003e84 <HAL_I2C_Init+0x13c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e59      	subs	r1, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e64:	400b      	ands	r3, r1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_I2C_Init+0x138>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1e59      	subs	r1, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	e051      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e04f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d111      	bne.n	8003eb0 <HAL_I2C_Init+0x168>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e58      	subs	r0, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	440b      	add	r3, r1
 8003e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e012      	b.n	8003ed6 <HAL_I2C_Init+0x18e>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	0099      	lsls	r1, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x196>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e022      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <HAL_I2C_Init+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1e58      	subs	r0, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	440b      	add	r3, r1
 8003ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	e00f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1e58      	subs	r0, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	0099      	lsls	r1, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	6809      	ldr	r1, [r1, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6911      	ldr	r1, [r2, #16]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	000186a0 	.word	0x000186a0
 8003fc0:	001e847f 	.word	0x001e847f
 8003fc4:	003d08ff 	.word	0x003d08ff
 8003fc8:	431bde83 	.word	0x431bde83
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	4608      	mov	r0, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	817b      	strh	r3, [r7, #10]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	813b      	strh	r3, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fea:	f7ff f8a5 	bl	8003138 <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	f040 80d9 	bne.w	80041b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2319      	movs	r3, #25
 8004004:	2201      	movs	r2, #1
 8004006:	496d      	ldr	r1, [pc, #436]	; (80041bc <HAL_I2C_Mem_Write+0x1ec>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fc7f 	bl	800490c <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
 8004016:	e0cc      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_I2C_Mem_Write+0x56>
 8004022:	2302      	movs	r3, #2
 8004024:	e0c5      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d007      	beq.n	800404c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2221      	movs	r2, #33	; 0x21
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2240      	movs	r2, #64	; 0x40
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a4d      	ldr	r2, [pc, #308]	; (80041c0 <HAL_I2C_Mem_Write+0x1f0>)
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800408e:	88f8      	ldrh	r0, [r7, #6]
 8004090:	893a      	ldrh	r2, [r7, #8]
 8004092:	8979      	ldrh	r1, [r7, #10]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4603      	mov	r3, r0
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fab6 	bl	8004610 <I2C_RequestMemoryWrite>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d052      	beq.n	8004150 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e081      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fd00 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_I2C_Mem_Write+0x180>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1aa      	bne.n	80040ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fcec 	bl	8004b3a <I2C_WaitOnBTFFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b04      	cmp	r3, #4
 800416e:	d107      	bne.n	8004180 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e016      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000

080041c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	; 0x30
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	4608      	mov	r0, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	817b      	strh	r3, [r7, #10]
 80041d6:	460b      	mov	r3, r1
 80041d8:	813b      	strh	r3, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041de:	f7fe ffab 	bl	8003138 <HAL_GetTick>
 80041e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	f040 8208 	bne.w	8004602 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2319      	movs	r3, #25
 80041f8:	2201      	movs	r2, #1
 80041fa:	497b      	ldr	r1, [pc, #492]	; (80043e8 <HAL_I2C_Mem_Read+0x224>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fb85 	bl	800490c <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
 800420a:	e1fb      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_I2C_Mem_Read+0x56>
 8004216:	2302      	movs	r3, #2
 8004218:	e1f4      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d007      	beq.n	8004240 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2222      	movs	r2, #34	; 0x22
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a5b      	ldr	r2, [pc, #364]	; (80043ec <HAL_I2C_Mem_Read+0x228>)
 8004280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004282:	88f8      	ldrh	r0, [r7, #6]
 8004284:	893a      	ldrh	r2, [r7, #8]
 8004286:	8979      	ldrh	r1, [r7, #10]
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	4603      	mov	r3, r0
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fa52 	bl	800473c <I2C_RequestMemoryRead>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e1b0      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d113      	bne.n	80042d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042aa:	2300      	movs	r3, #0
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e184      	b.n	80045dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d11b      	bne.n	8004312 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e164      	b.n	80045dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004316:	2b02      	cmp	r3, #2
 8004318:	d11b      	bne.n	8004352 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	e144      	b.n	80045dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004368:	e138      	b.n	80045dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	2b03      	cmp	r3, #3
 8004370:	f200 80f1 	bhi.w	8004556 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	2b01      	cmp	r3, #1
 800437a:	d123      	bne.n	80043c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fc1b 	bl	8004bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e139      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043c2:	e10b      	b.n	80045dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d14e      	bne.n	800446a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	2200      	movs	r2, #0
 80043d4:	4906      	ldr	r1, [pc, #24]	; (80043f0 <HAL_I2C_Mem_Read+0x22c>)
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fa98 	bl	800490c <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e10e      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000
 80043f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004468:	e0b8      	b.n	80045dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	2200      	movs	r2, #0
 8004472:	4966      	ldr	r1, [pc, #408]	; (800460c <HAL_I2C_Mem_Read+0x448>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fa49 	bl	800490c <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0bf      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	2200      	movs	r2, #0
 80044ce:	494f      	ldr	r1, [pc, #316]	; (800460c <HAL_I2C_Mem_Read+0x448>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fa1b 	bl	800490c <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e091      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004554:	e042      	b.n	80045dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fb2e 	bl	8004bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e04c      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d118      	bne.n	80045dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f47f aec2 	bne.w	800436a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3728      	adds	r7, #40	; 0x28
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	00010004 	.word	0x00010004

08004610 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	4608      	mov	r0, r1
 800461a:	4611      	mov	r1, r2
 800461c:	461a      	mov	r2, r3
 800461e:	4603      	mov	r3, r0
 8004620:	817b      	strh	r3, [r7, #10]
 8004622:	460b      	mov	r3, r1
 8004624:	813b      	strh	r3, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004638:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	2200      	movs	r2, #0
 8004642:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f960 	bl	800490c <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00d      	beq.n	800466e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004660:	d103      	bne.n	800466a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e05f      	b.n	800472e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800466e:	897b      	ldrh	r3, [r7, #10]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800467c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	492d      	ldr	r1, [pc, #180]	; (8004738 <I2C_RequestMemoryWrite+0x128>)
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f998 	bl	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e04c      	b.n	800472e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	6a39      	ldr	r1, [r7, #32]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fa02 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d107      	bne.n	80046d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e02b      	b.n	800472e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d105      	bne.n	80046e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046dc:	893b      	ldrh	r3, [r7, #8]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]
 80046e6:	e021      	b.n	800472c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046e8:	893b      	ldrh	r3, [r7, #8]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	6a39      	ldr	r1, [r7, #32]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f9dc 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	2b04      	cmp	r3, #4
 800470c:	d107      	bne.n	800471e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e005      	b.n	800472e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004722:	893b      	ldrh	r3, [r7, #8]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	00010002 	.word	0x00010002

0800473c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	4608      	mov	r0, r1
 8004746:	4611      	mov	r1, r2
 8004748:	461a      	mov	r2, r3
 800474a:	4603      	mov	r3, r0
 800474c:	817b      	strh	r3, [r7, #10]
 800474e:	460b      	mov	r3, r1
 8004750:	813b      	strh	r3, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004774:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	2200      	movs	r2, #0
 800477e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f8c2 	bl	800490c <I2C_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00d      	beq.n	80047aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479c:	d103      	bne.n	80047a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e0aa      	b.n	8004900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047aa:	897b      	ldrh	r3, [r7, #10]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	6a3a      	ldr	r2, [r7, #32]
 80047be:	4952      	ldr	r1, [pc, #328]	; (8004908 <I2C_RequestMemoryRead+0x1cc>)
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f8fa 	bl	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e097      	b.n	8004900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e8:	6a39      	ldr	r1, [r7, #32]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f964 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d107      	bne.n	800480e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e076      	b.n	8004900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004818:	893b      	ldrh	r3, [r7, #8]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	611a      	str	r2, [r3, #16]
 8004822:	e021      	b.n	8004868 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004824:	893b      	ldrh	r3, [r7, #8]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	b29b      	uxth	r3, r3
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	6a39      	ldr	r1, [r7, #32]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f93e 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	2b04      	cmp	r3, #4
 8004848:	d107      	bne.n	800485a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004858:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e050      	b.n	8004900 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800485e:	893b      	ldrh	r3, [r7, #8]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	6a39      	ldr	r1, [r7, #32]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f923 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2b04      	cmp	r3, #4
 800487e:	d107      	bne.n	8004890 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e035      	b.n	8004900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f82b 	bl	800490c <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00d      	beq.n	80048d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ca:	d103      	bne.n	80048d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e013      	b.n	8004900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048d8:	897b      	ldrh	r3, [r7, #10]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	6a3a      	ldr	r2, [r7, #32]
 80048ec:	4906      	ldr	r1, [pc, #24]	; (8004908 <I2C_RequestMemoryRead+0x1cc>)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f863 	bl	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	00010002 	.word	0x00010002

0800490c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800491c:	e025      	b.n	800496a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d021      	beq.n	800496a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7fe fc07 	bl	8003138 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d116      	bne.n	800496a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0220 	orr.w	r2, r3, #32
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e023      	b.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	d10d      	bne.n	8004990 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	43da      	mvns	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4013      	ands	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf0c      	ite	eq
 8004986:	2301      	moveq	r3, #1
 8004988:	2300      	movne	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	e00c      	b.n	80049aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	43da      	mvns	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4013      	ands	r3, r2
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d0b6      	beq.n	800491e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049c8:	e051      	b.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d8:	d123      	bne.n	8004a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f043 0204 	orr.w	r2, r3, #4
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e046      	b.n	8004ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d021      	beq.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fe fb85 	bl	8003138 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d116      	bne.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f043 0220 	orr.w	r2, r3, #32
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e020      	b.n	8004ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10c      	bne.n	8004a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e00b      	b.n	8004aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d18d      	bne.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac4:	e02d      	b.n	8004b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f8ce 	bl	8004c68 <I2C_IsAcknowledgeFailed>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e02d      	b.n	8004b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d021      	beq.n	8004b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ade:	f7fe fb2b 	bl	8003138 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d116      	bne.n	8004b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e007      	b.n	8004b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2c:	2b80      	cmp	r3, #128	; 0x80
 8004b2e:	d1ca      	bne.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b46:	e02d      	b.n	8004ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f88d 	bl	8004c68 <I2C_IsAcknowledgeFailed>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e02d      	b.n	8004bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d021      	beq.n	8004ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b60:	f7fe faea 	bl	8003138 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d116      	bne.n	8004ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e007      	b.n	8004bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d1ca      	bne.n	8004b48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bc8:	e042      	b.n	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d119      	bne.n	8004c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0210 	mvn.w	r2, #16
 8004be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e029      	b.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0c:	f7fe fa94 	bl	8003138 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d302      	bcc.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d116      	bne.n	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e007      	b.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d1b5      	bne.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7e:	d11b      	bne.n	8004cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	f043 0204 	orr.w	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc8:	b08f      	sub	sp, #60	; 0x3c
 8004cca:	af0a      	add	r7, sp, #40	; 0x28
 8004ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e116      	b.n	8004f06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f005 faf4 	bl	800a2e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d102      	bne.n	8004d12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f002 fa29 	bl	800716e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	687e      	ldr	r6, [r7, #4]
 8004d24:	466d      	mov	r5, sp
 8004d26:	f106 0410 	add.w	r4, r6, #16
 8004d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d3a:	1d33      	adds	r3, r6, #4
 8004d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d3e:	6838      	ldr	r0, [r7, #0]
 8004d40:	f002 f900 	bl	8006f44 <USB_CoreInit>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0d7      	b.n	8004f06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 fa17 	bl	8007190 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
 8004d66:	e04a      	b.n	8004dfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	333d      	adds	r3, #61	; 0x3d
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d7c:	7bfa      	ldrb	r2, [r7, #15]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	333c      	adds	r3, #60	; 0x3c
 8004d8c:	7bfa      	ldrb	r2, [r7, #15]
 8004d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d90:	7bfa      	ldrb	r2, [r7, #15]
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	b298      	uxth	r0, r3
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3342      	adds	r3, #66	; 0x42
 8004da4:	4602      	mov	r2, r0
 8004da6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	333f      	adds	r3, #63	; 0x3f
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	3344      	adds	r3, #68	; 0x44
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3348      	adds	r3, #72	; 0x48
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3350      	adds	r3, #80	; 0x50
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3af      	bcc.n	8004d68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	e044      	b.n	8004e98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e24:	7bfa      	ldrb	r2, [r7, #15]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e3a:	7bfa      	ldrb	r2, [r7, #15]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e66:	7bfa      	ldrb	r2, [r7, #15]
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e7c:	7bfa      	ldrb	r2, [r7, #15]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	3301      	adds	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d3b5      	bcc.n	8004e0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	687e      	ldr	r6, [r7, #4]
 8004eaa:	466d      	mov	r5, sp
 8004eac:	f106 0410 	add.w	r4, r6, #16
 8004eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ec0:	1d33      	adds	r3, r6, #4
 8004ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ec4:	6838      	ldr	r0, [r7, #0]
 8004ec6:	f002 f9af 	bl	8007228 <USB_DevInit>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e014      	b.n	8004f06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d102      	bne.n	8004efa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 f8d5 	bl	80060a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f003 fa6d 	bl	80083de <USB_DevDisconnect>

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f0e <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e015      	b.n	8004f4c <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2203      	movs	r2, #3
 8004f24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f003 f9c0 	bl	80082b2 <USB_StopDevice>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e007      	b.n	8004f4c <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f005 fa43 	bl	800a3c8 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_PCD_Start+0x1c>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e020      	b.n	8004fb2 <HAL_PCD_Start+0x5e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d109      	bne.n	8004f94 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d005      	beq.n	8004f94 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f002 f8d7 	bl	800714c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f003 f9fa 	bl	800839c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_PCD_Stop+0x1c>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e026      	b.n	8005024 <HAL_PCD_Stop+0x6a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f002 f8c3 	bl	800716e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f003 f9f6 	bl	80083de <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2110      	movs	r1, #16
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 fa73 	bl	80074e4 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	2b01      	cmp	r3, #1
 8005004:	d109      	bne.n	800501a <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800500a:	2b01      	cmp	r3, #1
 800500c:	d005      	beq.n	800501a <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b08d      	sub	sp, #52	; 0x34
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f003 fa7f 	bl	8008546 <USB_GetMode>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 83ca 	bne.w	80057e4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f003 f9e3 	bl	8008420 <USB_ReadInterrupts>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 83c0 	beq.w	80057e2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f003 f9da 	bl	8008420 <USB_ReadInterrupts>
 800506c:	4603      	mov	r3, r0
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d107      	bne.n	8005086 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f002 0202 	and.w	r2, r2, #2
 8005084:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f003 f9c8 	bl	8008420 <USB_ReadInterrupts>
 8005090:	4603      	mov	r3, r0
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b10      	cmp	r3, #16
 8005098:	d161      	bne.n	800515e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0210 	bic.w	r2, r2, #16
 80050a8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 020f 	and.w	r2, r3, #15
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4413      	add	r3, r2
 80050c6:	3304      	adds	r3, #4
 80050c8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	0c5b      	lsrs	r3, r3, #17
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d124      	bne.n	8005120 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d035      	beq.n	800514e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	6a38      	ldr	r0, [r7, #32]
 80050f6:	f002 ffb0 	bl	800805a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005106:	441a      	add	r2, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005118:	441a      	add	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	619a      	str	r2, [r3, #24]
 800511e:	e016      	b.n	800514e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	0c5b      	lsrs	r3, r3, #17
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	2b06      	cmp	r3, #6
 800512a:	d110      	bne.n	800514e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005132:	2208      	movs	r2, #8
 8005134:	4619      	mov	r1, r3
 8005136:	6a38      	ldr	r0, [r7, #32]
 8005138:	f002 ff8f 	bl	800805a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005148:	441a      	add	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699a      	ldr	r2, [r3, #24]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0210 	orr.w	r2, r2, #16
 800515c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f003 f95c 	bl	8008420 <USB_ReadInterrupts>
 8005168:	4603      	mov	r3, r0
 800516a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800516e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005172:	d16e      	bne.n	8005252 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f003 f962 	bl	8008446 <USB_ReadDevAllOutEpInterrupt>
 8005182:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005184:	e062      	b.n	800524c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d057      	beq.n	8005240 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f003 f987 	bl	80084ae <USB_ReadDevOutEPInterrupt>
 80051a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	461a      	mov	r2, r3
 80051ba:	2301      	movs	r3, #1
 80051bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fdc5 	bl	8005d50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00c      	beq.n	80051ea <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	461a      	mov	r2, r3
 80051de:	2308      	movs	r3, #8
 80051e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 febf 	bl	8005f68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	461a      	mov	r2, r3
 8005202:	2310      	movs	r3, #16
 8005204:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	2320      	movs	r3, #32
 8005220:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	461a      	mov	r2, r3
 800523a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800523e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	3301      	adds	r3, #1
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d199      	bne.n	8005186 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f003 f8e2 	bl	8008420 <USB_ReadInterrupts>
 800525c:	4603      	mov	r3, r0
 800525e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005266:	f040 80c0 	bne.w	80053ea <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f003 f903 	bl	800847a <USB_ReadDevAllInEpInterrupt>
 8005274:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800527a:	e0b2      	b.n	80053e2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80a7 	beq.w	80053d6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f003 f929 	bl	80084ea <USB_ReadDevInEPInterrupt>
 8005298:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d057      	beq.n	8005354 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	2201      	movs	r2, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	43db      	mvns	r3, r3
 80052be:	69f9      	ldr	r1, [r7, #28]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c4:	4013      	ands	r3, r2
 80052c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	461a      	mov	r2, r3
 80052d6:	2301      	movs	r3, #1
 80052d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d132      	bne.n	8005348 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e6:	4613      	mov	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3348      	adds	r3, #72	; 0x48
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4403      	add	r3, r0
 8005302:	3344      	adds	r3, #68	; 0x44
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4419      	add	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4403      	add	r3, r0
 8005316:	3348      	adds	r3, #72	; 0x48
 8005318:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d113      	bne.n	8005348 <HAL_PCD_IRQHandler+0x31c>
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	3350      	adds	r3, #80	; 0x50
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d108      	bne.n	8005348 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005340:	461a      	mov	r2, r3
 8005342:	2101      	movs	r1, #1
 8005344:	f003 f930 	bl	80085a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f005 f887 	bl	800a462 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536a:	461a      	mov	r2, r3
 800536c:	2308      	movs	r3, #8
 800536e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	461a      	mov	r2, r3
 8005388:	2310      	movs	r3, #16
 800538a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	461a      	mov	r2, r3
 80053a4:	2340      	movs	r3, #64	; 0x40
 80053a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053be:	461a      	mov	r2, r3
 80053c0:	2302      	movs	r3, #2
 80053c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fc30 	bl	8005c36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	3301      	adds	r3, #1
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f47f af49 	bne.w	800527c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f003 f816 	bl	8008420 <USB_ReadInterrupts>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053fe:	d122      	bne.n	8005446 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800540e:	f023 0301 	bic.w	r3, r3, #1
 8005412:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800541a:	2b01      	cmp	r3, #1
 800541c:	d108      	bne.n	8005430 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005426:	2100      	movs	r1, #0
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f005 fa87 	bl	800a93c <HAL_PCDEx_LPM_Callback>
 800542e:	e002      	b.n	8005436 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f005 f883 	bl	800a53c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f002 ffe8 	bl	8008420 <USB_ReadInterrupts>
 8005450:	4603      	mov	r3, r0
 8005452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545a:	d112      	bne.n	8005482 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d102      	bne.n	8005472 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f005 f83f 	bl	800a4f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005480:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f002 ffca 	bl	8008420 <USB_ReadInterrupts>
 800548c:	4603      	mov	r3, r0
 800548e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005496:	d121      	bne.n	80054dc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80054a6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d111      	bne.n	80054d6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	f003 020f 	and.w	r2, r3, #15
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80054cc:	2101      	movs	r1, #1
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f005 fa34 	bl	800a93c <HAL_PCDEx_LPM_Callback>
 80054d4:	e002      	b.n	80054dc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f005 f80a 	bl	800a4f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f002 ff9d 	bl	8008420 <USB_ReadInterrupts>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	f040 80c7 	bne.w	8005682 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2110      	movs	r1, #16
 800550e:	4618      	mov	r0, r3
 8005510:	f001 ffe8 	bl	80074e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005514:	2300      	movs	r3, #0
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005518:	e056      	b.n	80055c8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	461a      	mov	r2, r3
 8005528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800552c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553e:	0151      	lsls	r1, r2, #5
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	440a      	add	r2, r1
 8005544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005548:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800554c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800556c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005580:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	3301      	adds	r3, #1
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d3a3      	bcc.n	800551a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80055e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d016      	beq.n	800561c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fe:	f043 030b 	orr.w	r3, r3, #11
 8005602:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005614:	f043 030b 	orr.w	r3, r3, #11
 8005618:	6453      	str	r3, [r2, #68]	; 0x44
 800561a:	e015      	b.n	8005648 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800562a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800562e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005632:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005642:	f043 030b 	orr.w	r3, r3, #11
 8005646:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005656:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800565a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800566c:	461a      	mov	r2, r3
 800566e:	f002 ff9b 	bl	80085a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f002 feca 	bl	8008420 <USB_ReadInterrupts>
 800568c:	4603      	mov	r3, r0
 800568e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005696:	d124      	bne.n	80056e2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f002 ff60 	bl	8008562 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 ff79 	bl	800759e <USB_GetDevSpeed>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681c      	ldr	r4, [r3, #0]
 80056b8:	f000 feea 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80056bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	4620      	mov	r0, r4
 80056c8:	f001 fc9e 	bl	8007008 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f004 fef0 	bl	800a4b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80056e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f002 fe9a 	bl	8008420 <USB_ReadInterrupts>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d10a      	bne.n	800570c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f004 fecd 	bl	800a496 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695a      	ldr	r2, [r3, #20]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f002 0208 	and.w	r2, r2, #8
 800570a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f002 fe85 	bl	8008420 <USB_ReadInterrupts>
 8005716:	4603      	mov	r3, r0
 8005718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005720:	d10f      	bne.n	8005742 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	b2db      	uxtb	r3, r3
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f004 ff25 	bl	800a57c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f002 fe6a 	bl	8008420 <USB_ReadInterrupts>
 800574c:	4603      	mov	r3, r0
 800574e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005756:	d10f      	bne.n	8005778 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	b2db      	uxtb	r3, r3
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f004 fef8 	bl	800a558 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005776:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f002 fe4f 	bl	8008420 <USB_ReadInterrupts>
 8005782:	4603      	mov	r3, r0
 8005784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d10a      	bne.n	80057a4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f004 ff06 	bl	800a5a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f002 fe39 	bl	8008420 <USB_ReadInterrupts>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d115      	bne.n	80057e4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f004 fef6 	bl	800a5bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	e000      	b.n	80057e4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80057e2:	bf00      	nop
    }
  }
}
 80057e4:	3734      	adds	r7, #52	; 0x34
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}

080057ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_PCD_SetAddress+0x1a>
 8005800:	2302      	movs	r3, #2
 8005802:	e013      	b.n	800582c <HAL_PCD_SetAddress+0x42>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	78fa      	ldrb	r2, [r7, #3]
 8005810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f002 fd97 	bl	8008350 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4603      	mov	r3, r0
 8005844:	70fb      	strb	r3, [r7, #3]
 8005846:	460b      	mov	r3, r1
 8005848:	803b      	strh	r3, [r7, #0]
 800584a:	4613      	mov	r3, r2
 800584c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005856:	2b00      	cmp	r3, #0
 8005858:	da0f      	bge.n	800587a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	f003 020f 	and.w	r2, r3, #15
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3338      	adds	r3, #56	; 0x38
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	3304      	adds	r3, #4
 8005870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	705a      	strb	r2, [r3, #1]
 8005878:	e00f      	b.n	800589a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	f003 020f 	and.w	r2, r3, #15
 8005880:	4613      	mov	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4413      	add	r3, r2
 8005890:	3304      	adds	r3, #4
 8005892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80058a6:	883a      	ldrh	r2, [r7, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	78ba      	ldrb	r2, [r7, #2]
 80058b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058c4:	78bb      	ldrb	r3, [r7, #2]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d102      	bne.n	80058d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_PCD_EP_Open+0xaa>
 80058da:	2302      	movs	r3, #2
 80058dc:	e00e      	b.n	80058fc <HAL_PCD_EP_Open+0xc8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68f9      	ldr	r1, [r7, #12]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 fe7b 	bl	80075e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80058fa:	7afb      	ldrb	r3, [r7, #11]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005914:	2b00      	cmp	r3, #0
 8005916:	da0f      	bge.n	8005938 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 020f 	and.w	r2, r3, #15
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	3338      	adds	r3, #56	; 0x38
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4413      	add	r3, r2
 800592c:	3304      	adds	r3, #4
 800592e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	705a      	strb	r2, [r3, #1]
 8005936:	e00f      	b.n	8005958 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	f003 020f 	and.w	r2, r3, #15
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	3304      	adds	r3, #4
 8005950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	b2da      	uxtb	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_PCD_EP_Close+0x6e>
 800596e:	2302      	movs	r3, #2
 8005970:	e00e      	b.n	8005990 <HAL_PCD_EP_Close+0x8c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	4618      	mov	r0, r3
 8005982:	f001 feb9 	bl	80076f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	460b      	mov	r3, r1
 80059a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a8:	7afb      	ldrb	r3, [r7, #11]
 80059aa:	f003 020f 	and.w	r2, r3, #15
 80059ae:	4613      	mov	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	1a9b      	subs	r3, r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	3304      	adds	r3, #4
 80059c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2200      	movs	r2, #0
 80059d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2200      	movs	r2, #0
 80059d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d102      	bne.n	80059f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059f4:	7afb      	ldrb	r3, [r7, #11]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6979      	ldr	r1, [r7, #20]
 8005a0c:	f002 f994 	bl	8007d38 <USB_EP0StartXfer>
 8005a10:	e008      	b.n	8005a24 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6979      	ldr	r1, [r7, #20]
 8005a20:	f001 ff46 	bl	80078b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b086      	sub	sp, #24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a3e:	7afb      	ldrb	r3, [r7, #11]
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	3338      	adds	r3, #56	; 0x38
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	3304      	adds	r3, #4
 8005a54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a6e:	7afb      	ldrb	r3, [r7, #11]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d102      	bne.n	8005a88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a88:	7afb      	ldrb	r3, [r7, #11]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	f002 f94a 	bl	8007d38 <USB_EP0StartXfer>
 8005aa4:	e008      	b.n	8005ab8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	f001 fefc 	bl	80078b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d901      	bls.n	8005ae0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e050      	b.n	8005b82 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da0f      	bge.n	8005b08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	f003 020f 	and.w	r2, r3, #15
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	3338      	adds	r3, #56	; 0x38
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	3304      	adds	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	705a      	strb	r2, [r3, #1]
 8005b06:	e00d      	b.n	8005b24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4413      	add	r3, r2
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_PCD_EP_SetStall+0x82>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e01e      	b.n	8005b82 <HAL_PCD_EP_SetStall+0xc0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f002 fad9 	bl	800810a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	b2d9      	uxtb	r1, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b72:	461a      	mov	r2, r3
 8005b74:	f002 fd18 	bl	80085a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d901      	bls.n	8005ba8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e042      	b.n	8005c2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	da0f      	bge.n	8005bd0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 020f 	and.w	r2, r3, #15
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	3338      	adds	r3, #56	; 0x38
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	705a      	strb	r2, [r3, #1]
 8005bce:	e00f      	b.n	8005bf0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	3304      	adds	r3, #4
 8005be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_PCD_EP_ClrStall+0x86>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e00e      	b.n	8005c2e <HAL_PCD_EP_ClrStall+0xa4>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f002 fae1 	bl	80081e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b08a      	sub	sp, #40	; 0x28
 8005c3a:	af02      	add	r7, sp, #8
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	3338      	adds	r3, #56	; 0x38
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4413      	add	r3, r2
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d901      	bls.n	8005c6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e06c      	b.n	8005d48 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d902      	bls.n	8005c8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3303      	adds	r3, #3
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c92:	e02b      	b.n	8005cec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	695a      	ldr	r2, [r3, #20]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d902      	bls.n	8005cb0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	3303      	adds	r3, #3
 8005cb4:	089b      	lsrs	r3, r3, #2
 8005cb6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68d9      	ldr	r1, [r3, #12]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	4603      	mov	r3, r0
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f002 f985 	bl	8007fde <USB_WritePacket>

    ep->xfer_buff  += len;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	441a      	add	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d809      	bhi.n	8005d16 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d203      	bcs.n	8005d16 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1be      	bne.n	8005c94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d811      	bhi.n	8005d46 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	2201      	movs	r2, #1
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	6939      	ldr	r1, [r7, #16]
 8005d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d42:	4013      	ands	r3, r2
 8005d44:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	333c      	adds	r3, #60	; 0x3c
 8005d68:	3304      	adds	r3, #4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	f040 80a0 	bne.w	8005ec8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a72      	ldr	r2, [pc, #456]	; (8005f60 <PCD_EP_OutXfrComplete_int+0x210>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f240 80dd 	bls.w	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80d7 	beq.w	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	461a      	mov	r2, r3
 8005db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dba:	6093      	str	r3, [r2, #8]
 8005dbc:	e0cb      	b.n	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d009      	beq.n	8005ddc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2320      	movs	r3, #32
 8005dd8:	6093      	str	r3, [r2, #8]
 8005dda:	e0bc      	b.n	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 80b7 	bne.w	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a5d      	ldr	r2, [pc, #372]	; (8005f60 <PCD_EP_OutXfrComplete_int+0x210>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d90f      	bls.n	8005e10 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	461a      	mov	r2, r3
 8005e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0c:	6093      	str	r3, [r2, #8]
 8005e0e:	e0a2      	b.n	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	1a9b      	subs	r3, r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e22:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	0159      	lsls	r1, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	440b      	add	r3, r1
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005e36:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4403      	add	r3, r0
 8005e46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005e4a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e5e:	6819      	ldr	r1, [r3, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4403      	add	r3, r0
 8005e6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4419      	add	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4403      	add	r3, r0
 8005e84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e88:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d114      	bne.n	8005eba <PCD_EP_OutXfrComplete_int+0x16a>
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d108      	bne.n	8005eba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	f002 fb77 	bl	80085a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f004 fab3 	bl	800a42c <HAL_PCD_DataOutStageCallback>
 8005ec6:	e046      	b.n	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a26      	ldr	r2, [pc, #152]	; (8005f64 <PCD_EP_OutXfrComplete_int+0x214>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d124      	bne.n	8005f1a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eec:	6093      	str	r3, [r2, #8]
 8005eee:	e032      	b.n	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	461a      	mov	r2, r3
 8005f08:	2320      	movs	r3, #32
 8005f0a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f004 fa8a 	bl	800a42c <HAL_PCD_DataOutStageCallback>
 8005f18:	e01d      	b.n	8005f56 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d114      	bne.n	8005f4a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d108      	bne.n	8005f4a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f42:	461a      	mov	r2, r3
 8005f44:	2100      	movs	r1, #0
 8005f46:	f002 fb2f 	bl	80085a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f004 fa6b 	bl	800a42c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	4f54300a 	.word	0x4f54300a
 8005f64:	4f54310a 	.word	0x4f54310a

08005f68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	333c      	adds	r3, #60	; 0x3c
 8005f80:	3304      	adds	r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d90e      	bls.n	8005fbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f004 fa23 	bl	800a408 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d90c      	bls.n	8005fe4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d108      	bne.n	8005fe4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2101      	movs	r1, #1
 8005fe0:	f002 fae2 	bl	80085a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	4f54300a 	.word	0x4f54300a

08005ff4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
 8006000:	4613      	mov	r3, r2
 8006002:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d107      	bne.n	8006022 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006012:	883b      	ldrh	r3, [r7, #0]
 8006014:	0419      	lsls	r1, r3, #16
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	430a      	orrs	r2, r1
 800601e:	629a      	str	r2, [r3, #40]	; 0x28
 8006020:	e028      	b.n	8006074 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	0c1b      	lsrs	r3, r3, #16
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	4413      	add	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]
 8006034:	e00d      	b.n	8006052 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	3340      	adds	r3, #64	; 0x40
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	0c1b      	lsrs	r3, r3, #16
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	4413      	add	r3, r2
 800604a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	3301      	adds	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
 8006052:	7bfa      	ldrb	r2, [r7, #15]
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	3b01      	subs	r3, #1
 8006058:	429a      	cmp	r2, r3
 800605a:	d3ec      	bcc.n	8006036 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800605c:	883b      	ldrh	r3, [r7, #0]
 800605e:	0418      	lsls	r0, r3, #16
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	3b01      	subs	r3, #1
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	4302      	orrs	r2, r0
 800606c:	3340      	adds	r3, #64	; 0x40
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	887a      	ldrh	r2, [r7, #2]
 8006094:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d6:	f043 0303 	orr.w	r3, r3, #3
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0cc      	b.n	800629a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006100:	4b68      	ldr	r3, [pc, #416]	; (80062a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d90c      	bls.n	8006128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610e:	4b65      	ldr	r3, [pc, #404]	; (80062a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006116:	4b63      	ldr	r3, [pc, #396]	; (80062a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	429a      	cmp	r2, r3
 8006122:	d001      	beq.n	8006128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e0b8      	b.n	800629a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d020      	beq.n	8006176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006140:	4b59      	ldr	r3, [pc, #356]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	4a58      	ldr	r2, [pc, #352]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800614a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006158:	4b53      	ldr	r3, [pc, #332]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4a52      	ldr	r2, [pc, #328]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006164:	4b50      	ldr	r3, [pc, #320]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	494d      	ldr	r1, [pc, #308]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	4313      	orrs	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d044      	beq.n	800620c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d107      	bne.n	800619a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800618a:	4b47      	ldr	r3, [pc, #284]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d119      	bne.n	80061ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e07f      	b.n	800629a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d003      	beq.n	80061aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d107      	bne.n	80061ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061aa:	4b3f      	ldr	r3, [pc, #252]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e06f      	b.n	800629a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ba:	4b3b      	ldr	r3, [pc, #236]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e067      	b.n	800629a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ca:	4b37      	ldr	r3, [pc, #220]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f023 0203 	bic.w	r2, r3, #3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4934      	ldr	r1, [pc, #208]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061dc:	f7fc ffac 	bl	8003138 <HAL_GetTick>
 80061e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e2:	e00a      	b.n	80061fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e4:	f7fc ffa8 	bl	8003138 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e04f      	b.n	800629a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 020c 	and.w	r2, r3, #12
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	429a      	cmp	r2, r3
 800620a:	d1eb      	bne.n	80061e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800620c:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <HAL_RCC_ClockConfig+0x1b8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d20c      	bcs.n	8006234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b22      	ldr	r3, [pc, #136]	; (80062a4 <HAL_RCC_ClockConfig+0x1b8>)
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006222:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e032      	b.n	800629a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d008      	beq.n	8006252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006240:	4b19      	ldr	r3, [pc, #100]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	4916      	ldr	r1, [pc, #88]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	4313      	orrs	r3, r2
 8006250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	490e      	ldr	r1, [pc, #56]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	4313      	orrs	r3, r2
 8006270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006272:	f000 f82d 	bl	80062d0 <HAL_RCC_GetSysClockFreq>
 8006276:	4602      	mov	r2, r0
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	091b      	lsrs	r3, r3, #4
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	490a      	ldr	r1, [pc, #40]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 8006284:	5ccb      	ldrb	r3, [r1, r3]
 8006286:	fa22 f303 	lsr.w	r3, r2, r3
 800628a:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 800628c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f7fc ff0c 	bl	80030b0 <HAL_InitTick>

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40023c00 	.word	0x40023c00
 80062a8:	40023800 	.word	0x40023800
 80062ac:	0800cdec 	.word	0x0800cdec
 80062b0:	20000000 	.word	0x20000000
 80062b4:	20000004 	.word	0x20000004

080062b8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80062bc:	4b03      	ldr	r3, [pc, #12]	; (80062cc <HAL_RCC_EnableCSS+0x14>)
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
}
 80062c2:	bf00      	nop
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	4247004c 	.word	0x4247004c

080062d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	607b      	str	r3, [r7, #4]
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	2300      	movs	r3, #0
 80062e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062e8:	4b67      	ldr	r3, [pc, #412]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 030c 	and.w	r3, r3, #12
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d00d      	beq.n	8006310 <HAL_RCC_GetSysClockFreq+0x40>
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	f200 80bd 	bhi.w	8006474 <HAL_RCC_GetSysClockFreq+0x1a4>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_RCC_GetSysClockFreq+0x34>
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d003      	beq.n	800630a <HAL_RCC_GetSysClockFreq+0x3a>
 8006302:	e0b7      	b.n	8006474 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006304:	4b61      	ldr	r3, [pc, #388]	; (800648c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006306:	60bb      	str	r3, [r7, #8]
       break;
 8006308:	e0b7      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800630a:	4b60      	ldr	r3, [pc, #384]	; (800648c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800630c:	60bb      	str	r3, [r7, #8]
      break;
 800630e:	e0b4      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006310:	4b5d      	ldr	r3, [pc, #372]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006318:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800631a:	4b5b      	ldr	r3, [pc, #364]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d04d      	beq.n	80063c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006326:	4b58      	ldr	r3, [pc, #352]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	099b      	lsrs	r3, r3, #6
 800632c:	461a      	mov	r2, r3
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006336:	f04f 0100 	mov.w	r1, #0
 800633a:	ea02 0800 	and.w	r8, r2, r0
 800633e:	ea03 0901 	and.w	r9, r3, r1
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	f04f 0300 	mov.w	r3, #0
 800634e:	014b      	lsls	r3, r1, #5
 8006350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006354:	0142      	lsls	r2, r0, #5
 8006356:	4610      	mov	r0, r2
 8006358:	4619      	mov	r1, r3
 800635a:	ebb0 0008 	subs.w	r0, r0, r8
 800635e:	eb61 0109 	sbc.w	r1, r1, r9
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	018b      	lsls	r3, r1, #6
 800636c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006370:	0182      	lsls	r2, r0, #6
 8006372:	1a12      	subs	r2, r2, r0
 8006374:	eb63 0301 	sbc.w	r3, r3, r1
 8006378:	f04f 0000 	mov.w	r0, #0
 800637c:	f04f 0100 	mov.w	r1, #0
 8006380:	00d9      	lsls	r1, r3, #3
 8006382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006386:	00d0      	lsls	r0, r2, #3
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	eb12 0208 	adds.w	r2, r2, r8
 8006390:	eb43 0309 	adc.w	r3, r3, r9
 8006394:	f04f 0000 	mov.w	r0, #0
 8006398:	f04f 0100 	mov.w	r1, #0
 800639c:	0299      	lsls	r1, r3, #10
 800639e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80063a2:	0290      	lsls	r0, r2, #10
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4610      	mov	r0, r2
 80063aa:	4619      	mov	r1, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	f7fa fc30 	bl	8000c18 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4613      	mov	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e04a      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c2:	4b31      	ldr	r3, [pc, #196]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	461a      	mov	r2, r3
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063d2:	f04f 0100 	mov.w	r1, #0
 80063d6:	ea02 0400 	and.w	r4, r2, r0
 80063da:	ea03 0501 	and.w	r5, r3, r1
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	014b      	lsls	r3, r1, #5
 80063ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063f0:	0142      	lsls	r2, r0, #5
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	1b00      	subs	r0, r0, r4
 80063f8:	eb61 0105 	sbc.w	r1, r1, r5
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	018b      	lsls	r3, r1, #6
 8006406:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800640a:	0182      	lsls	r2, r0, #6
 800640c:	1a12      	subs	r2, r2, r0
 800640e:	eb63 0301 	sbc.w	r3, r3, r1
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	00d9      	lsls	r1, r3, #3
 800641c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006420:	00d0      	lsls	r0, r2, #3
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	1912      	adds	r2, r2, r4
 8006428:	eb45 0303 	adc.w	r3, r5, r3
 800642c:	f04f 0000 	mov.w	r0, #0
 8006430:	f04f 0100 	mov.w	r1, #0
 8006434:	0299      	lsls	r1, r3, #10
 8006436:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800643a:	0290      	lsls	r0, r2, #10
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4610      	mov	r0, r2
 8006442:	4619      	mov	r1, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	461a      	mov	r2, r3
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	f7fa fbe4 	bl	8000c18 <__aeabi_uldivmod>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4613      	mov	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006458:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	3301      	adds	r3, #1
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006470:	60bb      	str	r3, [r7, #8]
      break;
 8006472:	e002      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006476:	60bb      	str	r3, [r7, #8]
      break;
 8006478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800647a:	68bb      	ldr	r3, [r7, #8]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006486:	bf00      	nop
 8006488:	40023800 	.word	0x40023800
 800648c:	00f42400 	.word	0x00f42400

08006490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000000 	.word	0x20000000

080064a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064ac:	f7ff fff0 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	0a9b      	lsrs	r3, r3, #10
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4903      	ldr	r1, [pc, #12]	; (80064cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40023800 	.word	0x40023800
 80064cc:	0800cdfc 	.word	0x0800cdfc

080064d0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064dc:	2b80      	cmp	r3, #128	; 0x80
 80064de:	d104      	bne.n	80064ea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80064e0:	f000 f80a 	bl	80064f8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80064e6:	2280      	movs	r2, #128	; 0x80
 80064e8:	701a      	strb	r2, [r3, #0]
  }
}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40023800 	.word	0x40023800
 80064f4:	4002380e 	.word	0x4002380e

080064f8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d010      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006528:	4b87      	ldr	r3, [pc, #540]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800652a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	4984      	ldr	r1, [pc, #528]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006538:	4313      	orrs	r3, r2
 800653a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8006546:	2301      	movs	r3, #1
 8006548:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006556:	4b7c      	ldr	r3, [pc, #496]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800655c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	4978      	ldr	r1, [pc, #480]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8083 	beq.w	800668c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
 800658a:	4b6f      	ldr	r3, [pc, #444]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	4a6e      	ldr	r2, [pc, #440]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006594:	6413      	str	r3, [r2, #64]	; 0x40
 8006596:	4b6c      	ldr	r3, [pc, #432]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065a2:	4b6a      	ldr	r3, [pc, #424]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a69      	ldr	r2, [pc, #420]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80065a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065ae:	f7fc fdc3 	bl	8003138 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065b4:	e008      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065b6:	f7fc fdbf 	bl	8003138 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e162      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065c8:	4b60      	ldr	r3, [pc, #384]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065d4:	4b5c      	ldr	r3, [pc, #368]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065dc:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d02f      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d028      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065f2:	4b55      	ldr	r3, [pc, #340]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fa:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065fc:	4b54      	ldr	r3, [pc, #336]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006602:	4b53      	ldr	r3, [pc, #332]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006608:	4a4f      	ldr	r2, [pc, #316]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800660e:	4b4e      	ldr	r3, [pc, #312]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b01      	cmp	r3, #1
 8006618:	d114      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800661a:	f7fc fd8d 	bl	8003138 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006620:	e00a      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006622:	f7fc fd89 	bl	8003138 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e12a      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006638:	4b43      	ldr	r3, [pc, #268]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0ee      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800664c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006650:	d10d      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006652:	4b3d      	ldr	r3, [pc, #244]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006666:	4938      	ldr	r1, [pc, #224]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006668:	4313      	orrs	r3, r2
 800666a:	608b      	str	r3, [r1, #8]
 800666c:	e005      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	4a35      	ldr	r2, [pc, #212]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006674:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006678:	6093      	str	r3, [r2, #8]
 800667a:	4b33      	ldr	r3, [pc, #204]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800667c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006686:	4930      	ldr	r1, [pc, #192]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006688:	4313      	orrs	r3, r2
 800668a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800669e:	4b2d      	ldr	r3, [pc, #180]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80066a0:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0310 	and.w	r3, r3, #16
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80066ae:	4b26      	ldr	r3, [pc, #152]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	4922      	ldr	r1, [pc, #136]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80066d0:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066d6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	491a      	ldr	r1, [pc, #104]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ee:	d101      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80066f0:	2301      	movs	r3, #1
 80066f2:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006706:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	490e      	ldr	r1, [pc, #56]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d004      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	f040 8091 	bne.w	8006848 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800672c:	f7fc fd04 	bl	8003138 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006732:	e013      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006734:	f7fc fd00 	bl	8003138 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d90c      	bls.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e0a3      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006746:	bf00      	nop
 8006748:	40023800 	.word	0x40023800
 800674c:	40007000 	.word	0x40007000
 8006750:	42470e40 	.word	0x42470e40
 8006754:	424711e0 	.word	0x424711e0
 8006758:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800675c:	4b4e      	ldr	r3, [pc, #312]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e5      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006768:	4a4c      	ldr	r2, [pc, #304]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d023      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d019      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d004      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ac:	d00e      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d019      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d115      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ca:	d110      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	019b      	lsls	r3, r3, #6
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	061b      	lsls	r3, r3, #24
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	071b      	lsls	r3, r3, #28
 80067e6:	492c      	ldr	r1, [pc, #176]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d010      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	019b      	lsls	r3, r3, #6
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	061b      	lsls	r3, r3, #24
 800680c:	431a      	orrs	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	071b      	lsls	r3, r3, #28
 8006814:	4920      	ldr	r1, [pc, #128]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800681c:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006822:	f7fc fc89 	bl	8003138 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006828:	e008      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800682a:	f7fc fc85 	bl	8003138 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e028      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800683c:	4b16      	ldr	r3, [pc, #88]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800685a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	490d      	ldr	r1, [pc, #52]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006864:	4313      	orrs	r3, r2
 8006866:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800687c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	4904      	ldr	r1, [pc, #16]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40023800 	.word	0x40023800
 800689c:	424710d8 	.word	0x424710d8
 80068a0:	42470068 	.word	0x42470068

080068a4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80068aa:	f7fc fc45 	bl	8003138 <HAL_GetTick>
 80068ae:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80068b0:	4b5d      	ldr	r3, [pc, #372]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a5c      	ldr	r2, [pc, #368]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80068b6:	f043 0301 	orr.w	r3, r3, #1
 80068ba:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068be:	f7fc fc3b 	bl	8003138 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e0a7      	b.n	8006a20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80068d0:	4b55      	ldr	r3, [pc, #340]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0f0      	beq.n	80068be <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80068dc:	4b52      	ldr	r3, [pc, #328]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a51      	ldr	r2, [pc, #324]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80068e8:	f7fc fc26 	bl	8003138 <HAL_GetTick>
 80068ec:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80068ee:	4b4e      	ldr	r3, [pc, #312]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80068f4:	e00a      	b.n	800690c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f6:	f7fc fc1f 	bl	8003138 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f241 3288 	movw	r2, #5000	; 0x1388
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e089      	b.n	8006a20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800690c:	4b46      	ldr	r3, [pc, #280]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 030c 	and.w	r3, r3, #12
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ee      	bne.n	80068f6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006918:	f7fc fc0e 	bl	8003138 <HAL_GetTick>
 800691c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800691e:	4b42      	ldr	r3, [pc, #264]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a41      	ldr	r2, [pc, #260]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 8006924:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8006928:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692c:	f7fc fc04 	bl	8003138 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	; 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e070      	b.n	8006a20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800693e:	4b3a      	ldr	r3, [pc, #232]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800694a:	f7fc fbf5 	bl	8003138 <HAL_GetTick>
 800694e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006950:	4b35      	ldr	r3, [pc, #212]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a34      	ldr	r2, [pc, #208]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 8006956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800695a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800695c:	e008      	b.n	8006970 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800695e:	f7fc fbeb 	bl	8003138 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e057      	b.n	8006a20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006970:	4b2d      	ldr	r3, [pc, #180]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f0      	bne.n	800695e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800697c:	f7fc fbdc 	bl	8003138 <HAL_GetTick>
 8006980:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8006982:	4b29      	ldr	r3, [pc, #164]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a28      	ldr	r2, [pc, #160]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 8006988:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800698c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006990:	f7fc fbd2 	bl	8003138 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e03e      	b.n	8006a20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80069a2:	4b21      	ldr	r3, [pc, #132]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_DeInit+0xec>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80069ae:	4b1e      	ldr	r3, [pc, #120]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069b0:	4a1e      	ldr	r2, [pc, #120]	; (8006a2c <HAL_RCC_DeInit+0x188>)
 80069b2:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80069b4:	4b1c      	ldr	r3, [pc, #112]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069b6:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <HAL_RCC_DeInit+0x188>)
 80069b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80069bc:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069c2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80069c6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80069c8:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069d2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80069d4:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069da:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80069de:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80069e0:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069ea:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80069ec:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f0:	4a0d      	ldr	r2, [pc, #52]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069f2:	f023 0301 	bic.w	r3, r3, #1
 80069f6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80069f8:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fc:	4a0a      	ldr	r2, [pc, #40]	; (8006a28 <HAL_RCC_DeInit+0x184>)
 80069fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a02:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <HAL_RCC_DeInit+0x18c>)
 8006a06:	4a0b      	ldr	r2, [pc, #44]	; (8006a34 <HAL_RCC_DeInit+0x190>)
 8006a08:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCC_DeInit+0x194>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fc fb4e 	bl	80030b0 <HAL_InitTick>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
  }
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	40023800 	.word	0x40023800
 8006a2c:	24003010 	.word	0x24003010
 8006a30:	20000000 	.word	0x20000000
 8006a34:	00f42400 	.word	0x00f42400
 8006a38:	20000004 	.word	0x20000004

08006a3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e270      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d075      	beq.n	8006b46 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a5a:	4ba3      	ldr	r3, [pc, #652]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d00c      	beq.n	8006a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a66:	4ba0      	ldr	r3, [pc, #640]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d112      	bne.n	8006a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a72:	4b9d      	ldr	r3, [pc, #628]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a7e:	d10b      	bne.n	8006a98 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a80:	4b99      	ldr	r3, [pc, #612]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d05b      	beq.n	8006b44 <HAL_RCC_OscConfig+0x108>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d157      	bne.n	8006b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e24b      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa0:	d106      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x74>
 8006aa2:	4b91      	ldr	r3, [pc, #580]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a90      	ldr	r2, [pc, #576]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	e01d      	b.n	8006aec <HAL_RCC_OscConfig+0xb0>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x98>
 8006aba:	4b8b      	ldr	r3, [pc, #556]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a8a      	ldr	r2, [pc, #552]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b88      	ldr	r3, [pc, #544]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a87      	ldr	r2, [pc, #540]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e00b      	b.n	8006aec <HAL_RCC_OscConfig+0xb0>
 8006ad4:	4b84      	ldr	r3, [pc, #528]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a83      	ldr	r2, [pc, #524]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	4b81      	ldr	r3, [pc, #516]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a80      	ldr	r2, [pc, #512]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d013      	beq.n	8006b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fc fb20 	bl	8003138 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006afc:	f7fc fb1c 	bl	8003138 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b64      	cmp	r3, #100	; 0x64
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e210      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0e:	4b76      	ldr	r3, [pc, #472]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCC_OscConfig+0xc0>
 8006b1a:	e014      	b.n	8006b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fc fb0c 	bl	8003138 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b24:	f7fc fb08 	bl	8003138 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b64      	cmp	r3, #100	; 0x64
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e1fc      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b36:	4b6c      	ldr	r3, [pc, #432]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0xe8>
 8006b42:	e000      	b.n	8006b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d063      	beq.n	8006c1a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b52:	4b65      	ldr	r3, [pc, #404]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b5e:	4b62      	ldr	r3, [pc, #392]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d11c      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b6a:	4b5f      	ldr	r3, [pc, #380]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d116      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b76:	4b5c      	ldr	r3, [pc, #368]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <HAL_RCC_OscConfig+0x152>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d001      	beq.n	8006b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e1d0      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8e:	4b56      	ldr	r3, [pc, #344]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4952      	ldr	r1, [pc, #328]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ba2:	e03a      	b.n	8006c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d020      	beq.n	8006bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bac:	4b4f      	ldr	r3, [pc, #316]	; (8006cec <HAL_RCC_OscConfig+0x2b0>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb2:	f7fc fac1 	bl	8003138 <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bba:	f7fc fabd 	bl	8003138 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e1b1      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bcc:	4b46      	ldr	r3, [pc, #280]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd8:	4b43      	ldr	r3, [pc, #268]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4940      	ldr	r1, [pc, #256]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	600b      	str	r3, [r1, #0]
 8006bec:	e015      	b.n	8006c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bee:	4b3f      	ldr	r3, [pc, #252]	; (8006cec <HAL_RCC_OscConfig+0x2b0>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf4:	f7fc faa0 	bl	8003138 <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bfc:	f7fc fa9c 	bl	8003138 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e190      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c0e:	4b36      	ldr	r3, [pc, #216]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1f0      	bne.n	8006bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d030      	beq.n	8006c88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d016      	beq.n	8006c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c2e:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <HAL_RCC_OscConfig+0x2b4>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c34:	f7fc fa80 	bl	8003138 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c3c:	f7fc fa7c 	bl	8003138 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e170      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4e:	4b26      	ldr	r3, [pc, #152]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCC_OscConfig+0x200>
 8006c5a:	e015      	b.n	8006c88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c5c:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <HAL_RCC_OscConfig+0x2b4>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c62:	f7fc fa69 	bl	8003138 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c6a:	f7fc fa65 	bl	8003138 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e159      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1f0      	bne.n	8006c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80a0 	beq.w	8006dd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c9a:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10f      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
 8006caa:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	4a0e      	ldr	r2, [pc, #56]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <HAL_RCC_OscConfig+0x2ac>)
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <HAL_RCC_OscConfig+0x2b8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d121      	bne.n	8006d16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cd2:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <HAL_RCC_OscConfig+0x2b8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a07      	ldr	r2, [pc, #28]	; (8006cf4 <HAL_RCC_OscConfig+0x2b8>)
 8006cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cde:	f7fc fa2b 	bl	8003138 <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce4:	e011      	b.n	8006d0a <HAL_RCC_OscConfig+0x2ce>
 8006ce6:	bf00      	nop
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	42470000 	.word	0x42470000
 8006cf0:	42470e80 	.word	0x42470e80
 8006cf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf8:	f7fc fa1e 	bl	8003138 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e112      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0a:	4b8b      	ldr	r3, [pc, #556]	; (8006f38 <HAL_RCC_OscConfig+0x4fc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d106      	bne.n	8006d2c <HAL_RCC_OscConfig+0x2f0>
 8006d1e:	4b87      	ldr	r3, [pc, #540]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	4a86      	ldr	r2, [pc, #536]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	6713      	str	r3, [r2, #112]	; 0x70
 8006d2a:	e01c      	b.n	8006d66 <HAL_RCC_OscConfig+0x32a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b05      	cmp	r3, #5
 8006d32:	d10c      	bne.n	8006d4e <HAL_RCC_OscConfig+0x312>
 8006d34:	4b81      	ldr	r3, [pc, #516]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	4a80      	ldr	r2, [pc, #512]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d3a:	f043 0304 	orr.w	r3, r3, #4
 8006d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d40:	4b7e      	ldr	r3, [pc, #504]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d44:	4a7d      	ldr	r2, [pc, #500]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4c:	e00b      	b.n	8006d66 <HAL_RCC_OscConfig+0x32a>
 8006d4e:	4b7b      	ldr	r3, [pc, #492]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	4a7a      	ldr	r2, [pc, #488]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5a:	4b78      	ldr	r3, [pc, #480]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a77      	ldr	r2, [pc, #476]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d60:	f023 0304 	bic.w	r3, r3, #4
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d015      	beq.n	8006d9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6e:	f7fc f9e3 	bl	8003138 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d74:	e00a      	b.n	8006d8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d76:	f7fc f9df 	bl	8003138 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e0d1      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8c:	4b6b      	ldr	r3, [pc, #428]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0ee      	beq.n	8006d76 <HAL_RCC_OscConfig+0x33a>
 8006d98:	e014      	b.n	8006dc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d9a:	f7fc f9cd 	bl	8003138 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da0:	e00a      	b.n	8006db8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006da2:	f7fc f9c9 	bl	8003138 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e0bb      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db8:	4b60      	ldr	r3, [pc, #384]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1ee      	bne.n	8006da2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d105      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dca:	4b5c      	ldr	r3, [pc, #368]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	4a5b      	ldr	r2, [pc, #364]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80a7 	beq.w	8006f2e <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006de0:	4b56      	ldr	r3, [pc, #344]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 030c 	and.w	r3, r3, #12
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d060      	beq.n	8006eae <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d145      	bne.n	8006e80 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df4:	4b52      	ldr	r3, [pc, #328]	; (8006f40 <HAL_RCC_OscConfig+0x504>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfa:	f7fc f99d 	bl	8003138 <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e00:	e008      	b.n	8006e14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e02:	f7fc f999 	bl	8003138 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e08d      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e14:	4b49      	ldr	r3, [pc, #292]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f0      	bne.n	8006e02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	019b      	lsls	r3, r3, #6
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	085b      	lsrs	r3, r3, #1
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	041b      	lsls	r3, r3, #16
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	061b      	lsls	r3, r3, #24
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	071b      	lsls	r3, r3, #28
 8006e4c:	493b      	ldr	r1, [pc, #236]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e52:	4b3b      	ldr	r3, [pc, #236]	; (8006f40 <HAL_RCC_OscConfig+0x504>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fc f96e 	bl	8003138 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e60:	f7fc f96a 	bl	8003138 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e05e      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e72:	4b32      	ldr	r3, [pc, #200]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCC_OscConfig+0x424>
 8006e7e:	e056      	b.n	8006f2e <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e80:	4b2f      	ldr	r3, [pc, #188]	; (8006f40 <HAL_RCC_OscConfig+0x504>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e86:	f7fc f957 	bl	8003138 <HAL_GetTick>
 8006e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8c:	e008      	b.n	8006ea0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e8e:	f7fc f953 	bl	8003138 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e047      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea0:	4b26      	ldr	r3, [pc, #152]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f0      	bne.n	8006e8e <HAL_RCC_OscConfig+0x452>
 8006eac:	e03f      	b.n	8006f2e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e03a      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006eba:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d030      	beq.n	8006f2a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d129      	bne.n	8006f2a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d122      	bne.n	8006f2a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006eea:	4013      	ands	r3, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ef0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d119      	bne.n	8006f2a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	3b01      	subs	r3, #1
 8006f04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d10f      	bne.n	8006f2a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d107      	bne.n	8006f2a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d001      	beq.n	8006f2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40007000 	.word	0x40007000
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	42470060 	.word	0x42470060

08006f44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f44:	b084      	sub	sp, #16
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	f107 001c 	add.w	r0, r7, #28
 8006f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d122      	bne.n	8006fa2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d105      	bne.n	8006f96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fb64 	bl	8008664 <USB_CoreReset>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73fb      	strb	r3, [r7, #15]
 8006fa0:	e01a      	b.n	8006fd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fb58 	bl	8008664 <USB_CoreReset>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d106      	bne.n	8006fcc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
 8006fca:	e005      	b.n	8006fd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d10b      	bne.n	8006ff6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f043 0206 	orr.w	r2, r3, #6
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f043 0220 	orr.w	r2, r3, #32
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007002:	b004      	add	sp, #16
 8007004:	4770      	bx	lr
	...

08007008 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d165      	bne.n	80070e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4a41      	ldr	r2, [pc, #260]	; (8007124 <USB_SetTurnaroundTime+0x11c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d906      	bls.n	8007032 <USB_SetTurnaroundTime+0x2a>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4a40      	ldr	r2, [pc, #256]	; (8007128 <USB_SetTurnaroundTime+0x120>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d202      	bcs.n	8007032 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800702c:	230f      	movs	r3, #15
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	e062      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4a3c      	ldr	r2, [pc, #240]	; (8007128 <USB_SetTurnaroundTime+0x120>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d306      	bcc.n	8007048 <USB_SetTurnaroundTime+0x40>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4a3b      	ldr	r2, [pc, #236]	; (800712c <USB_SetTurnaroundTime+0x124>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d202      	bcs.n	8007048 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007042:	230e      	movs	r3, #14
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	e057      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4a38      	ldr	r2, [pc, #224]	; (800712c <USB_SetTurnaroundTime+0x124>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d306      	bcc.n	800705e <USB_SetTurnaroundTime+0x56>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4a37      	ldr	r2, [pc, #220]	; (8007130 <USB_SetTurnaroundTime+0x128>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d202      	bcs.n	800705e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007058:	230d      	movs	r3, #13
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e04c      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	4a33      	ldr	r2, [pc, #204]	; (8007130 <USB_SetTurnaroundTime+0x128>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d306      	bcc.n	8007074 <USB_SetTurnaroundTime+0x6c>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4a32      	ldr	r2, [pc, #200]	; (8007134 <USB_SetTurnaroundTime+0x12c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d802      	bhi.n	8007074 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800706e:	230c      	movs	r3, #12
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	e041      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4a2f      	ldr	r2, [pc, #188]	; (8007134 <USB_SetTurnaroundTime+0x12c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d906      	bls.n	800708a <USB_SetTurnaroundTime+0x82>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4a2e      	ldr	r2, [pc, #184]	; (8007138 <USB_SetTurnaroundTime+0x130>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d802      	bhi.n	800708a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007084:	230b      	movs	r3, #11
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	e036      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	4a2a      	ldr	r2, [pc, #168]	; (8007138 <USB_SetTurnaroundTime+0x130>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d906      	bls.n	80070a0 <USB_SetTurnaroundTime+0x98>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4a29      	ldr	r2, [pc, #164]	; (800713c <USB_SetTurnaroundTime+0x134>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d802      	bhi.n	80070a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800709a:	230a      	movs	r3, #10
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	e02b      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4a26      	ldr	r2, [pc, #152]	; (800713c <USB_SetTurnaroundTime+0x134>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d906      	bls.n	80070b6 <USB_SetTurnaroundTime+0xae>
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4a25      	ldr	r2, [pc, #148]	; (8007140 <USB_SetTurnaroundTime+0x138>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d202      	bcs.n	80070b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80070b0:	2309      	movs	r3, #9
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e020      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <USB_SetTurnaroundTime+0x138>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d306      	bcc.n	80070cc <USB_SetTurnaroundTime+0xc4>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4a20      	ldr	r2, [pc, #128]	; (8007144 <USB_SetTurnaroundTime+0x13c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d802      	bhi.n	80070cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80070c6:	2308      	movs	r3, #8
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	e015      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <USB_SetTurnaroundTime+0x13c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d906      	bls.n	80070e2 <USB_SetTurnaroundTime+0xda>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <USB_SetTurnaroundTime+0x140>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d202      	bcs.n	80070e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070dc:	2307      	movs	r3, #7
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e00a      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070e2:	2306      	movs	r3, #6
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e007      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80070ee:	2309      	movs	r3, #9
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	e001      	b.n	80070f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070f4:	2309      	movs	r3, #9
 80070f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	029b      	lsls	r3, r3, #10
 800710c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007110:	431a      	orrs	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	00d8acbf 	.word	0x00d8acbf
 8007128:	00e4e1c0 	.word	0x00e4e1c0
 800712c:	00f42400 	.word	0x00f42400
 8007130:	01067380 	.word	0x01067380
 8007134:	011a499f 	.word	0x011a499f
 8007138:	01312cff 	.word	0x01312cff
 800713c:	014ca43f 	.word	0x014ca43f
 8007140:	016e3600 	.word	0x016e3600
 8007144:	01a6ab1f 	.word	0x01a6ab1f
 8007148:	01e84800 	.word	0x01e84800

0800714c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f043 0201 	orr.w	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d115      	bne.n	80071de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071be:	2001      	movs	r0, #1
 80071c0:	f7fb ffc6 	bl	8003150 <HAL_Delay>
      ms++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 f9bb 	bl	8008546 <USB_GetMode>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d01e      	beq.n	8007214 <USB_SetCurrentMode+0x84>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b31      	cmp	r3, #49	; 0x31
 80071da:	d9f0      	bls.n	80071be <USB_SetCurrentMode+0x2e>
 80071dc:	e01a      	b.n	8007214 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d115      	bne.n	8007210 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071f0:	2001      	movs	r0, #1
 80071f2:	f7fb ffad 	bl	8003150 <HAL_Delay>
      ms++;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 f9a2 	bl	8008546 <USB_GetMode>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <USB_SetCurrentMode+0x84>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b31      	cmp	r3, #49	; 0x31
 800720c:	d9f0      	bls.n	80071f0 <USB_SetCurrentMode+0x60>
 800720e:	e001      	b.n	8007214 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e005      	b.n	8007220 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b32      	cmp	r3, #50	; 0x32
 8007218:	d101      	bne.n	800721e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007228:	b084      	sub	sp, #16
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007242:	2300      	movs	r3, #0
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	e009      	b.n	800725c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	3340      	adds	r3, #64	; 0x40
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	2200      	movs	r2, #0
 8007254:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3301      	adds	r3, #1
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b0e      	cmp	r3, #14
 8007260:	d9f2      	bls.n	8007248 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d11c      	bne.n	80072a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007276:	f043 0302 	orr.w	r3, r3, #2
 800727a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e005      	b.n	80072ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072b4:	461a      	mov	r2, r3
 80072b6:	2300      	movs	r3, #0
 80072b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c0:	4619      	mov	r1, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c8:	461a      	mov	r2, r3
 80072ca:	680b      	ldr	r3, [r1, #0]
 80072cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d10c      	bne.n	80072ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d104      	bne.n	80072e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072da:	2100      	movs	r1, #0
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f945 	bl	800756c <USB_SetDevSpeed>
 80072e2:	e008      	b.n	80072f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80072e4:	2101      	movs	r1, #1
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f940 	bl	800756c <USB_SetDevSpeed>
 80072ec:	e003      	b.n	80072f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072ee:	2103      	movs	r1, #3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f93b 	bl	800756c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072f6:	2110      	movs	r1, #16
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f8f3 	bl	80074e4 <USB_FlushTxFifo>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f90f 	bl	800752c <USB_FlushRxFifo>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731e:	461a      	mov	r2, r3
 8007320:	2300      	movs	r3, #0
 8007322:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732a:	461a      	mov	r2, r3
 800732c:	2300      	movs	r3, #0
 800732e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	461a      	mov	r2, r3
 8007338:	2300      	movs	r3, #0
 800733a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800733c:	2300      	movs	r3, #0
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	e043      	b.n	80073ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007358:	d118      	bne.n	800738c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736c:	461a      	mov	r2, r3
 800736e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	e013      	b.n	800739e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	461a      	mov	r2, r3
 8007384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	e008      	b.n	800739e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007398:	461a      	mov	r2, r3
 800739a:	2300      	movs	r3, #0
 800739c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	461a      	mov	r2, r3
 80073ac:	2300      	movs	r3, #0
 80073ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073bc:	461a      	mov	r2, r3
 80073be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	3301      	adds	r3, #1
 80073c8:	613b      	str	r3, [r7, #16]
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d3b7      	bcc.n	8007342 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]
 80073d6:	e043      	b.n	8007460 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073ee:	d118      	bne.n	8007422 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10a      	bne.n	800740c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007402:	461a      	mov	r2, r3
 8007404:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	e013      	b.n	8007434 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	461a      	mov	r2, r3
 800741a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	e008      	b.n	8007434 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742e:	461a      	mov	r2, r3
 8007430:	2300      	movs	r3, #0
 8007432:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007440:	461a      	mov	r2, r3
 8007442:	2300      	movs	r3, #0
 8007444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	461a      	mov	r2, r3
 8007454:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007458:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3301      	adds	r3, #1
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d3b7      	bcc.n	80073d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800747a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007488:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	2b00      	cmp	r3, #0
 800748e:	d105      	bne.n	800749c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	f043 0210 	orr.w	r2, r3, #16
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699a      	ldr	r2, [r3, #24]
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <USB_DevInit+0x2b8>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f043 0208 	orr.w	r2, r3, #8
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d107      	bne.n	80074d0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074c8:	f043 0304 	orr.w	r3, r3, #4
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074dc:	b004      	add	sp, #16
 80074de:	4770      	bx	lr
 80074e0:	803c3800 	.word	0x803c3800

080074e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	019b      	lsls	r3, r3, #6
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3301      	adds	r3, #1
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	4a08      	ldr	r2, [pc, #32]	; (8007528 <USB_FlushTxFifo+0x44>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d901      	bls.n	800750e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e006      	b.n	800751c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b20      	cmp	r3, #32
 8007518:	d0f1      	beq.n	80074fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	00030d40 	.word	0x00030d40

0800752c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2210      	movs	r2, #16
 800753c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	4a08      	ldr	r2, [pc, #32]	; (8007568 <USB_FlushRxFifo+0x3c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d901      	bls.n	800754e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e006      	b.n	800755c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b10      	cmp	r3, #16
 8007558:	d0f1      	beq.n	800753e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	00030d40 	.word	0x00030d40

0800756c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800758c:	4313      	orrs	r3, r2
 800758e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800759e:	b480      	push	{r7}
 80075a0:	b087      	sub	sp, #28
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0306 	and.w	r3, r3, #6
 80075b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
 80075c2:	e00a      	b.n	80075da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d002      	beq.n	80075d0 <USB_GetDevSpeed+0x32>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d102      	bne.n	80075d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80075d0:	2302      	movs	r3, #2
 80075d2:	75fb      	strb	r3, [r7, #23]
 80075d4:	e001      	b.n	80075da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80075d6:	230f      	movs	r3, #15
 80075d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d13a      	bne.n	800767a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	2101      	movs	r1, #1
 8007616:	fa01 f303 	lsl.w	r3, r1, r3
 800761a:	b29b      	uxth	r3, r3
 800761c:	68f9      	ldr	r1, [r7, #12]
 800761e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007622:	4313      	orrs	r3, r2
 8007624:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d155      	bne.n	80076e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	78db      	ldrb	r3, [r3, #3]
 8007656:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007658:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	059b      	lsls	r3, r3, #22
 800765e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007660:	4313      	orrs	r3, r2
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e036      	b.n	80076e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	2101      	movs	r1, #1
 800768c:	fa01 f303 	lsl.w	r3, r1, r3
 8007690:	041b      	lsls	r3, r3, #16
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007698:	4313      	orrs	r3, r2
 800769a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11a      	bne.n	80076e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	78db      	ldrb	r3, [r3, #3]
 80076cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076ce:	430b      	orrs	r3, r1
 80076d0:	4313      	orrs	r3, r2
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d161      	bne.n	80077d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800772a:	d11f      	bne.n	800776c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	440a      	add	r2, r1
 8007742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800774a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	440a      	add	r2, r1
 8007762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800776a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	2101      	movs	r1, #1
 800777e:	fa01 f303 	lsl.w	r3, r1, r3
 8007782:	b29b      	uxth	r3, r3
 8007784:	43db      	mvns	r3, r3
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800778c:	4013      	ands	r3, r2
 800778e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	2101      	movs	r1, #1
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	43db      	mvns	r3, r3
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077b0:	4013      	ands	r3, r2
 80077b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	0159      	lsls	r1, r3, #5
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	440b      	add	r3, r1
 80077ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ce:	4619      	mov	r1, r3
 80077d0:	4b35      	ldr	r3, [pc, #212]	; (80078a8 <USB_DeactivateEndpoint+0x1b0>)
 80077d2:	4013      	ands	r3, r2
 80077d4:	600b      	str	r3, [r1, #0]
 80077d6:	e060      	b.n	800789a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ee:	d11f      	bne.n	8007830 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800780a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800780e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800782e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	2101      	movs	r1, #1
 8007842:	fa01 f303 	lsl.w	r3, r1, r3
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	43db      	mvns	r3, r3
 800784a:	68f9      	ldr	r1, [r7, #12]
 800784c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007850:	4013      	ands	r3, r2
 8007852:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	2101      	movs	r1, #1
 8007866:	fa01 f303 	lsl.w	r3, r1, r3
 800786a:	041b      	lsls	r3, r3, #16
 800786c:	43db      	mvns	r3, r3
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007874:	4013      	ands	r3, r2
 8007876:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	0159      	lsls	r1, r3, #5
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	440b      	add	r3, r1
 800788e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007892:	4619      	mov	r1, r3
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <USB_DeactivateEndpoint+0x1b4>)
 8007896:	4013      	ands	r3, r2
 8007898:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	ec337800 	.word	0xec337800
 80078ac:	eff37800 	.word	0xeff37800

080078b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	4613      	mov	r3, r2
 80078bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	f040 815c 	bne.w	8007b8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d132      	bne.n	8007940 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800791c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007938:	0cdb      	lsrs	r3, r3, #19
 800793a:	04db      	lsls	r3, r3, #19
 800793c:	6113      	str	r3, [r2, #16]
 800793e:	e074      	b.n	8007a2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795a:	0cdb      	lsrs	r3, r3, #19
 800795c:	04db      	lsls	r3, r3, #19
 800795e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800797a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800797e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007982:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007990:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6959      	ldr	r1, [r3, #20]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	440b      	add	r3, r1
 800799c:	1e59      	subs	r1, r3, #1
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80079a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80079a8:	4b9d      	ldr	r3, [pc, #628]	; (8007c20 <USB_EPStartXfer+0x370>)
 80079aa:	400b      	ands	r3, r1
 80079ac:	69b9      	ldr	r1, [r7, #24]
 80079ae:	0148      	lsls	r0, r1, #5
 80079b0:	69f9      	ldr	r1, [r7, #28]
 80079b2:	4401      	add	r1, r0
 80079b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079b8:	4313      	orrs	r3, r2
 80079ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079d2:	69b9      	ldr	r1, [r7, #24]
 80079d4:	0148      	lsls	r0, r1, #5
 80079d6:	69f9      	ldr	r1, [r7, #28]
 80079d8:	4401      	add	r1, r0
 80079da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079de:	4313      	orrs	r3, r2
 80079e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	78db      	ldrb	r3, [r3, #3]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d11f      	bne.n	8007a2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	0151      	lsls	r1, r2, #5
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	440a      	add	r2, r1
 8007a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d14b      	bne.n	8007ac8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d009      	beq.n	8007a4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	461a      	mov	r2, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	78db      	ldrb	r3, [r3, #3]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d128      	bne.n	8007aa6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d110      	bne.n	8007a86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	e00f      	b.n	8007aa6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	69fa      	ldr	r2, [r7, #28]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	e12f      	b.n	8007d28 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ae6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	78db      	ldrb	r3, [r3, #3]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d015      	beq.n	8007b1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8117 	beq.w	8007d28 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b10:	69f9      	ldr	r1, [r7, #28]
 8007b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b16:	4313      	orrs	r3, r2
 8007b18:	634b      	str	r3, [r1, #52]	; 0x34
 8007b1a:	e105      	b.n	8007d28 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d110      	bne.n	8007b4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	e00f      	b.n	8007b6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	68d9      	ldr	r1, [r3, #12]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	781a      	ldrb	r2, [r3, #0]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	b298      	uxth	r0, r3
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	4603      	mov	r3, r0
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fa2b 	bl	8007fde <USB_WritePacket>
 8007b88:	e0ce      	b.n	8007d28 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	0151      	lsls	r1, r2, #5
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	440a      	add	r2, r1
 8007ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba4:	0cdb      	lsrs	r3, r3, #19
 8007ba6:	04db      	lsls	r3, r3, #19
 8007ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	0151      	lsls	r1, r2, #5
 8007bbc:	69fa      	ldr	r2, [r7, #28]
 8007bbe:	440a      	add	r2, r1
 8007bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d126      	bne.n	8007c24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bec:	69b9      	ldr	r1, [r7, #24]
 8007bee:	0148      	lsls	r0, r1, #5
 8007bf0:	69f9      	ldr	r1, [r7, #28]
 8007bf2:	4401      	add	r1, r0
 8007bf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c1a:	6113      	str	r3, [r2, #16]
 8007c1c:	e036      	b.n	8007c8c <USB_EPStartXfer+0x3dc>
 8007c1e:	bf00      	nop
 8007c20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	695a      	ldr	r2, [r3, #20]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	1e5a      	subs	r2, r3, #1
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	8afb      	ldrh	r3, [r7, #22]
 8007c4a:	04d9      	lsls	r1, r3, #19
 8007c4c:	4b39      	ldr	r3, [pc, #228]	; (8007d34 <USB_EPStartXfer+0x484>)
 8007c4e:	400b      	ands	r3, r1
 8007c50:	69b9      	ldr	r1, [r7, #24]
 8007c52:	0148      	lsls	r0, r1, #5
 8007c54:	69f9      	ldr	r1, [r7, #28]
 8007c56:	4401      	add	r1, r0
 8007c58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	8af9      	ldrh	r1, [r7, #22]
 8007c74:	fb01 f303 	mul.w	r3, r1, r3
 8007c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c7c:	69b9      	ldr	r1, [r7, #24]
 8007c7e:	0148      	lsls	r0, r1, #5
 8007c80:	69f9      	ldr	r1, [r7, #28]
 8007c82:	4401      	add	r1, r0
 8007c84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10d      	bne.n	8007cae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d009      	beq.n	8007cae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	68d9      	ldr	r1, [r3, #12]
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	460a      	mov	r2, r1
 8007cac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	78db      	ldrb	r3, [r3, #3]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d128      	bne.n	8007d08 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d110      	bne.n	8007ce8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	0151      	lsls	r1, r2, #5
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	440a      	add	r2, r1
 8007cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	e00f      	b.n	8007d08 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3720      	adds	r7, #32
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	1ff80000 	.word	0x1ff80000

08007d38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	f040 80cd 	bne.w	8007ef4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d132      	bne.n	8007dc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	0151      	lsls	r1, r2, #5
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	440a      	add	r2, r1
 8007d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	0151      	lsls	r1, r2, #5
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	440a      	add	r2, r1
 8007d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007da4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc0:	0cdb      	lsrs	r3, r3, #19
 8007dc2:	04db      	lsls	r3, r3, #19
 8007dc4:	6113      	str	r3, [r2, #16]
 8007dc6:	e04e      	b.n	8007e66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de2:	0cdb      	lsrs	r3, r3, #19
 8007de4:	04db      	lsls	r3, r3, #19
 8007de6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	695a      	ldr	r2, [r3, #20]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d903      	bls.n	8007e20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	689a      	ldr	r2, [r3, #8]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4c:	691a      	ldr	r2, [r3, #16]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e56:	6939      	ldr	r1, [r7, #16]
 8007e58:	0148      	lsls	r0, r1, #5
 8007e5a:	6979      	ldr	r1, [r7, #20]
 8007e5c:	4401      	add	r1, r0
 8007e5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e62:	4313      	orrs	r3, r2
 8007e64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d11e      	bne.n	8007eaa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d009      	beq.n	8007e88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e80:	461a      	mov	r2, r3
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	e092      	b.n	8007fd0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ec8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d07e      	beq.n	8007fd0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee8:	6979      	ldr	r1, [r7, #20]
 8007eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	634b      	str	r3, [r1, #52]	; 0x34
 8007ef2:	e06d      	b.n	8007fd0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	0151      	lsls	r1, r2, #5
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	440a      	add	r2, r1
 8007f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f0e:	0cdb      	lsrs	r3, r3, #19
 8007f10:	04db      	lsls	r3, r3, #19
 8007f12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f36:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f74:	691a      	ldr	r2, [r3, #16]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f7e:	6939      	ldr	r1, [r7, #16]
 8007f80:	0148      	lsls	r0, r1, #5
 8007f82:	6979      	ldr	r1, [r7, #20]
 8007f84:	4401      	add	r1, r0
 8007f86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d10d      	bne.n	8007fb0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	68d9      	ldr	r1, [r3, #12]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fac:	460a      	mov	r2, r1
 8007fae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b089      	sub	sp, #36	; 0x24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	4611      	mov	r1, r2
 8007fea:	461a      	mov	r2, r3
 8007fec:	460b      	mov	r3, r1
 8007fee:	71fb      	strb	r3, [r7, #7]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008000:	2b00      	cmp	r3, #0
 8008002:	d123      	bne.n	800804c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008004:	88bb      	ldrh	r3, [r7, #4]
 8008006:	3303      	adds	r3, #3
 8008008:	089b      	lsrs	r3, r3, #2
 800800a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800800c:	2300      	movs	r3, #0
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	e018      	b.n	8008044 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	031a      	lsls	r2, r3, #12
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	4413      	add	r3, r2
 800801a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801e:	461a      	mov	r2, r3
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3301      	adds	r3, #1
 800802a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	3301      	adds	r3, #1
 8008030:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	3301      	adds	r3, #1
 8008036:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	3301      	adds	r3, #1
 800803c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	3301      	adds	r3, #1
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	429a      	cmp	r2, r3
 800804a:	d3e2      	bcc.n	8008012 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3724      	adds	r7, #36	; 0x24
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800805a:	b480      	push	{r7}
 800805c:	b08b      	sub	sp, #44	; 0x2c
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	4613      	mov	r3, r2
 8008066:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008070:	88fb      	ldrh	r3, [r7, #6]
 8008072:	089b      	lsrs	r3, r3, #2
 8008074:	b29b      	uxth	r3, r3
 8008076:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008078:	88fb      	ldrh	r3, [r7, #6]
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008080:	2300      	movs	r3, #0
 8008082:	623b      	str	r3, [r7, #32]
 8008084:	e014      	b.n	80080b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	601a      	str	r2, [r3, #0]
    pDest++;
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	3301      	adds	r3, #1
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	3301      	adds	r3, #1
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	3301      	adds	r3, #1
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	3301      	adds	r3, #1
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	3301      	adds	r3, #1
 80080ae:	623b      	str	r3, [r7, #32]
 80080b0:	6a3a      	ldr	r2, [r7, #32]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d3e6      	bcc.n	8008086 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080b8:	8bfb      	ldrh	r3, [r7, #30]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d01e      	beq.n	80080fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c8:	461a      	mov	r2, r3
 80080ca:	f107 0310 	add.w	r3, r7, #16
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	fa22 f303 	lsr.w	r3, r2, r3
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	701a      	strb	r2, [r3, #0]
      i++;
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	3301      	adds	r3, #1
 80080e8:	623b      	str	r3, [r7, #32]
      pDest++;
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	3301      	adds	r3, #1
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80080f0:	8bfb      	ldrh	r3, [r7, #30]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080f6:	8bfb      	ldrh	r3, [r7, #30]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1ea      	bne.n	80080d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080fe:	4618      	mov	r0, r3
 8008100:	372c      	adds	r7, #44	; 0x2c
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800810a:	b480      	push	{r7}
 800810c:	b085      	sub	sp, #20
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d12c      	bne.n	8008180 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	db12      	blt.n	800815e <USB_EPSetStall+0x54>
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	440a      	add	r2, r1
 8008154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800815c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	e02b      	b.n	80081d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	db12      	blt.n	80081b8 <USB_EPSetStall+0xae>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00f      	beq.n	80081b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d128      	bne.n	8008254 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	440a      	add	r2, r1
 8008218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008220:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	78db      	ldrb	r3, [r3, #3]
 8008226:	2b03      	cmp	r3, #3
 8008228:	d003      	beq.n	8008232 <USB_EPClearStall+0x4c>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	78db      	ldrb	r3, [r3, #3]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d138      	bne.n	80082a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	e027      	b.n	80082a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	0151      	lsls	r1, r2, #5
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	440a      	add	r2, r1
 800826a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800826e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008272:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	78db      	ldrb	r3, [r3, #3]
 8008278:	2b03      	cmp	r3, #3
 800827a:	d003      	beq.n	8008284 <USB_EPClearStall+0x9e>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	78db      	ldrb	r3, [r3, #3]
 8008280:	2b02      	cmp	r3, #2
 8008282:	d10f      	bne.n	80082a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	0151      	lsls	r1, r2, #5
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	440a      	add	r2, r1
 800829a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b086      	sub	sp, #24
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 80082be:	2300      	movs	r3, #0
 80082c0:	617b      	str	r3, [r7, #20]
 80082c2:	e016      	b.n	80082f2 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d0:	461a      	mov	r2, r3
 80082d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082d6:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	461a      	mov	r2, r3
 80082e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	3301      	adds	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b0e      	cmp	r3, #14
 80082f6:	d9e5      	bls.n	80082c4 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fe:	461a      	mov	r2, r3
 8008300:	2300      	movs	r3, #0
 8008302:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830a:	461a      	mov	r2, r3
 800830c:	2300      	movs	r3, #0
 800830e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008316:	461a      	mov	r2, r3
 8008318:	2300      	movs	r3, #0
 800831a:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff f905 	bl	800752c <USB_FlushRxFifo>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <USB_StopDevice+0x7e>
  {
    return ret;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	e00b      	b.n	8008348 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8008330:	2110      	movs	r1, #16
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff f8d6 	bl	80074e4 <USB_FlushTxFifo>
 8008338:	4603      	mov	r3, r0
 800833a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <USB_StopDevice+0x94>
  {
    return ret;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	e000      	b.n	8008348 <USB_StopDevice+0x96>
  }

  return ret;
 8008346:	7bfb      	ldrb	r3, [r7, #15]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800836e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008372:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008384:	68f9      	ldr	r1, [r7, #12]
 8008386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800838a:	4313      	orrs	r3, r2
 800838c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083b6:	f023 0303 	bic.w	r3, r3, #3
 80083ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ca:	f023 0302 	bic.w	r3, r3, #2
 80083ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4013      	ands	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008438:	68fb      	ldr	r3, [r7, #12]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	0c1b      	lsrs	r3, r3, #16
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	4013      	ands	r3, r2
 800849c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	b29b      	uxth	r3, r3
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	4013      	ands	r3, r2
 80084da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084dc:	68bb      	ldr	r3, [r7, #8]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b087      	sub	sp, #28
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	f003 030f 	and.w	r3, r3, #15
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	fa22 f303 	lsr.w	r3, r2, r3
 800851a:	01db      	lsls	r3, r3, #7
 800851c:	b2db      	uxtb	r3, r3
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4013      	ands	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008538:	68bb      	ldr	r3, [r7, #8]
}
 800853a:	4618      	mov	r0, r3
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	f003 0301 	and.w	r3, r3, #1
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	460b      	mov	r3, r1
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	333c      	adds	r3, #60	; 0x3c
 80085be:	3304      	adds	r3, #4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	4a26      	ldr	r2, [pc, #152]	; (8008660 <USB_EP0_OutStart+0xb8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d90a      	bls.n	80085e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085dc:	d101      	bne.n	80085e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e037      	b.n	8008652 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e8:	461a      	mov	r2, r3
 80085ea:	2300      	movs	r3, #0
 80085ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008610:	f043 0318 	orr.w	r3, r3, #24
 8008614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008624:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008628:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d10f      	bne.n	8008650 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800864a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800864e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	4f54300a 	.word	0x4f54300a

08008664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]
 8008676:	4a13      	ldr	r2, [pc, #76]	; (80086c4 <USB_CoreReset+0x60>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d901      	bls.n	8008680 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e01a      	b.n	80086b6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	daf3      	bge.n	8008670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f043 0201 	orr.w	r2, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <USB_CoreReset+0x60>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d901      	bls.n	80086a8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e006      	b.n	80086b6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d0f1      	beq.n	8008698 <USB_CoreReset+0x34>

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	00030d40 	.word	0x00030d40

080086c8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80086d4:	2024      	movs	r0, #36	; 0x24
 80086d6:	f002 f97f 	bl	800a9d8 <USBD_static_malloc>
 80086da:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d105      	bne.n	80086ee <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80086ea:	2302      	movs	r3, #2
 80086ec:	e039      	b.n	8008762 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7c1b      	ldrb	r3, [r3, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d107      	bne.n	800870e <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2205      	movs	r2, #5
 8008702:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2205      	movs	r2, #5
 8008708:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800870c:	e006      	b.n	800871c <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800871c:	2340      	movs	r3, #64	; 0x40
 800871e:	2203      	movs	r2, #3
 8008720:	2181      	movs	r1, #129	; 0x81
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fff9 	bl	800a71a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800872e:	2340      	movs	r3, #64	; 0x40
 8008730:	2203      	movs	r2, #3
 8008732:	2101      	movs	r1, #1
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 fff0 	bl	800a71a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	230d      	movs	r3, #13
 8008758:	2101      	movs	r1, #1
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f002 f8cc 	bl	800a8f8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008776:	2181      	movs	r1, #129	; 0x81
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 fff4 	bl	800a766 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800878a:	2101      	movs	r1, #1
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 ffea 	bl	800a766 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00e      	beq.n	80087ca <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 f919 	bl	800a9f4 <USBD_static_free>
    pdev->pClassData = NULL;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087e4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e0ed      	b.n	80089dc <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008808:	2b00      	cmp	r3, #0
 800880a:	d052      	beq.n	80088b2 <USBD_CUSTOM_HID_Setup+0xde>
 800880c:	2b20      	cmp	r3, #32
 800880e:	f040 80dd 	bne.w	80089cc <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	3b02      	subs	r3, #2
 8008818:	2b09      	cmp	r3, #9
 800881a:	d842      	bhi.n	80088a2 <USBD_CUSTOM_HID_Setup+0xce>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBD_CUSTOM_HID_Setup+0x50>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	0800887d 	.word	0x0800887d
 8008828:	0800885b 	.word	0x0800885b
 800882c:	080088a3 	.word	0x080088a3
 8008830:	080088a3 	.word	0x080088a3
 8008834:	080088a3 	.word	0x080088a3
 8008838:	080088a3 	.word	0x080088a3
 800883c:	080088a3 	.word	0x080088a3
 8008840:	0800888d 	.word	0x0800888d
 8008844:	0800886b 	.word	0x0800886b
 8008848:	0800884d 	.word	0x0800884d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	885b      	ldrh	r3, [r3, #2]
 8008850:	b2db      	uxtb	r3, r3
 8008852:	461a      	mov	r2, r3
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	611a      	str	r2, [r3, #16]
          break;
 8008858:	e02a      	b.n	80088b0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	3310      	adds	r3, #16
 800885e:	2201      	movs	r2, #1
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fb2d 	bl	8009ec2 <USBD_CtlSendData>
          break;
 8008868:	e022      	b.n	80088b0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	885b      	ldrh	r3, [r3, #2]
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	b29b      	uxth	r3, r3
 8008872:	b2db      	uxtb	r3, r3
 8008874:	461a      	mov	r2, r3
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	615a      	str	r2, [r3, #20]
          break;
 800887a:	e019      	b.n	80088b0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	3314      	adds	r3, #20
 8008880:	2201      	movs	r2, #1
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 fb1c 	bl	8009ec2 <USBD_CtlSendData>
          break;
 800888a:	e011      	b.n	80088b0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	2201      	movs	r2, #1
 8008890:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008892:	6939      	ldr	r1, [r7, #16]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	88db      	ldrh	r3, [r3, #6]
 8008898:	461a      	mov	r2, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 fb3d 	bl	8009f1a <USBD_CtlPrepareRx>
          break;
 80088a0:	e006      	b.n	80088b0 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 fa9b 	bl	8009de0 <USBD_CtlError>
          ret = USBD_FAIL;
 80088aa:	2303      	movs	r3, #3
 80088ac:	75fb      	strb	r3, [r7, #23]
          break;
 80088ae:	bf00      	nop
      }
      break;
 80088b0:	e093      	b.n	80089da <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	785b      	ldrb	r3, [r3, #1]
 80088b6:	2b0b      	cmp	r3, #11
 80088b8:	d87f      	bhi.n	80089ba <USBD_CUSTOM_HID_Setup+0x1e6>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <USBD_CUSTOM_HID_Setup+0xec>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088f1 	.word	0x080088f1
 80088c4:	080089c9 	.word	0x080089c9
 80088c8:	080089bb 	.word	0x080089bb
 80088cc:	080089bb 	.word	0x080089bb
 80088d0:	080089bb 	.word	0x080089bb
 80088d4:	080089bb 	.word	0x080089bb
 80088d8:	0800891b 	.word	0x0800891b
 80088dc:	080089bb 	.word	0x080089bb
 80088e0:	080089bb 	.word	0x080089bb
 80088e4:	080089bb 	.word	0x080089bb
 80088e8:	08008969 	.word	0x08008969
 80088ec:	08008993 	.word	0x08008993
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d107      	bne.n	800890c <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088fc:	f107 030e 	add.w	r3, r7, #14
 8008900:	2202      	movs	r2, #2
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 fadc 	bl	8009ec2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800890a:	e05e      	b.n	80089ca <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 fa66 	bl	8009de0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008914:	2303      	movs	r3, #3
 8008916:	75fb      	strb	r3, [r7, #23]
          break;
 8008918:	e057      	b.n	80089ca <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	885b      	ldrh	r3, [r3, #2]
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b22      	cmp	r3, #34	; 0x22
 8008924:	d10b      	bne.n	800893e <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	88db      	ldrh	r3, [r3, #6]
 800892a:	2b42      	cmp	r3, #66	; 0x42
 800892c:	bf28      	it	cs
 800892e:	2342      	movcs	r3, #66	; 0x42
 8008930:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	61bb      	str	r3, [r7, #24]
 800893c:	e00d      	b.n	800895a <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	885b      	ldrh	r3, [r3, #2]
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	b29b      	uxth	r3, r3
 8008946:	2b21      	cmp	r3, #33	; 0x21
 8008948:	d107      	bne.n	800895a <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800894a:	4b26      	ldr	r3, [pc, #152]	; (80089e4 <USBD_CUSTOM_HID_Setup+0x210>)
 800894c:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	88db      	ldrh	r3, [r3, #6]
 8008952:	2b09      	cmp	r3, #9
 8008954:	bf28      	it	cs
 8008956:	2309      	movcs	r3, #9
 8008958:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800895a:	8bfb      	ldrh	r3, [r7, #30]
 800895c:	461a      	mov	r2, r3
 800895e:	69b9      	ldr	r1, [r7, #24]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 faae 	bl	8009ec2 <USBD_CtlSendData>
          break;
 8008966:	e030      	b.n	80089ca <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b03      	cmp	r3, #3
 8008972:	d107      	bne.n	8008984 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	3318      	adds	r3, #24
 8008978:	2201      	movs	r2, #1
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 faa0 	bl	8009ec2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008982:	e022      	b.n	80089ca <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 fa2a 	bl	8009de0 <USBD_CtlError>
            ret = USBD_FAIL;
 800898c:	2303      	movs	r3, #3
 800898e:	75fb      	strb	r3, [r7, #23]
          break;
 8008990:	e01b      	b.n	80089ca <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b03      	cmp	r3, #3
 800899c:	d106      	bne.n	80089ac <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	885b      	ldrh	r3, [r3, #2]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089aa:	e00e      	b.n	80089ca <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fa16 	bl	8009de0 <USBD_CtlError>
            ret = USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	75fb      	strb	r3, [r7, #23]
          break;
 80089b8:	e007      	b.n	80089ca <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 fa0f 	bl	8009de0 <USBD_CtlError>
          ret = USBD_FAIL;
 80089c2:	2303      	movs	r3, #3
 80089c4:	75fb      	strb	r3, [r7, #23]
          break;
 80089c6:	e000      	b.n	80089ca <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 80089c8:	bf00      	nop
      }
      break;
 80089ca:	e006      	b.n	80089da <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fa06 	bl	8009de0 <USBD_CtlError>
      ret = USBD_FAIL;
 80089d4:	2303      	movs	r3, #3
 80089d6:	75fb      	strb	r3, [r7, #23]
      break;
 80089d8:	bf00      	nop
  }
  return (uint8_t)ret;
 80089da:	7dfb      	ldrb	r3, [r7, #23]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3720      	adds	r7, #32
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200000c8 	.word	0x200000c8

080089e8 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e01c      	b.n	8008a3e <USBD_CUSTOM_HID_SendReport+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a0a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d111      	bne.n	8008a3c <USBD_CUSTOM_HID_SendReport+0x54>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10a      	bne.n	8008a38 <USBD_CUSTOM_HID_SendReport+0x50>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	2181      	movs	r1, #129	; 0x81
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f001 ff40 	bl	800a8b6 <USBD_LL_Transmit>
 8008a36:	e001      	b.n	8008a3c <USBD_CUSTOM_HID_SendReport+0x54>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e000      	b.n	8008a3e <USBD_CUSTOM_HID_SendReport+0x56>
    }
  }
  return (uint8_t)USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2229      	movs	r2, #41	; 0x29
 8008a54:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8008a56:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	20000044 	.word	0x20000044

08008a68 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2229      	movs	r2, #41	; 0x29
 8008a74:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8008a76:	4b03      	ldr	r3, [pc, #12]	; (8008a84 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	20000070 	.word	0x20000070

08008a88 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2229      	movs	r2, #41	; 0x29
 8008a94:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008a96:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	2000009c 	.word	0x2000009c

08008aa8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e00b      	b.n	8008b00 <USBD_CUSTOM_HID_DataOut+0x32>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aee:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4610      	mov	r0, r2
 8008afc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e00a      	b.n	8008b34 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	230d      	movs	r3, #13
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f001 fee3 	bl	800a8f8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b4a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e00e      	b.n	8008b74 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  }

  if (hhid->IsReportAvailable == 1U)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d109      	bne.n	8008b72 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	220a      	movs	r2, #10
 8008b88:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008b8a:	4b03      	ldr	r3, [pc, #12]	; (8008b98 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	200000d4 	.word	0x200000d4

08008b9c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e004      	b.n	8008bba <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008bdc:	4817      	ldr	r0, [pc, #92]	; (8008c3c <USBD_Init+0x74>)
 8008bde:	f001 ff7f 	bl	800aae0 <iprintf>
 8008be2:	4817      	ldr	r0, [pc, #92]	; (8008c40 <USBD_Init+0x78>)
 8008be4:	f001 ff7c 	bl	800aae0 <iprintf>
 8008be8:	200a      	movs	r0, #10
 8008bea:	f001 ff91 	bl	800ab10 <putchar>
#endif
    return USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e01f      	b.n	8008c32 <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	79fa      	ldrb	r2, [r7, #7]
 8008c24:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f001 fcd6 	bl	800a5d8 <USBD_LL_Init>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0800cda0 	.word	0x0800cda0
 8008c40:	0800cda8 	.word	0x0800cda8

08008c44 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 fd49 	bl	800a6e4 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d011      	beq.n	8008c88 <USBD_DeInit+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6852      	ldr	r2, [r2, #4]
 8008c70:	b2d2      	uxtb	r2, r2
 8008c72:	4611      	mov	r1, r2
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	4798      	blx	r3
    pdev->pClass = NULL;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData = NULL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 fced 	bl	800a678 <USBD_LL_DeInit>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  return ret;
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8008cc0:	4812      	ldr	r0, [pc, #72]	; (8008d0c <USBD_RegisterClass+0x60>)
 8008cc2:	f001 ff0d 	bl	800aae0 <iprintf>
 8008cc6:	4812      	ldr	r0, [pc, #72]	; (8008d10 <USBD_RegisterClass+0x64>)
 8008cc8:	f001 ff0a 	bl	800aae0 <iprintf>
 8008ccc:	200a      	movs	r0, #10
 8008cce:	f001 ff1f 	bl	800ab10 <putchar>
#endif
    return USBD_FAIL;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e016      	b.n	8008d04 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00b      	beq.n	8008d02 <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	f107 020e 	add.w	r2, r7, #14
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	4798      	blx	r3
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	0800cda0 	.word	0x0800cda0
 8008d10:	0800cdc0 	.word	0x0800cdc0

08008d14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 fcc6 	bl	800a6ae <USBD_LL_Start>
 8008d22:	4603      	mov	r3, r0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fcd5 	bl	800a6e4 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d009      	beq.n	8008d58 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	6852      	ldr	r2, [r2, #4]
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	4611      	mov	r1, r2
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
  }

  return USBD_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d009      	beq.n	8008da6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	78fa      	ldrb	r2, [r7, #3]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
 8008da2:	4603      	mov	r3, r0
 8008da4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	4798      	blx	r3
  }

  return USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 ffba 	bl	8009d6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008e06:	461a      	mov	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e14:	f003 031f 	and.w	r3, r3, #31
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d01a      	beq.n	8008e52 <USBD_LL_SetupStage+0x72>
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d822      	bhi.n	8008e66 <USBD_LL_SetupStage+0x86>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <USBD_LL_SetupStage+0x4a>
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d00a      	beq.n	8008e3e <USBD_LL_SetupStage+0x5e>
 8008e28:	e01d      	b.n	8008e66 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa62 	bl	80092fc <USBD_StdDevReq>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3c:	e020      	b.n	8008e80 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fac6 	bl	80093d8 <USBD_StdItfReq>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e50:	e016      	b.n	8008e80 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fb05 	bl	800946a <USBD_StdEPReq>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
      break;
 8008e64:	e00c      	b.n	8008e80 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 fc95 	bl	800a7a4 <USBD_LL_StallEP>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7e:	bf00      	nop
  }

  return ret;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b086      	sub	sp, #24
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	460b      	mov	r3, r1
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e98:	7afb      	ldrb	r3, [r7, #11]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d138      	bne.n	8008f10 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ea4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d14a      	bne.n	8008f46 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d913      	bls.n	8008ee4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	689a      	ldr	r2, [r3, #8]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	1ad2      	subs	r2, r2, r3
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	bf28      	it	cs
 8008ed6:	4613      	movcs	r3, r2
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f001 f839 	bl	8009f54 <USBD_CtlContinueRx>
 8008ee2:	e030      	b.n	8008f46 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d10b      	bne.n	8008f08 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f001 f834 	bl	8009f76 <USBD_CtlSendStatus>
 8008f0e:	e01a      	b.n	8008f46 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d114      	bne.n	8008f46 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00e      	beq.n	8008f46 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	7afa      	ldrb	r2, [r7, #11]
 8008f32:	4611      	mov	r1, r2
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	4798      	blx	r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	e000      	b.n	8008f48 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d16b      	bne.n	800903c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3314      	adds	r3, #20
 8008f68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d156      	bne.n	8009022 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d914      	bls.n	8008faa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	1ad2      	subs	r2, r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	461a      	mov	r2, r3
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 ffae 	bl	8009ef8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f001 fca8 	bl	800a8f8 <USBD_LL_PrepareReceive>
 8008fa8:	e03b      	b.n	8009022 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d11c      	bne.n	8008ff0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d316      	bcc.n	8008ff0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d20f      	bcs.n	8008ff0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 ff8f 	bl	8009ef8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f001 fc85 	bl	800a8f8 <USBD_LL_PrepareReceive>
 8008fee:	e018      	b.n	8009022 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d10b      	bne.n	8009014 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d005      	beq.n	8009014 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009014:	2180      	movs	r1, #128	; 0x80
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f001 fbc4 	bl	800a7a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 ffbd 	bl	8009f9c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009028:	2b01      	cmp	r3, #1
 800902a:	d122      	bne.n	8009072 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f7ff fe98 	bl	8008d62 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800903a:	e01a      	b.n	8009072 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b03      	cmp	r3, #3
 8009046:	d114      	bne.n	8009072 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00e      	beq.n	8009072 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	7afa      	ldrb	r2, [r7, #11]
 800905e:	4611      	mov	r1, r2
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	4798      	blx	r3
 8009064:	4603      	mov	r3, r0
 8009066:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	e000      	b.n	8009074 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e02f      	b.n	8009110 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00f      	beq.n	80090da <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d009      	beq.n	80090da <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6852      	ldr	r2, [r2, #4]
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	4611      	mov	r1, r2
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090da:	2340      	movs	r3, #64	; 0x40
 80090dc:	2200      	movs	r2, #0
 80090de:	2100      	movs	r1, #0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f001 fb1a 	bl	800a71a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2240      	movs	r2, #64	; 0x40
 80090f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	2200      	movs	r2, #0
 80090fa:	2180      	movs	r1, #128	; 0x80
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fb0c 	bl	800a71a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2240      	movs	r2, #64	; 0x40
 800910c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009146:	b2da      	uxtb	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2204      	movs	r2, #4
 8009152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b04      	cmp	r3, #4
 8009176:	d106      	bne.n	8009186 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800917e:	b2da      	uxtb	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e012      	b.n	80091d0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d10b      	bne.n	80091ce <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d005      	beq.n	80091ce <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e014      	b.n	800921c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d10d      	bne.n	800921a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d007      	beq.n	800921a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	4611      	mov	r1, r2
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800923a:	2303      	movs	r3, #3
 800923c:	e014      	b.n	8009268 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b03      	cmp	r3, #3
 8009248:	d10d      	bne.n	8009266 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929c:	2b00      	cmp	r3, #0
 800929e:	d009      	beq.n	80092b4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	6852      	ldr	r2, [r2, #4]
 80092ac:	b2d2      	uxtb	r2, r2
 80092ae:	4611      	mov	r1, r2
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4798      	blx	r3
  }

  return USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80092be:	b480      	push	{r7}
 80092c0:	b087      	sub	sp, #28
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	3301      	adds	r3, #1
 80092d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80092dc:	8a3b      	ldrh	r3, [r7, #16]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	b21a      	sxth	r2, r3
 80092e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	b21b      	sxth	r3, r3
 80092ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80092ec:	89fb      	ldrh	r3, [r7, #14]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009312:	2b40      	cmp	r3, #64	; 0x40
 8009314:	d005      	beq.n	8009322 <USBD_StdDevReq+0x26>
 8009316:	2b40      	cmp	r3, #64	; 0x40
 8009318:	d853      	bhi.n	80093c2 <USBD_StdDevReq+0xc6>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00b      	beq.n	8009336 <USBD_StdDevReq+0x3a>
 800931e:	2b20      	cmp	r3, #32
 8009320:	d14f      	bne.n	80093c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
      break;
 8009334:	e04a      	b.n	80093cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	2b09      	cmp	r3, #9
 800933c:	d83b      	bhi.n	80093b6 <USBD_StdDevReq+0xba>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <USBD_StdDevReq+0x48>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	08009399 	.word	0x08009399
 8009348:	080093ad 	.word	0x080093ad
 800934c:	080093b7 	.word	0x080093b7
 8009350:	080093a3 	.word	0x080093a3
 8009354:	080093b7 	.word	0x080093b7
 8009358:	08009377 	.word	0x08009377
 800935c:	0800936d 	.word	0x0800936d
 8009360:	080093b7 	.word	0x080093b7
 8009364:	0800938f 	.word	0x0800938f
 8009368:	08009381 	.word	0x08009381
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f9de 	bl	8009730 <USBD_GetDescriptor>
          break;
 8009374:	e024      	b.n	80093c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fb6d 	bl	8009a58 <USBD_SetAddress>
          break;
 800937e:	e01f      	b.n	80093c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fbac 	bl	8009ae0 <USBD_SetConfig>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]
          break;
 800938c:	e018      	b.n	80093c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fc4b 	bl	8009c2c <USBD_GetConfig>
          break;
 8009396:	e013      	b.n	80093c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fc7c 	bl	8009c98 <USBD_GetStatus>
          break;
 80093a0:	e00e      	b.n	80093c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fcab 	bl	8009d00 <USBD_SetFeature>
          break;
 80093aa:	e009      	b.n	80093c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fcba 	bl	8009d28 <USBD_ClrFeature>
          break;
 80093b4:	e004      	b.n	80093c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fd11 	bl	8009de0 <USBD_CtlError>
          break;
 80093be:	bf00      	nop
      }
      break;
 80093c0:	e004      	b.n	80093cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fd0b 	bl	8009de0 <USBD_CtlError>
      break;
 80093ca:	bf00      	nop
  }

  return ret;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop

080093d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093ee:	2b40      	cmp	r3, #64	; 0x40
 80093f0:	d005      	beq.n	80093fe <USBD_StdItfReq+0x26>
 80093f2:	2b40      	cmp	r3, #64	; 0x40
 80093f4:	d82f      	bhi.n	8009456 <USBD_StdItfReq+0x7e>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <USBD_StdItfReq+0x26>
 80093fa:	2b20      	cmp	r3, #32
 80093fc:	d12b      	bne.n	8009456 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009404:	b2db      	uxtb	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	2b02      	cmp	r3, #2
 800940a:	d81d      	bhi.n	8009448 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	889b      	ldrh	r3, [r3, #4]
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b01      	cmp	r3, #1
 8009414:	d813      	bhi.n	800943e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	4798      	blx	r3
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	88db      	ldrh	r3, [r3, #6]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d110      	bne.n	8009452 <USBD_StdItfReq+0x7a>
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10d      	bne.n	8009452 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fd9d 	bl	8009f76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800943c:	e009      	b.n	8009452 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fccd 	bl	8009de0 <USBD_CtlError>
          break;
 8009446:	e004      	b.n	8009452 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fcc8 	bl	8009de0 <USBD_CtlError>
          break;
 8009450:	e000      	b.n	8009454 <USBD_StdItfReq+0x7c>
          break;
 8009452:	bf00      	nop
      }
      break;
 8009454:	e004      	b.n	8009460 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fcc1 	bl	8009de0 <USBD_CtlError>
      break;
 800945e:	bf00      	nop
  }

  return ret;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	889b      	ldrh	r3, [r3, #4]
 800947c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d007      	beq.n	800949a <USBD_StdEPReq+0x30>
 800948a:	2b40      	cmp	r3, #64	; 0x40
 800948c:	f200 8145 	bhi.w	800971a <USBD_StdEPReq+0x2b0>
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00c      	beq.n	80094ae <USBD_StdEPReq+0x44>
 8009494:	2b20      	cmp	r3, #32
 8009496:	f040 8140 	bne.w	800971a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
      break;
 80094ac:	e13a      	b.n	8009724 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d007      	beq.n	80094c6 <USBD_StdEPReq+0x5c>
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	f300 8129 	bgt.w	800970e <USBD_StdEPReq+0x2a4>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d07f      	beq.n	80095c0 <USBD_StdEPReq+0x156>
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d03c      	beq.n	800953e <USBD_StdEPReq+0xd4>
 80094c4:	e123      	b.n	800970e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d002      	beq.n	80094d8 <USBD_StdEPReq+0x6e>
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d016      	beq.n	8009504 <USBD_StdEPReq+0x9a>
 80094d6:	e02c      	b.n	8009532 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00d      	beq.n	80094fa <USBD_StdEPReq+0x90>
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	2b80      	cmp	r3, #128	; 0x80
 80094e2:	d00a      	beq.n	80094fa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 f95b 	bl	800a7a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ee:	2180      	movs	r1, #128	; 0x80
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 f957 	bl	800a7a4 <USBD_LL_StallEP>
 80094f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094f8:	e020      	b.n	800953c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fc6f 	bl	8009de0 <USBD_CtlError>
              break;
 8009502:	e01b      	b.n	800953c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	885b      	ldrh	r3, [r3, #2]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10e      	bne.n	800952a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <USBD_StdEPReq+0xc0>
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	2b80      	cmp	r3, #128	; 0x80
 8009516:	d008      	beq.n	800952a <USBD_StdEPReq+0xc0>
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	88db      	ldrh	r3, [r3, #6]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d104      	bne.n	800952a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f93d 	bl	800a7a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fd23 	bl	8009f76 <USBD_CtlSendStatus>

              break;
 8009530:	e004      	b.n	800953c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fc53 	bl	8009de0 <USBD_CtlError>
              break;
 800953a:	bf00      	nop
          }
          break;
 800953c:	e0ec      	b.n	8009718 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b02      	cmp	r3, #2
 8009548:	d002      	beq.n	8009550 <USBD_StdEPReq+0xe6>
 800954a:	2b03      	cmp	r3, #3
 800954c:	d016      	beq.n	800957c <USBD_StdEPReq+0x112>
 800954e:	e030      	b.n	80095b2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00d      	beq.n	8009572 <USBD_StdEPReq+0x108>
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b80      	cmp	r3, #128	; 0x80
 800955a:	d00a      	beq.n	8009572 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 f91f 	bl	800a7a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009566:	2180      	movs	r1, #128	; 0x80
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 f91b 	bl	800a7a4 <USBD_LL_StallEP>
 800956e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009570:	e025      	b.n	80095be <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fc33 	bl	8009de0 <USBD_CtlError>
              break;
 800957a:	e020      	b.n	80095be <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	885b      	ldrh	r3, [r3, #2]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d11b      	bne.n	80095bc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958a:	2b00      	cmp	r3, #0
 800958c:	d004      	beq.n	8009598 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 f925 	bl	800a7e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fcec 	bl	8009f76 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80095b0:	e004      	b.n	80095bc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fc13 	bl	8009de0 <USBD_CtlError>
              break;
 80095ba:	e000      	b.n	80095be <USBD_StdEPReq+0x154>
              break;
 80095bc:	bf00      	nop
          }
          break;
 80095be:	e0ab      	b.n	8009718 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d002      	beq.n	80095d2 <USBD_StdEPReq+0x168>
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d032      	beq.n	8009636 <USBD_StdEPReq+0x1cc>
 80095d0:	e097      	b.n	8009702 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <USBD_StdEPReq+0x17e>
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	2b80      	cmp	r3, #128	; 0x80
 80095dc:	d004      	beq.n	80095e8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fbfd 	bl	8009de0 <USBD_CtlError>
                break;
 80095e6:	e091      	b.n	800970c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	da0b      	bge.n	8009608 <USBD_StdEPReq+0x19e>
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	3310      	adds	r3, #16
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	4413      	add	r3, r2
 8009604:	3304      	adds	r3, #4
 8009606:	e00b      	b.n	8009620 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009608:	7bbb      	ldrb	r3, [r7, #14]
 800960a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	3304      	adds	r3, #4
 8009620:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2202      	movs	r2, #2
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fc47 	bl	8009ec2 <USBD_CtlSendData>
              break;
 8009634:	e06a      	b.n	800970c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800963a:	2b00      	cmp	r3, #0
 800963c:	da11      	bge.n	8009662 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	f003 020f 	and.w	r2, r3, #15
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	440b      	add	r3, r1
 8009650:	3324      	adds	r3, #36	; 0x24
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d117      	bne.n	8009688 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fbc0 	bl	8009de0 <USBD_CtlError>
                  break;
 8009660:	e054      	b.n	800970c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009662:	7bbb      	ldrb	r3, [r7, #14]
 8009664:	f003 020f 	and.w	r2, r3, #15
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	4613      	mov	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	440b      	add	r3, r1
 8009674:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d104      	bne.n	8009688 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fbad 	bl	8009de0 <USBD_CtlError>
                  break;
 8009686:	e041      	b.n	800970c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800968c:	2b00      	cmp	r3, #0
 800968e:	da0b      	bge.n	80096a8 <USBD_StdEPReq+0x23e>
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	3310      	adds	r3, #16
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	4413      	add	r3, r2
 80096a4:	3304      	adds	r3, #4
 80096a6:	e00b      	b.n	80096c0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	4413      	add	r3, r2
 80096be:	3304      	adds	r3, #4
 80096c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <USBD_StdEPReq+0x264>
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	2b80      	cmp	r3, #128	; 0x80
 80096cc:	d103      	bne.n	80096d6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e00e      	b.n	80096f4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 f8a0 	bl	800a820 <USBD_LL_IsStallEP>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2201      	movs	r2, #1
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	e002      	b.n	80096f4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2200      	movs	r2, #0
 80096f2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2202      	movs	r2, #2
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fbe1 	bl	8009ec2 <USBD_CtlSendData>
              break;
 8009700:	e004      	b.n	800970c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fb6b 	bl	8009de0 <USBD_CtlError>
              break;
 800970a:	bf00      	nop
          }
          break;
 800970c:	e004      	b.n	8009718 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fb65 	bl	8009de0 <USBD_CtlError>
          break;
 8009716:	bf00      	nop
      }
      break;
 8009718:	e004      	b.n	8009724 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb5f 	bl	8009de0 <USBD_CtlError>
      break;
 8009722:	bf00      	nop
  }

  return ret;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	0a1b      	lsrs	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	2b0e      	cmp	r3, #14
 8009752:	f200 8152 	bhi.w	80099fa <USBD_GetDescriptor+0x2ca>
 8009756:	a201      	add	r2, pc, #4	; (adr r2, 800975c <USBD_GetDescriptor+0x2c>)
 8009758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975c:	080097cd 	.word	0x080097cd
 8009760:	080097e5 	.word	0x080097e5
 8009764:	08009825 	.word	0x08009825
 8009768:	080099fb 	.word	0x080099fb
 800976c:	080099fb 	.word	0x080099fb
 8009770:	0800999b 	.word	0x0800999b
 8009774:	080099c7 	.word	0x080099c7
 8009778:	080099fb 	.word	0x080099fb
 800977c:	080099fb 	.word	0x080099fb
 8009780:	080099fb 	.word	0x080099fb
 8009784:	080099fb 	.word	0x080099fb
 8009788:	080099fb 	.word	0x080099fb
 800978c:	080099fb 	.word	0x080099fb
 8009790:	080099fb 	.word	0x080099fb
 8009794:	08009799 	.word	0x08009799
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	7c12      	ldrb	r2, [r2, #16]
 80097b0:	f107 0108 	add.w	r1, r7, #8
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097ba:	e126      	b.n	8009a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fb0e 	bl	8009de0 <USBD_CtlError>
        err++;
 80097c4:	7afb      	ldrb	r3, [r7, #11]
 80097c6:	3301      	adds	r3, #1
 80097c8:	72fb      	strb	r3, [r7, #11]
      break;
 80097ca:	e11e      	b.n	8009a0a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	7c12      	ldrb	r2, [r2, #16]
 80097d8:	f107 0108 	add.w	r1, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
      break;
 80097e2:	e112      	b.n	8009a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7c1b      	ldrb	r3, [r3, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10d      	bne.n	8009808 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f4:	f107 0208 	add.w	r2, r7, #8
 80097f8:	4610      	mov	r0, r2
 80097fa:	4798      	blx	r3
 80097fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	2202      	movs	r2, #2
 8009804:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009806:	e100      	b.n	8009a0a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	f107 0208 	add.w	r2, r7, #8
 8009814:	4610      	mov	r0, r2
 8009816:	4798      	blx	r3
 8009818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3301      	adds	r3, #1
 800981e:	2202      	movs	r2, #2
 8009820:	701a      	strb	r2, [r3, #0]
      break;
 8009822:	e0f2      	b.n	8009a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	885b      	ldrh	r3, [r3, #2]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b05      	cmp	r3, #5
 800982c:	f200 80ac 	bhi.w	8009988 <USBD_GetDescriptor+0x258>
 8009830:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <USBD_GetDescriptor+0x108>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009851 	.word	0x08009851
 800983c:	08009885 	.word	0x08009885
 8009840:	080098b9 	.word	0x080098b9
 8009844:	080098ed 	.word	0x080098ed
 8009848:	08009921 	.word	0x08009921
 800984c:	08009955 	.word	0x08009955
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00b      	beq.n	8009874 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	7c12      	ldrb	r2, [r2, #16]
 8009868:	f107 0108 	add.w	r1, r7, #8
 800986c:	4610      	mov	r0, r2
 800986e:	4798      	blx	r3
 8009870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009872:	e091      	b.n	8009998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fab2 	bl	8009de0 <USBD_CtlError>
            err++;
 800987c:	7afb      	ldrb	r3, [r7, #11]
 800987e:	3301      	adds	r3, #1
 8009880:	72fb      	strb	r3, [r7, #11]
          break;
 8009882:	e089      	b.n	8009998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00b      	beq.n	80098a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	7c12      	ldrb	r2, [r2, #16]
 800989c:	f107 0108 	add.w	r1, r7, #8
 80098a0:	4610      	mov	r0, r2
 80098a2:	4798      	blx	r3
 80098a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098a6:	e077      	b.n	8009998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa98 	bl	8009de0 <USBD_CtlError>
            err++;
 80098b0:	7afb      	ldrb	r3, [r7, #11]
 80098b2:	3301      	adds	r3, #1
 80098b4:	72fb      	strb	r3, [r7, #11]
          break;
 80098b6:	e06f      	b.n	8009998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	7c12      	ldrb	r2, [r2, #16]
 80098d0:	f107 0108 	add.w	r1, r7, #8
 80098d4:	4610      	mov	r0, r2
 80098d6:	4798      	blx	r3
 80098d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098da:	e05d      	b.n	8009998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fa7e 	bl	8009de0 <USBD_CtlError>
            err++;
 80098e4:	7afb      	ldrb	r3, [r7, #11]
 80098e6:	3301      	adds	r3, #1
 80098e8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ea:	e055      	b.n	8009998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00b      	beq.n	8009910 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	7c12      	ldrb	r2, [r2, #16]
 8009904:	f107 0108 	add.w	r1, r7, #8
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
 800990c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800990e:	e043      	b.n	8009998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fa64 	bl	8009de0 <USBD_CtlError>
            err++;
 8009918:	7afb      	ldrb	r3, [r7, #11]
 800991a:	3301      	adds	r3, #1
 800991c:	72fb      	strb	r3, [r7, #11]
          break;
 800991e:	e03b      	b.n	8009998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00b      	beq.n	8009944 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	7c12      	ldrb	r2, [r2, #16]
 8009938:	f107 0108 	add.w	r1, r7, #8
 800993c:	4610      	mov	r0, r2
 800993e:	4798      	blx	r3
 8009940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009942:	e029      	b.n	8009998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fa4a 	bl	8009de0 <USBD_CtlError>
            err++;
 800994c:	7afb      	ldrb	r3, [r7, #11]
 800994e:	3301      	adds	r3, #1
 8009950:	72fb      	strb	r3, [r7, #11]
          break;
 8009952:	e021      	b.n	8009998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	7c12      	ldrb	r2, [r2, #16]
 800996c:	f107 0108 	add.w	r1, r7, #8
 8009970:	4610      	mov	r0, r2
 8009972:	4798      	blx	r3
 8009974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009976:	e00f      	b.n	8009998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa30 	bl	8009de0 <USBD_CtlError>
            err++;
 8009980:	7afb      	ldrb	r3, [r7, #11]
 8009982:	3301      	adds	r3, #1
 8009984:	72fb      	strb	r3, [r7, #11]
          break;
 8009986:	e007      	b.n	8009998 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa28 	bl	8009de0 <USBD_CtlError>
          err++;
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	3301      	adds	r3, #1
 8009994:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009996:	bf00      	nop
      }
      break;
 8009998:	e037      	b.n	8009a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	7c1b      	ldrb	r3, [r3, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d109      	bne.n	80099b6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099aa:	f107 0208 	add.w	r2, r7, #8
 80099ae:	4610      	mov	r0, r2
 80099b0:	4798      	blx	r3
 80099b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099b4:	e029      	b.n	8009a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fa11 	bl	8009de0 <USBD_CtlError>
        err++;
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	3301      	adds	r3, #1
 80099c2:	72fb      	strb	r3, [r7, #11]
      break;
 80099c4:	e021      	b.n	8009a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	7c1b      	ldrb	r3, [r3, #16]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10d      	bne.n	80099ea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d6:	f107 0208 	add.w	r2, r7, #8
 80099da:	4610      	mov	r0, r2
 80099dc:	4798      	blx	r3
 80099de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3301      	adds	r3, #1
 80099e4:	2207      	movs	r2, #7
 80099e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099e8:	e00f      	b.n	8009a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f9f7 	bl	8009de0 <USBD_CtlError>
        err++;
 80099f2:	7afb      	ldrb	r3, [r7, #11]
 80099f4:	3301      	adds	r3, #1
 80099f6:	72fb      	strb	r3, [r7, #11]
      break;
 80099f8:	e007      	b.n	8009a0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f9ef 	bl	8009de0 <USBD_CtlError>
      err++;
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	3301      	adds	r3, #1
 8009a06:	72fb      	strb	r3, [r7, #11]
      break;
 8009a08:	bf00      	nop
  }

  if (err != 0U)
 8009a0a:	7afb      	ldrb	r3, [r7, #11]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d11e      	bne.n	8009a4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	88db      	ldrh	r3, [r3, #6]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d016      	beq.n	8009a46 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009a18:	893b      	ldrh	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00e      	beq.n	8009a3c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	88da      	ldrh	r2, [r3, #6]
 8009a22:	893b      	ldrh	r3, [r7, #8]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	bf28      	it	cs
 8009a28:	4613      	movcs	r3, r2
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a2e:	893b      	ldrh	r3, [r7, #8]
 8009a30:	461a      	mov	r2, r3
 8009a32:	68f9      	ldr	r1, [r7, #12]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fa44 	bl	8009ec2 <USBD_CtlSendData>
 8009a3a:	e009      	b.n	8009a50 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f9ce 	bl	8009de0 <USBD_CtlError>
 8009a44:	e004      	b.n	8009a50 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fa95 	bl	8009f76 <USBD_CtlSendStatus>
 8009a4c:	e000      	b.n	8009a50 <USBD_GetDescriptor+0x320>
    return;
 8009a4e:	bf00      	nop
  }
}
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop

08009a58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	889b      	ldrh	r3, [r3, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d131      	bne.n	8009ace <USBD_SetAddress+0x76>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	88db      	ldrh	r3, [r3, #6]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d12d      	bne.n	8009ace <USBD_SetAddress+0x76>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	885b      	ldrh	r3, [r3, #2]
 8009a76:	2b7f      	cmp	r3, #127	; 0x7f
 8009a78:	d829      	bhi.n	8009ace <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d104      	bne.n	8009a9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f9a3 	bl	8009de0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9a:	e01d      	b.n	8009ad8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	7bfa      	ldrb	r2, [r7, #15]
 8009aa0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fee5 	bl	800a878 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fa61 	bl	8009f76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d004      	beq.n	8009ac4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2202      	movs	r2, #2
 8009abe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac2:	e009      	b.n	8009ad8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009acc:	e004      	b.n	8009ad8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f985 	bl	8009de0 <USBD_CtlError>
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	885b      	ldrh	r3, [r3, #2]
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	4b4c      	ldr	r3, [pc, #304]	; (8009c28 <USBD_SetConfig+0x148>)
 8009af6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009af8:	4b4b      	ldr	r3, [pc, #300]	; (8009c28 <USBD_SetConfig+0x148>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d905      	bls.n	8009b0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f96c 	bl	8009de0 <USBD_CtlError>
    return USBD_FAIL;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e088      	b.n	8009c1e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d002      	beq.n	8009b1e <USBD_SetConfig+0x3e>
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d025      	beq.n	8009b68 <USBD_SetConfig+0x88>
 8009b1c:	e071      	b.n	8009c02 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009b1e:	4b42      	ldr	r3, [pc, #264]	; (8009c28 <USBD_SetConfig+0x148>)
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01c      	beq.n	8009b60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009b26:	4b40      	ldr	r3, [pc, #256]	; (8009c28 <USBD_SetConfig+0x148>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b30:	4b3d      	ldr	r3, [pc, #244]	; (8009c28 <USBD_SetConfig+0x148>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff f91e 	bl	8008d78 <USBD_SetClassConfig>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d004      	beq.n	8009b50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f949 	bl	8009de0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b4e:	e065      	b.n	8009c1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fa10 	bl	8009f76 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2203      	movs	r2, #3
 8009b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b5e:	e05d      	b.n	8009c1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fa08 	bl	8009f76 <USBD_CtlSendStatus>
      break;
 8009b66:	e059      	b.n	8009c1c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b68:	4b2f      	ldr	r3, [pc, #188]	; (8009c28 <USBD_SetConfig+0x148>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d112      	bne.n	8009b96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b78:	4b2b      	ldr	r3, [pc, #172]	; (8009c28 <USBD_SetConfig+0x148>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b82:	4b29      	ldr	r3, [pc, #164]	; (8009c28 <USBD_SetConfig+0x148>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff f911 	bl	8008db0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9f1 	bl	8009f76 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b94:	e042      	b.n	8009c1c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009b96:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <USBD_SetConfig+0x148>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d02a      	beq.n	8009bfa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff f8ff 	bl	8008db0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bb2:	4b1d      	ldr	r3, [pc, #116]	; (8009c28 <USBD_SetConfig+0x148>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bbc:	4b1a      	ldr	r3, [pc, #104]	; (8009c28 <USBD_SetConfig+0x148>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff f8d8 	bl	8008d78 <USBD_SetClassConfig>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00f      	beq.n	8009bf2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f903 	bl	8009de0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	4619      	mov	r1, r3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff f8e4 	bl	8008db0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009bf0:	e014      	b.n	8009c1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f9bf 	bl	8009f76 <USBD_CtlSendStatus>
      break;
 8009bf8:	e010      	b.n	8009c1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f9bb 	bl	8009f76 <USBD_CtlSendStatus>
      break;
 8009c00:	e00c      	b.n	8009c1c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f8eb 	bl	8009de0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <USBD_SetConfig+0x148>)
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff f8cd 	bl	8008db0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009c16:	2303      	movs	r3, #3
 8009c18:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1a:	bf00      	nop
  }

  return ret;
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000220 	.word	0x20000220

08009c2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	88db      	ldrh	r3, [r3, #6]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d004      	beq.n	8009c48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f8cd 	bl	8009de0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c46:	e023      	b.n	8009c90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	dc02      	bgt.n	8009c5a <USBD_GetConfig+0x2e>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dc03      	bgt.n	8009c60 <USBD_GetConfig+0x34>
 8009c58:	e015      	b.n	8009c86 <USBD_GetConfig+0x5a>
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d00b      	beq.n	8009c76 <USBD_GetConfig+0x4a>
 8009c5e:	e012      	b.n	8009c86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3308      	adds	r3, #8
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f927 	bl	8009ec2 <USBD_CtlSendData>
        break;
 8009c74:	e00c      	b.n	8009c90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3304      	adds	r3, #4
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f91f 	bl	8009ec2 <USBD_CtlSendData>
        break;
 8009c84:	e004      	b.n	8009c90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f8a9 	bl	8009de0 <USBD_CtlError>
        break;
 8009c8e:	bf00      	nop
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	3b01      	subs	r3, #1
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d81e      	bhi.n	8009cee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	88db      	ldrh	r3, [r3, #6]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d004      	beq.n	8009cc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f890 	bl	8009de0 <USBD_CtlError>
        break;
 8009cc0:	e01a      	b.n	8009cf8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	f043 0202 	orr.w	r2, r3, #2
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	330c      	adds	r3, #12
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f8eb 	bl	8009ec2 <USBD_CtlSendData>
      break;
 8009cec:	e004      	b.n	8009cf8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f875 	bl	8009de0 <USBD_CtlError>
      break;
 8009cf6:	bf00      	nop
  }
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	885b      	ldrh	r3, [r3, #2]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d106      	bne.n	8009d20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f92b 	bl	8009f76 <USBD_CtlSendStatus>
  }
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d80b      	bhi.n	8009d58 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	885b      	ldrh	r3, [r3, #2]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d10c      	bne.n	8009d62 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f910 	bl	8009f76 <USBD_CtlSendStatus>
      }
      break;
 8009d56:	e004      	b.n	8009d62 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f840 	bl	8009de0 <USBD_CtlError>
      break;
 8009d60:	e000      	b.n	8009d64 <USBD_ClrFeature+0x3c>
      break;
 8009d62:	bf00      	nop
  }
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3301      	adds	r3, #1
 8009d86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	781a      	ldrb	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f7ff fa91 	bl	80092be <SWAPBYTE>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	461a      	mov	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3301      	adds	r3, #1
 8009da8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3301      	adds	r3, #1
 8009dae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7ff fa84 	bl	80092be <SWAPBYTE>
 8009db6:	4603      	mov	r3, r0
 8009db8:	461a      	mov	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f7ff fa77 	bl	80092be <SWAPBYTE>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	80da      	strh	r2, [r3, #6]
}
 8009dd8:	bf00      	nop
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dea:	2180      	movs	r1, #128	; 0x80
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fcd9 	bl	800a7a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009df2:	2100      	movs	r1, #0
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fcd5 	bl	800a7a4 <USBD_LL_StallEP>
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d036      	beq.n	8009e86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e1c:	6938      	ldr	r0, [r7, #16]
 8009e1e:	f000 f836 	bl	8009e8e <USBD_GetLen>
 8009e22:	4603      	mov	r3, r0
 8009e24:	3301      	adds	r3, #1
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	4413      	add	r3, r2
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	7812      	ldrb	r2, [r2, #0]
 8009e3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	4413      	add	r3, r2
 8009e48:	2203      	movs	r2, #3
 8009e4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e52:	e013      	b.n	8009e7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	4413      	add	r3, r2
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	3301      	adds	r3, #1
 8009e64:	613b      	str	r3, [r7, #16]
    idx++;
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	4413      	add	r3, r2
 8009e72:	2200      	movs	r2, #0
 8009e74:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e7      	bne.n	8009e54 <USBD_GetString+0x52>
 8009e84:	e000      	b.n	8009e88 <USBD_GetString+0x86>
    return;
 8009e86:	bf00      	nop
  }
}
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e9e:	e005      	b.n	8009eac <USBD_GetLen+0x1e>
  {
    len++;
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1f5      	bne.n	8009ea0 <USBD_GetLen+0x12>
  }

  return len;
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 fce4 	bl	800a8b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fcd3 	bl	800a8b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2203      	movs	r2, #3
 8009f2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	2100      	movs	r1, #0
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 fcd7 	bl	800a8f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	2100      	movs	r1, #0
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 fcc6 	bl	800a8f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2204      	movs	r2, #4
 8009f82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f86:	2300      	movs	r3, #0
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fc92 	bl	800a8b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2205      	movs	r2, #5
 8009fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fac:	2300      	movs	r3, #0
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fca0 	bl	800a8f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <MX_USB_DEVICE_DeInit>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
	USBD_Stop(&hUsbDeviceFS);
 8009fc8:	4803      	ldr	r0, [pc, #12]	; (8009fd8 <MX_USB_DEVICE_DeInit+0x14>)
 8009fca:	f7fe feaf 	bl	8008d2c <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 8009fce:	4802      	ldr	r0, [pc, #8]	; (8009fd8 <MX_USB_DEVICE_DeInit+0x14>)
 8009fd0:	f7fe fe38 	bl	8008c44 <USBD_DeInit>
}
 8009fd4:	bf00      	nop
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20000748 	.word	0x20000748

08009fdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4912      	ldr	r1, [pc, #72]	; (800a02c <MX_USB_DEVICE_Init+0x50>)
 8009fe4:	4812      	ldr	r0, [pc, #72]	; (800a030 <MX_USB_DEVICE_Init+0x54>)
 8009fe6:	f7fe fdef 	bl	8008bc8 <USBD_Init>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ff0:	f7f8 fe12 	bl	8002c18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009ff4:	490f      	ldr	r1, [pc, #60]	; (800a034 <MX_USB_DEVICE_Init+0x58>)
 8009ff6:	480e      	ldr	r0, [pc, #56]	; (800a030 <MX_USB_DEVICE_Init+0x54>)
 8009ff8:	f7fe fe58 	bl	8008cac <USBD_RegisterClass>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a002:	f7f8 fe09 	bl	8002c18 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a006:	490c      	ldr	r1, [pc, #48]	; (800a038 <MX_USB_DEVICE_Init+0x5c>)
 800a008:	4809      	ldr	r0, [pc, #36]	; (800a030 <MX_USB_DEVICE_Init+0x54>)
 800a00a:	f7fe fdc7 	bl	8008b9c <USBD_CUSTOM_HID_RegisterInterface>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a014:	f7f8 fe00 	bl	8002c18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a018:	4805      	ldr	r0, [pc, #20]	; (800a030 <MX_USB_DEVICE_Init+0x54>)
 800a01a:	f7fe fe7b 	bl	8008d14 <USBD_Start>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a024:	f7f8 fdf8 	bl	8002c18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a028:	bf00      	nop
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20000134 	.word	0x20000134
 800a030:	20000748 	.word	0x20000748
 800a034:	2000000c 	.word	0x2000000c
 800a038:	20000124 	.word	0x20000124

0800a03c <CUSTOM_HID_Init_FS>:

/**
 * @brief  Initializes the CUSTOM HID media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CUSTOM_HID_Init_FS(void) {
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800a040:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800a042:	4618      	mov	r0, r3
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <CUSTOM_HID_DeInit_FS>:

/**
 * @brief  DeInitializes the CUSTOM HID media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CUSTOM_HID_DeInit_FS(void) {
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 5 */
	return (USBD_OK);
 800a050:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800a052:	4618      	mov	r0, r3
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <CUSTOM_HID_OutEvent_FS>:
 * @brief  Manage the CUSTOM HID class events
 * @param  event_idx: Event index
 * @param  state: Event state
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state) {
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 6 */
	memcpy(buffer, state, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800a064:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <CUSTOM_HID_OutEvent_FS+0x38>)
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6814      	ldr	r4, [r2, #0]
 800a06a:	6850      	ldr	r0, [r2, #4]
 800a06c:	6891      	ldr	r1, [r2, #8]
 800a06e:	601c      	str	r4, [r3, #0]
 800a070:	6058      	str	r0, [r3, #4]
 800a072:	6099      	str	r1, [r3, #8]
 800a074:	7b12      	ldrb	r2, [r2, #12]
 800a076:	731a      	strb	r2, [r3, #12]

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer,
 800a078:	220d      	movs	r2, #13
 800a07a:	4906      	ldr	r1, [pc, #24]	; (800a094 <CUSTOM_HID_OutEvent_FS+0x38>)
 800a07c:	4806      	ldr	r0, [pc, #24]	; (800a098 <CUSTOM_HID_OutEvent_FS+0x3c>)
 800a07e:	f7fe fcb3 	bl	80089e8 <USBD_CUSTOM_HID_SendReport>
	USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

	/* Start next USB packet transfer once data processing is completed */
	USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800a082:	4805      	ldr	r0, [pc, #20]	; (800a098 <CUSTOM_HID_OutEvent_FS+0x3c>)
 800a084:	f7fe fd40 	bl	8008b08 <USBD_CUSTOM_HID_ReceivePacket>
	return (USBD_OK);
 800a088:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd90      	pop	{r4, r7, pc}
 800a092:	bf00      	nop
 800a094:	20000a18 	.word	0x20000a18
 800a098:	20000748 	.word	0x20000748

0800a09c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	6039      	str	r1, [r7, #0]
 800a0a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2212      	movs	r2, #18
 800a0ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0ae:	4b03      	ldr	r3, [pc, #12]	; (800a0bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	20000154 	.word	0x20000154

0800a0c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	6039      	str	r1, [r7, #0]
 800a0ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2204      	movs	r2, #4
 800a0d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a0d2:	4b03      	ldr	r3, [pc, #12]	; (800a0e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	20000174 	.word	0x20000174

0800a0e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0f0:	79fb      	ldrb	r3, [r7, #7]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d105      	bne.n	800a102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	4907      	ldr	r1, [pc, #28]	; (800a118 <USBD_FS_ProductStrDescriptor+0x34>)
 800a0fa:	4808      	ldr	r0, [pc, #32]	; (800a11c <USBD_FS_ProductStrDescriptor+0x38>)
 800a0fc:	f7ff fe81 	bl	8009e02 <USBD_GetString>
 800a100:	e004      	b.n	800a10c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4904      	ldr	r1, [pc, #16]	; (800a118 <USBD_FS_ProductStrDescriptor+0x34>)
 800a106:	4805      	ldr	r0, [pc, #20]	; (800a11c <USBD_FS_ProductStrDescriptor+0x38>)
 800a108:	f7ff fe7b 	bl	8009e02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a10c:	4b02      	ldr	r3, [pc, #8]	; (800a118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20000a28 	.word	0x20000a28
 800a11c:	0800cdd8 	.word	0x0800cdd8

0800a120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	6039      	str	r1, [r7, #0]
 800a12a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	4904      	ldr	r1, [pc, #16]	; (800a140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a130:	4804      	ldr	r0, [pc, #16]	; (800a144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a132:	f7ff fe66 	bl	8009e02 <USBD_GetString>
  return USBD_StrDesc;
 800a136:	4b02      	ldr	r3, [pc, #8]	; (800a140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20000a28 	.word	0x20000a28
 800a144:	0800cde4 	.word	0x0800cde4

0800a148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	4603      	mov	r3, r0
 800a150:	6039      	str	r1, [r7, #0]
 800a152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	221a      	movs	r2, #26
 800a158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a15a:	f000 f855 	bl	800a208 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a15e:	4b02      	ldr	r3, [pc, #8]	; (800a168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000178 	.word	0x20000178

0800a16c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	6039      	str	r1, [r7, #0]
 800a176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d105      	bne.n	800a18a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	4907      	ldr	r1, [pc, #28]	; (800a1a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a182:	4808      	ldr	r0, [pc, #32]	; (800a1a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a184:	f7ff fe3d 	bl	8009e02 <USBD_GetString>
 800a188:	e004      	b.n	800a194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	4904      	ldr	r1, [pc, #16]	; (800a1a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a18e:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a190:	f7ff fe37 	bl	8009e02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a194:	4b02      	ldr	r3, [pc, #8]	; (800a1a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a196:	4618      	mov	r0, r3
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	20000a28 	.word	0x20000a28
 800a1a4:	0800cdd8 	.word	0x0800cdd8

0800a1a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	6039      	str	r1, [r7, #0]
 800a1b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1b4:	79fb      	ldrb	r3, [r7, #7]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d105      	bne.n	800a1c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	4907      	ldr	r1, [pc, #28]	; (800a1dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1be:	4808      	ldr	r0, [pc, #32]	; (800a1e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1c0:	f7ff fe1f 	bl	8009e02 <USBD_GetString>
 800a1c4:	e004      	b.n	800a1d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	4904      	ldr	r1, [pc, #16]	; (800a1dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1ca:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1cc:	f7ff fe19 	bl	8009e02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d0:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000a28 	.word	0x20000a28
 800a1e0:	0800cdd8 	.word	0x0800cdd8

0800a1e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	6039      	str	r1, [r7, #0]
 800a1ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	220c      	movs	r2, #12
 800a1f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a1f6:	4b03      	ldr	r3, [pc, #12]	; (800a204 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	20000168 	.word	0x20000168

0800a208 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <Get_SerialNum+0x44>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a214:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <Get_SerialNum+0x48>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a21a:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <Get_SerialNum+0x4c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4413      	add	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a22e:	2208      	movs	r2, #8
 800a230:	4909      	ldr	r1, [pc, #36]	; (800a258 <Get_SerialNum+0x50>)
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 f814 	bl	800a260 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a238:	2204      	movs	r2, #4
 800a23a:	4908      	ldr	r1, [pc, #32]	; (800a25c <Get_SerialNum+0x54>)
 800a23c:	68b8      	ldr	r0, [r7, #8]
 800a23e:	f000 f80f 	bl	800a260 <IntToUnicode>
  }
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	1fff7a10 	.word	0x1fff7a10
 800a250:	1fff7a14 	.word	0x1fff7a14
 800a254:	1fff7a18 	.word	0x1fff7a18
 800a258:	2000017a 	.word	0x2000017a
 800a25c:	2000018a 	.word	0x2000018a

0800a260 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a272:	2300      	movs	r3, #0
 800a274:	75fb      	strb	r3, [r7, #23]
 800a276:	e027      	b.n	800a2c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	0f1b      	lsrs	r3, r3, #28
 800a27c:	2b09      	cmp	r3, #9
 800a27e:	d80b      	bhi.n	800a298 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	0f1b      	lsrs	r3, r3, #28
 800a284:	b2da      	uxtb	r2, r3
 800a286:	7dfb      	ldrb	r3, [r7, #23]
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	4619      	mov	r1, r3
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	440b      	add	r3, r1
 800a290:	3230      	adds	r2, #48	; 0x30
 800a292:	b2d2      	uxtb	r2, r2
 800a294:	701a      	strb	r2, [r3, #0]
 800a296:	e00a      	b.n	800a2ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	0f1b      	lsrs	r3, r3, #28
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	440b      	add	r3, r1
 800a2a8:	3237      	adds	r2, #55	; 0x37
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2b4:	7dfb      	ldrb	r3, [r7, #23]
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	4413      	add	r3, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	75fb      	strb	r3, [r7, #23]
 800a2c8:	7dfa      	ldrb	r2, [r7, #23]
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d3d3      	bcc.n	800a278 <IntToUnicode+0x18>
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b098      	sub	sp, #96	; 0x60
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	605a      	str	r2, [r3, #4]
 800a2f2:	609a      	str	r2, [r3, #8]
 800a2f4:	60da      	str	r2, [r3, #12]
 800a2f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a2f8:	f107 0310 	add.w	r3, r7, #16
 800a2fc:	223c      	movs	r2, #60	; 0x3c
 800a2fe:	2100      	movs	r1, #0
 800a300:	4618      	mov	r0, r3
 800a302:	f000 fbe5 	bl	800aad0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a30e:	d152      	bne.n	800a3b6 <HAL_PCD_MspInit+0xd6>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 336;
 800a310:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a314:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800a316:	2310      	movs	r3, #16
 800a318:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800a31a:	2302      	movs	r3, #2
 800a31c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
 800a31e:	2307      	movs	r3, #7
 800a320:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLI2SQ;
 800a322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a326:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800a328:	2300      	movs	r3, #0
 800a32a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a32c:	f107 0310 	add.w	r3, r7, #16
 800a330:	4618      	mov	r0, r3
 800a332:	f7fc f8e9 	bl	8006508 <HAL_RCCEx_PeriphCLKConfig>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d001      	beq.n	800a340 <HAL_PCD_MspInit+0x60>
    {
      Error_Handler();
 800a33c:	f7f8 fc6c 	bl	8002c18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a340:	2300      	movs	r3, #0
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	4b1e      	ldr	r3, [pc, #120]	; (800a3c0 <HAL_PCD_MspInit+0xe0>)
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	4a1d      	ldr	r2, [pc, #116]	; (800a3c0 <HAL_PCD_MspInit+0xe0>)
 800a34a:	f043 0301 	orr.w	r3, r3, #1
 800a34e:	6313      	str	r3, [r2, #48]	; 0x30
 800a350:	4b1b      	ldr	r3, [pc, #108]	; (800a3c0 <HAL_PCD_MspInit+0xe0>)
 800a352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a35c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a360:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a362:	2302      	movs	r3, #2
 800a364:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a366:	2300      	movs	r3, #0
 800a368:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a36a:	2303      	movs	r3, #3
 800a36c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a36e:	230a      	movs	r3, #10
 800a370:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a372:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a376:	4619      	mov	r1, r3
 800a378:	4812      	ldr	r0, [pc, #72]	; (800a3c4 <HAL_PCD_MspInit+0xe4>)
 800a37a:	f7f9 fa6b 	bl	8003854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a37e:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <HAL_PCD_MspInit+0xe0>)
 800a380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a382:	4a0f      	ldr	r2, [pc, #60]	; (800a3c0 <HAL_PCD_MspInit+0xe0>)
 800a384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a388:	6353      	str	r3, [r2, #52]	; 0x34
 800a38a:	2300      	movs	r3, #0
 800a38c:	60bb      	str	r3, [r7, #8]
 800a38e:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <HAL_PCD_MspInit+0xe0>)
 800a390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a392:	4a0b      	ldr	r2, [pc, #44]	; (800a3c0 <HAL_PCD_MspInit+0xe0>)
 800a394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a398:	6453      	str	r3, [r2, #68]	; 0x44
 800a39a:	4b09      	ldr	r3, [pc, #36]	; (800a3c0 <HAL_PCD_MspInit+0xe0>)
 800a39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a2:	60bb      	str	r3, [r7, #8]
 800a3a4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	2043      	movs	r0, #67	; 0x43
 800a3ac:	f7f8 fff3 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3b0:	2043      	movs	r0, #67	; 0x43
 800a3b2:	f7f9 f80c 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3b6:	bf00      	nop
 800a3b8:	3760      	adds	r7, #96	; 0x60
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	40023800 	.word	0x40023800
 800a3c4:	40020000 	.word	0x40020000

0800a3c8 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3d8:	d10d      	bne.n	800a3f6 <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <HAL_PCD_MspDeInit+0x38>)
 800a3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3de:	4a08      	ldr	r2, [pc, #32]	; (800a400 <HAL_PCD_MspDeInit+0x38>)
 800a3e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e4:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800a3e6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a3ea:	4806      	ldr	r0, [pc, #24]	; (800a404 <HAL_PCD_MspDeInit+0x3c>)
 800a3ec:	f7f9 fba6 	bl	8003b3c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 800a3f0:	2043      	movs	r0, #67	; 0x43
 800a3f2:	f7f8 fffa 	bl	80033ea <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 800a3f6:	bf00      	nop
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	40023800 	.word	0x40023800
 800a404:	40020000 	.word	0x40020000

0800a408 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f7fe fcde 	bl	8008de0 <USBD_LL_SetupStage>
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	6879      	ldr	r1, [r7, #4]
 800a442:	4613      	mov	r3, r2
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	440b      	add	r3, r1
 800a44c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	78fb      	ldrb	r3, [r7, #3]
 800a454:	4619      	mov	r1, r3
 800a456:	f7fe fd18 	bl	8008e8a <USBD_LL_DataOutStage>
}
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a474:	78fa      	ldrb	r2, [r7, #3]
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	4613      	mov	r3, r2
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	1a9b      	subs	r3, r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	440b      	add	r3, r1
 800a482:	3348      	adds	r3, #72	; 0x48
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	78fb      	ldrb	r3, [r7, #3]
 800a488:	4619      	mov	r1, r3
 800a48a:	f7fe fd61 	bl	8008f50 <USBD_LL_DataInStage>
}
 800a48e:	bf00      	nop
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b082      	sub	sp, #8
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fe75 	bl	8009194 <USBD_LL_SOF>
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d001      	beq.n	800a4ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a4c6:	f7f8 fba7 	bl	8002c18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4d0:	7bfa      	ldrb	r2, [r7, #15]
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe fe1f 	bl	8009118 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fdcb 	bl	800907c <USBD_LL_Reset>
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fe1a 	bl	8009138 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a516:	f043 0301 	orr.w	r3, r3, #1
 800a51a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d005      	beq.n	800a530 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a524:	4b04      	ldr	r3, [pc, #16]	; (800a538 <HAL_PCD_SuspendCallback+0x48>)
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	4a03      	ldr	r2, [pc, #12]	; (800a538 <HAL_PCD_SuspendCallback+0x48>)
 800a52a:	f043 0306 	orr.w	r3, r3, #6
 800a52e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	e000ed00 	.word	0xe000ed00

0800a53c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe fe0a 	bl	8009164 <USBD_LL_Resume>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a56a:	78fa      	ldrb	r2, [r7, #3]
 800a56c:	4611      	mov	r1, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fe58 	bl	8009224 <USBD_LL_IsoOUTIncomplete>
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a58e:	78fa      	ldrb	r2, [r7, #3]
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fe20 	bl	80091d8 <USBD_LL_IsoINIncomplete>
}
 800a598:	bf00      	nop
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fe5e 	bl	8009270 <USBD_LL_DevConnected>
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe fe5b 	bl	8009286 <USBD_LL_DevDisconnected>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d13f      	bne.n	800a668 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a5e8:	4a22      	ldr	r2, [pc, #136]	; (800a674 <USBD_LL_Init+0x9c>)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a20      	ldr	r2, [pc, #128]	; (800a674 <USBD_LL_Init+0x9c>)
 800a5f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	; (800a674 <USBD_LL_Init+0x9c>)
 800a5fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a5fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a600:	4b1c      	ldr	r3, [pc, #112]	; (800a674 <USBD_LL_Init+0x9c>)
 800a602:	2206      	movs	r2, #6
 800a604:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a606:	4b1b      	ldr	r3, [pc, #108]	; (800a674 <USBD_LL_Init+0x9c>)
 800a608:	2202      	movs	r2, #2
 800a60a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a60c:	4b19      	ldr	r3, [pc, #100]	; (800a674 <USBD_LL_Init+0x9c>)
 800a60e:	2200      	movs	r2, #0
 800a610:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a612:	4b18      	ldr	r3, [pc, #96]	; (800a674 <USBD_LL_Init+0x9c>)
 800a614:	2202      	movs	r2, #2
 800a616:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a618:	4b16      	ldr	r3, [pc, #88]	; (800a674 <USBD_LL_Init+0x9c>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a61e:	4b15      	ldr	r3, [pc, #84]	; (800a674 <USBD_LL_Init+0x9c>)
 800a620:	2200      	movs	r2, #0
 800a622:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a624:	4b13      	ldr	r3, [pc, #76]	; (800a674 <USBD_LL_Init+0x9c>)
 800a626:	2200      	movs	r2, #0
 800a628:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a62a:	4b12      	ldr	r3, [pc, #72]	; (800a674 <USBD_LL_Init+0x9c>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a630:	4b10      	ldr	r3, [pc, #64]	; (800a674 <USBD_LL_Init+0x9c>)
 800a632:	2200      	movs	r2, #0
 800a634:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a636:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <USBD_LL_Init+0x9c>)
 800a638:	2200      	movs	r2, #0
 800a63a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a63c:	480d      	ldr	r0, [pc, #52]	; (800a674 <USBD_LL_Init+0x9c>)
 800a63e:	f7fa fb42 	bl	8004cc6 <HAL_PCD_Init>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800a648:	f7f8 fae6 	bl	8002c18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a64c:	2180      	movs	r1, #128	; 0x80
 800a64e:	4809      	ldr	r0, [pc, #36]	; (800a674 <USBD_LL_Init+0x9c>)
 800a650:	f7fb fd17 	bl	8006082 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a654:	2240      	movs	r2, #64	; 0x40
 800a656:	2100      	movs	r1, #0
 800a658:	4806      	ldr	r0, [pc, #24]	; (800a674 <USBD_LL_Init+0x9c>)
 800a65a:	f7fb fccb 	bl	8005ff4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a65e:	2280      	movs	r2, #128	; 0x80
 800a660:	2101      	movs	r1, #1
 800a662:	4804      	ldr	r0, [pc, #16]	; (800a674 <USBD_LL_Init+0x9c>)
 800a664:	f7fb fcc6 	bl	8005ff4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20000c28 	.word	0x20000c28

0800a678 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fa fc3d 	bl	8004f0e <HAL_PCD_DeInit>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 f9b4 	bl	800aa08 <USBD_Get_USB_Status>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fa fc45 	bl	8004f54 <HAL_PCD_Start>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 f999 	bl	800aa08 <USBD_Get_USB_Status>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fa fc5d 	bl	8004fba <HAL_PCD_Stop>
 800a700:	4603      	mov	r3, r0
 800a702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	4618      	mov	r0, r3
 800a708:	f000 f97e 	bl	800aa08 <USBD_Get_USB_Status>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a710:	7bbb      	ldrb	r3, [r7, #14]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	4608      	mov	r0, r1
 800a724:	4611      	mov	r1, r2
 800a726:	461a      	mov	r2, r3
 800a728:	4603      	mov	r3, r0
 800a72a:	70fb      	strb	r3, [r7, #3]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70bb      	strb	r3, [r7, #2]
 800a730:	4613      	mov	r3, r2
 800a732:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a742:	78bb      	ldrb	r3, [r7, #2]
 800a744:	883a      	ldrh	r2, [r7, #0]
 800a746:	78f9      	ldrb	r1, [r7, #3]
 800a748:	f7fb f874 	bl	8005834 <HAL_PCD_EP_Open>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	4618      	mov	r0, r3
 800a754:	f000 f958 	bl	800aa08 <USBD_Get_USB_Status>
 800a758:	4603      	mov	r3, r0
 800a75a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a780:	78fa      	ldrb	r2, [r7, #3]
 800a782:	4611      	mov	r1, r2
 800a784:	4618      	mov	r0, r3
 800a786:	f7fb f8bd 	bl	8005904 <HAL_PCD_EP_Close>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
 800a790:	4618      	mov	r0, r3
 800a792:	f000 f939 	bl	800aa08 <USBD_Get_USB_Status>
 800a796:	4603      	mov	r3, r0
 800a798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7be:	78fa      	ldrb	r2, [r7, #3]
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fb f97d 	bl	8005ac2 <HAL_PCD_EP_SetStall>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 f91a 	bl	800aa08 <USBD_Get_USB_Status>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7fc:	78fa      	ldrb	r2, [r7, #3]
 800a7fe:	4611      	mov	r1, r2
 800a800:	4618      	mov	r0, r3
 800a802:	f7fb f9c2 	bl	8005b8a <HAL_PCD_EP_ClrStall>
 800a806:	4603      	mov	r3, r0
 800a808:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 f8fb 	bl	800aa08 <USBD_Get_USB_Status>
 800a812:	4603      	mov	r3, r0
 800a814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a816:	7bbb      	ldrb	r3, [r7, #14]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a832:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	da0b      	bge.n	800a854 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	4613      	mov	r3, r2
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	1a9b      	subs	r3, r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	440b      	add	r3, r1
 800a84e:	333e      	adds	r3, #62	; 0x3e
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	e00b      	b.n	800a86c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a85a:	68f9      	ldr	r1, [r7, #12]
 800a85c:	4613      	mov	r3, r2
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	1a9b      	subs	r3, r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	440b      	add	r3, r1
 800a866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a86a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a892:	78fa      	ldrb	r2, [r7, #3]
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f7fa ffa7 	bl	80057ea <HAL_PCD_SetAddress>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 f8b0 	bl	800aa08 <USBD_Get_USB_Status>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b086      	sub	sp, #24
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	603b      	str	r3, [r7, #0]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a8d4:	7af9      	ldrb	r1, [r7, #11]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	f7fb f8a8 	bl	8005a2e <HAL_PCD_EP_Transmit>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 f88f 	bl	800aa08 <USBD_Get_USB_Status>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	607a      	str	r2, [r7, #4]
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	460b      	mov	r3, r1
 800a906:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a916:	7af9      	ldrb	r1, [r7, #11]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	f7fb f83c 	bl	8005998 <HAL_PCD_EP_Receive>
 800a920:	4603      	mov	r3, r0
 800a922:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a924:	7dfb      	ldrb	r3, [r7, #23]
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f86e 	bl	800aa08 <USBD_Get_USB_Status>
 800a92c:	4603      	mov	r3, r0
 800a92e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a930:	7dbb      	ldrb	r3, [r7, #22]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
	...

0800a93c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <HAL_PCDEx_LPM_Callback+0x18>
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d01f      	beq.n	800a992 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a952:	e03b      	b.n	800a9cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d007      	beq.n	800a96c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a95c:	f7f7 ff6a 	bl	8002834 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a960:	4b1c      	ldr	r3, [pc, #112]	; (800a9d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	4a1b      	ldr	r2, [pc, #108]	; (800a9d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a966:	f023 0306 	bic.w	r3, r3, #6
 800a96a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	6812      	ldr	r2, [r2, #0]
 800a97a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a97e:	f023 0301 	bic.w	r3, r3, #1
 800a982:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fbea 	bl	8009164 <USBD_LL_Resume>
    break;
 800a990:	e01c      	b.n	800a9cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	6812      	ldr	r2, [r2, #0]
 800a9a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9a4:	f043 0301 	orr.w	r3, r3, #1
 800a9a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fbc1 	bl	8009138 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d005      	beq.n	800a9ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9be:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	4a04      	ldr	r2, [pc, #16]	; (800a9d4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9c4:	f043 0306 	orr.w	r3, r3, #6
 800a9c8:	6113      	str	r3, [r2, #16]
    break;
 800a9ca:	bf00      	nop
}
 800a9cc:	bf00      	nop
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	e000ed00 	.word	0xe000ed00

0800a9d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a9e0:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <USBD_static_malloc+0x18>)
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	20000224 	.word	0x20000224

0800a9f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]

}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa16:	79fb      	ldrb	r3, [r7, #7]
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d817      	bhi.n	800aa4c <USBD_Get_USB_Status+0x44>
 800aa1c:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <USBD_Get_USB_Status+0x1c>)
 800aa1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa22:	bf00      	nop
 800aa24:	0800aa35 	.word	0x0800aa35
 800aa28:	0800aa3b 	.word	0x0800aa3b
 800aa2c:	0800aa41 	.word	0x0800aa41
 800aa30:	0800aa47 	.word	0x0800aa47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]
    break;
 800aa38:	e00b      	b.n	800aa52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa3e:	e008      	b.n	800aa52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa40:	2301      	movs	r3, #1
 800aa42:	73fb      	strb	r3, [r7, #15]
    break;
 800aa44:	e005      	b.n	800aa52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa46:	2303      	movs	r3, #3
 800aa48:	73fb      	strb	r3, [r7, #15]
    break;
 800aa4a:	e002      	b.n	800aa52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa50:	bf00      	nop
  }
  return usb_status;
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <__errno>:
 800aa60:	4b01      	ldr	r3, [pc, #4]	; (800aa68 <__errno+0x8>)
 800aa62:	6818      	ldr	r0, [r3, #0]
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	20000194 	.word	0x20000194

0800aa6c <__libc_init_array>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	4d0d      	ldr	r5, [pc, #52]	; (800aaa4 <__libc_init_array+0x38>)
 800aa70:	4c0d      	ldr	r4, [pc, #52]	; (800aaa8 <__libc_init_array+0x3c>)
 800aa72:	1b64      	subs	r4, r4, r5
 800aa74:	10a4      	asrs	r4, r4, #2
 800aa76:	2600      	movs	r6, #0
 800aa78:	42a6      	cmp	r6, r4
 800aa7a:	d109      	bne.n	800aa90 <__libc_init_array+0x24>
 800aa7c:	4d0b      	ldr	r5, [pc, #44]	; (800aaac <__libc_init_array+0x40>)
 800aa7e:	4c0c      	ldr	r4, [pc, #48]	; (800aab0 <__libc_init_array+0x44>)
 800aa80:	f002 f980 	bl	800cd84 <_init>
 800aa84:	1b64      	subs	r4, r4, r5
 800aa86:	10a4      	asrs	r4, r4, #2
 800aa88:	2600      	movs	r6, #0
 800aa8a:	42a6      	cmp	r6, r4
 800aa8c:	d105      	bne.n	800aa9a <__libc_init_array+0x2e>
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa94:	4798      	blx	r3
 800aa96:	3601      	adds	r6, #1
 800aa98:	e7ee      	b.n	800aa78 <__libc_init_array+0xc>
 800aa9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa9e:	4798      	blx	r3
 800aaa0:	3601      	adds	r6, #1
 800aaa2:	e7f2      	b.n	800aa8a <__libc_init_array+0x1e>
 800aaa4:	0800cf28 	.word	0x0800cf28
 800aaa8:	0800cf28 	.word	0x0800cf28
 800aaac:	0800cf28 	.word	0x0800cf28
 800aab0:	0800cf2c 	.word	0x0800cf2c

0800aab4 <memcpy>:
 800aab4:	440a      	add	r2, r1
 800aab6:	4291      	cmp	r1, r2
 800aab8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aabc:	d100      	bne.n	800aac0 <memcpy+0xc>
 800aabe:	4770      	bx	lr
 800aac0:	b510      	push	{r4, lr}
 800aac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaca:	4291      	cmp	r1, r2
 800aacc:	d1f9      	bne.n	800aac2 <memcpy+0xe>
 800aace:	bd10      	pop	{r4, pc}

0800aad0 <memset>:
 800aad0:	4402      	add	r2, r0
 800aad2:	4603      	mov	r3, r0
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d100      	bne.n	800aada <memset+0xa>
 800aad8:	4770      	bx	lr
 800aada:	f803 1b01 	strb.w	r1, [r3], #1
 800aade:	e7f9      	b.n	800aad4 <memset+0x4>

0800aae0 <iprintf>:
 800aae0:	b40f      	push	{r0, r1, r2, r3}
 800aae2:	4b0a      	ldr	r3, [pc, #40]	; (800ab0c <iprintf+0x2c>)
 800aae4:	b513      	push	{r0, r1, r4, lr}
 800aae6:	681c      	ldr	r4, [r3, #0]
 800aae8:	b124      	cbz	r4, 800aaf4 <iprintf+0x14>
 800aaea:	69a3      	ldr	r3, [r4, #24]
 800aaec:	b913      	cbnz	r3, 800aaf4 <iprintf+0x14>
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 f87c 	bl	800abec <__sinit>
 800aaf4:	ab05      	add	r3, sp, #20
 800aaf6:	9a04      	ldr	r2, [sp, #16]
 800aaf8:	68a1      	ldr	r1, [r4, #8]
 800aafa:	9301      	str	r3, [sp, #4]
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 f999 	bl	800ae34 <_vfiprintf_r>
 800ab02:	b002      	add	sp, #8
 800ab04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab08:	b004      	add	sp, #16
 800ab0a:	4770      	bx	lr
 800ab0c:	20000194 	.word	0x20000194

0800ab10 <putchar>:
 800ab10:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <putchar+0x28>)
 800ab12:	b513      	push	{r0, r1, r4, lr}
 800ab14:	681c      	ldr	r4, [r3, #0]
 800ab16:	4601      	mov	r1, r0
 800ab18:	b134      	cbz	r4, 800ab28 <putchar+0x18>
 800ab1a:	69a3      	ldr	r3, [r4, #24]
 800ab1c:	b923      	cbnz	r3, 800ab28 <putchar+0x18>
 800ab1e:	9001      	str	r0, [sp, #4]
 800ab20:	4620      	mov	r0, r4
 800ab22:	f000 f863 	bl	800abec <__sinit>
 800ab26:	9901      	ldr	r1, [sp, #4]
 800ab28:	68a2      	ldr	r2, [r4, #8]
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	b002      	add	sp, #8
 800ab2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab32:	f000 bc43 	b.w	800b3bc <_putc_r>
 800ab36:	bf00      	nop
 800ab38:	20000194 	.word	0x20000194

0800ab3c <std>:
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	4604      	mov	r4, r0
 800ab42:	e9c0 3300 	strd	r3, r3, [r0]
 800ab46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab4a:	6083      	str	r3, [r0, #8]
 800ab4c:	8181      	strh	r1, [r0, #12]
 800ab4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab50:	81c2      	strh	r2, [r0, #14]
 800ab52:	6183      	str	r3, [r0, #24]
 800ab54:	4619      	mov	r1, r3
 800ab56:	2208      	movs	r2, #8
 800ab58:	305c      	adds	r0, #92	; 0x5c
 800ab5a:	f7ff ffb9 	bl	800aad0 <memset>
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <std+0x38>)
 800ab60:	6263      	str	r3, [r4, #36]	; 0x24
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <std+0x3c>)
 800ab64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab66:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <std+0x40>)
 800ab68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab6a:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <std+0x44>)
 800ab6c:	6224      	str	r4, [r4, #32]
 800ab6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	bf00      	nop
 800ab74:	0800b46d 	.word	0x0800b46d
 800ab78:	0800b48f 	.word	0x0800b48f
 800ab7c:	0800b4c7 	.word	0x0800b4c7
 800ab80:	0800b4eb 	.word	0x0800b4eb

0800ab84 <_cleanup_r>:
 800ab84:	4901      	ldr	r1, [pc, #4]	; (800ab8c <_cleanup_r+0x8>)
 800ab86:	f000 b8af 	b.w	800ace8 <_fwalk_reent>
 800ab8a:	bf00      	nop
 800ab8c:	0800b7c5 	.word	0x0800b7c5

0800ab90 <__sfmoreglue>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	1e4a      	subs	r2, r1, #1
 800ab94:	2568      	movs	r5, #104	; 0x68
 800ab96:	4355      	muls	r5, r2
 800ab98:	460e      	mov	r6, r1
 800ab9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab9e:	f000 f8c5 	bl	800ad2c <_malloc_r>
 800aba2:	4604      	mov	r4, r0
 800aba4:	b140      	cbz	r0, 800abb8 <__sfmoreglue+0x28>
 800aba6:	2100      	movs	r1, #0
 800aba8:	e9c0 1600 	strd	r1, r6, [r0]
 800abac:	300c      	adds	r0, #12
 800abae:	60a0      	str	r0, [r4, #8]
 800abb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abb4:	f7ff ff8c 	bl	800aad0 <memset>
 800abb8:	4620      	mov	r0, r4
 800abba:	bd70      	pop	{r4, r5, r6, pc}

0800abbc <__sfp_lock_acquire>:
 800abbc:	4801      	ldr	r0, [pc, #4]	; (800abc4 <__sfp_lock_acquire+0x8>)
 800abbe:	f000 b8b3 	b.w	800ad28 <__retarget_lock_acquire_recursive>
 800abc2:	bf00      	nop
 800abc4:	20001038 	.word	0x20001038

0800abc8 <__sfp_lock_release>:
 800abc8:	4801      	ldr	r0, [pc, #4]	; (800abd0 <__sfp_lock_release+0x8>)
 800abca:	f000 b8ae 	b.w	800ad2a <__retarget_lock_release_recursive>
 800abce:	bf00      	nop
 800abd0:	20001038 	.word	0x20001038

0800abd4 <__sinit_lock_acquire>:
 800abd4:	4801      	ldr	r0, [pc, #4]	; (800abdc <__sinit_lock_acquire+0x8>)
 800abd6:	f000 b8a7 	b.w	800ad28 <__retarget_lock_acquire_recursive>
 800abda:	bf00      	nop
 800abdc:	20001033 	.word	0x20001033

0800abe0 <__sinit_lock_release>:
 800abe0:	4801      	ldr	r0, [pc, #4]	; (800abe8 <__sinit_lock_release+0x8>)
 800abe2:	f000 b8a2 	b.w	800ad2a <__retarget_lock_release_recursive>
 800abe6:	bf00      	nop
 800abe8:	20001033 	.word	0x20001033

0800abec <__sinit>:
 800abec:	b510      	push	{r4, lr}
 800abee:	4604      	mov	r4, r0
 800abf0:	f7ff fff0 	bl	800abd4 <__sinit_lock_acquire>
 800abf4:	69a3      	ldr	r3, [r4, #24]
 800abf6:	b11b      	cbz	r3, 800ac00 <__sinit+0x14>
 800abf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abfc:	f7ff bff0 	b.w	800abe0 <__sinit_lock_release>
 800ac00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac04:	6523      	str	r3, [r4, #80]	; 0x50
 800ac06:	4b13      	ldr	r3, [pc, #76]	; (800ac54 <__sinit+0x68>)
 800ac08:	4a13      	ldr	r2, [pc, #76]	; (800ac58 <__sinit+0x6c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	bf04      	itt	eq
 800ac12:	2301      	moveq	r3, #1
 800ac14:	61a3      	streq	r3, [r4, #24]
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f820 	bl	800ac5c <__sfp>
 800ac1c:	6060      	str	r0, [r4, #4]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f81c 	bl	800ac5c <__sfp>
 800ac24:	60a0      	str	r0, [r4, #8]
 800ac26:	4620      	mov	r0, r4
 800ac28:	f000 f818 	bl	800ac5c <__sfp>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	60e0      	str	r0, [r4, #12]
 800ac30:	2104      	movs	r1, #4
 800ac32:	6860      	ldr	r0, [r4, #4]
 800ac34:	f7ff ff82 	bl	800ab3c <std>
 800ac38:	68a0      	ldr	r0, [r4, #8]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	2109      	movs	r1, #9
 800ac3e:	f7ff ff7d 	bl	800ab3c <std>
 800ac42:	68e0      	ldr	r0, [r4, #12]
 800ac44:	2202      	movs	r2, #2
 800ac46:	2112      	movs	r1, #18
 800ac48:	f7ff ff78 	bl	800ab3c <std>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	61a3      	str	r3, [r4, #24]
 800ac50:	e7d2      	b.n	800abf8 <__sinit+0xc>
 800ac52:	bf00      	nop
 800ac54:	0800ce04 	.word	0x0800ce04
 800ac58:	0800ab85 	.word	0x0800ab85

0800ac5c <__sfp>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	4607      	mov	r7, r0
 800ac60:	f7ff ffac 	bl	800abbc <__sfp_lock_acquire>
 800ac64:	4b1e      	ldr	r3, [pc, #120]	; (800ace0 <__sfp+0x84>)
 800ac66:	681e      	ldr	r6, [r3, #0]
 800ac68:	69b3      	ldr	r3, [r6, #24]
 800ac6a:	b913      	cbnz	r3, 800ac72 <__sfp+0x16>
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff ffbd 	bl	800abec <__sinit>
 800ac72:	3648      	adds	r6, #72	; 0x48
 800ac74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	d503      	bpl.n	800ac84 <__sfp+0x28>
 800ac7c:	6833      	ldr	r3, [r6, #0]
 800ac7e:	b30b      	cbz	r3, 800acc4 <__sfp+0x68>
 800ac80:	6836      	ldr	r6, [r6, #0]
 800ac82:	e7f7      	b.n	800ac74 <__sfp+0x18>
 800ac84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac88:	b9d5      	cbnz	r5, 800acc0 <__sfp+0x64>
 800ac8a:	4b16      	ldr	r3, [pc, #88]	; (800ace4 <__sfp+0x88>)
 800ac8c:	60e3      	str	r3, [r4, #12]
 800ac8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac92:	6665      	str	r5, [r4, #100]	; 0x64
 800ac94:	f000 f847 	bl	800ad26 <__retarget_lock_init_recursive>
 800ac98:	f7ff ff96 	bl	800abc8 <__sfp_lock_release>
 800ac9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aca4:	6025      	str	r5, [r4, #0]
 800aca6:	61a5      	str	r5, [r4, #24]
 800aca8:	2208      	movs	r2, #8
 800acaa:	4629      	mov	r1, r5
 800acac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acb0:	f7ff ff0e 	bl	800aad0 <memset>
 800acb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acbc:	4620      	mov	r0, r4
 800acbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc0:	3468      	adds	r4, #104	; 0x68
 800acc2:	e7d9      	b.n	800ac78 <__sfp+0x1c>
 800acc4:	2104      	movs	r1, #4
 800acc6:	4638      	mov	r0, r7
 800acc8:	f7ff ff62 	bl	800ab90 <__sfmoreglue>
 800accc:	4604      	mov	r4, r0
 800acce:	6030      	str	r0, [r6, #0]
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d1d5      	bne.n	800ac80 <__sfp+0x24>
 800acd4:	f7ff ff78 	bl	800abc8 <__sfp_lock_release>
 800acd8:	230c      	movs	r3, #12
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	e7ee      	b.n	800acbc <__sfp+0x60>
 800acde:	bf00      	nop
 800ace0:	0800ce04 	.word	0x0800ce04
 800ace4:	ffff0001 	.word	0xffff0001

0800ace8 <_fwalk_reent>:
 800ace8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acec:	4606      	mov	r6, r0
 800acee:	4688      	mov	r8, r1
 800acf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acf4:	2700      	movs	r7, #0
 800acf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acfa:	f1b9 0901 	subs.w	r9, r9, #1
 800acfe:	d505      	bpl.n	800ad0c <_fwalk_reent+0x24>
 800ad00:	6824      	ldr	r4, [r4, #0]
 800ad02:	2c00      	cmp	r4, #0
 800ad04:	d1f7      	bne.n	800acf6 <_fwalk_reent+0xe>
 800ad06:	4638      	mov	r0, r7
 800ad08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0c:	89ab      	ldrh	r3, [r5, #12]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d907      	bls.n	800ad22 <_fwalk_reent+0x3a>
 800ad12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad16:	3301      	adds	r3, #1
 800ad18:	d003      	beq.n	800ad22 <_fwalk_reent+0x3a>
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	47c0      	blx	r8
 800ad20:	4307      	orrs	r7, r0
 800ad22:	3568      	adds	r5, #104	; 0x68
 800ad24:	e7e9      	b.n	800acfa <_fwalk_reent+0x12>

0800ad26 <__retarget_lock_init_recursive>:
 800ad26:	4770      	bx	lr

0800ad28 <__retarget_lock_acquire_recursive>:
 800ad28:	4770      	bx	lr

0800ad2a <__retarget_lock_release_recursive>:
 800ad2a:	4770      	bx	lr

0800ad2c <_malloc_r>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	1ccd      	adds	r5, r1, #3
 800ad30:	f025 0503 	bic.w	r5, r5, #3
 800ad34:	3508      	adds	r5, #8
 800ad36:	2d0c      	cmp	r5, #12
 800ad38:	bf38      	it	cc
 800ad3a:	250c      	movcc	r5, #12
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	4606      	mov	r6, r0
 800ad40:	db01      	blt.n	800ad46 <_malloc_r+0x1a>
 800ad42:	42a9      	cmp	r1, r5
 800ad44:	d903      	bls.n	800ad4e <_malloc_r+0x22>
 800ad46:	230c      	movs	r3, #12
 800ad48:	6033      	str	r3, [r6, #0]
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad4e:	f000 fdeb 	bl	800b928 <__malloc_lock>
 800ad52:	4921      	ldr	r1, [pc, #132]	; (800add8 <_malloc_r+0xac>)
 800ad54:	680a      	ldr	r2, [r1, #0]
 800ad56:	4614      	mov	r4, r2
 800ad58:	b99c      	cbnz	r4, 800ad82 <_malloc_r+0x56>
 800ad5a:	4f20      	ldr	r7, [pc, #128]	; (800addc <_malloc_r+0xb0>)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	b923      	cbnz	r3, 800ad6a <_malloc_r+0x3e>
 800ad60:	4621      	mov	r1, r4
 800ad62:	4630      	mov	r0, r6
 800ad64:	f000 fb72 	bl	800b44c <_sbrk_r>
 800ad68:	6038      	str	r0, [r7, #0]
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f000 fb6d 	bl	800b44c <_sbrk_r>
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	d123      	bne.n	800adbe <_malloc_r+0x92>
 800ad76:	230c      	movs	r3, #12
 800ad78:	6033      	str	r3, [r6, #0]
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	f000 fdda 	bl	800b934 <__malloc_unlock>
 800ad80:	e7e3      	b.n	800ad4a <_malloc_r+0x1e>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	1b5b      	subs	r3, r3, r5
 800ad86:	d417      	bmi.n	800adb8 <_malloc_r+0x8c>
 800ad88:	2b0b      	cmp	r3, #11
 800ad8a:	d903      	bls.n	800ad94 <_malloc_r+0x68>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	441c      	add	r4, r3
 800ad90:	6025      	str	r5, [r4, #0]
 800ad92:	e004      	b.n	800ad9e <_malloc_r+0x72>
 800ad94:	6863      	ldr	r3, [r4, #4]
 800ad96:	42a2      	cmp	r2, r4
 800ad98:	bf0c      	ite	eq
 800ad9a:	600b      	streq	r3, [r1, #0]
 800ad9c:	6053      	strne	r3, [r2, #4]
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 fdc8 	bl	800b934 <__malloc_unlock>
 800ada4:	f104 000b 	add.w	r0, r4, #11
 800ada8:	1d23      	adds	r3, r4, #4
 800adaa:	f020 0007 	bic.w	r0, r0, #7
 800adae:	1ac2      	subs	r2, r0, r3
 800adb0:	d0cc      	beq.n	800ad4c <_malloc_r+0x20>
 800adb2:	1a1b      	subs	r3, r3, r0
 800adb4:	50a3      	str	r3, [r4, r2]
 800adb6:	e7c9      	b.n	800ad4c <_malloc_r+0x20>
 800adb8:	4622      	mov	r2, r4
 800adba:	6864      	ldr	r4, [r4, #4]
 800adbc:	e7cc      	b.n	800ad58 <_malloc_r+0x2c>
 800adbe:	1cc4      	adds	r4, r0, #3
 800adc0:	f024 0403 	bic.w	r4, r4, #3
 800adc4:	42a0      	cmp	r0, r4
 800adc6:	d0e3      	beq.n	800ad90 <_malloc_r+0x64>
 800adc8:	1a21      	subs	r1, r4, r0
 800adca:	4630      	mov	r0, r6
 800adcc:	f000 fb3e 	bl	800b44c <_sbrk_r>
 800add0:	3001      	adds	r0, #1
 800add2:	d1dd      	bne.n	800ad90 <_malloc_r+0x64>
 800add4:	e7cf      	b.n	800ad76 <_malloc_r+0x4a>
 800add6:	bf00      	nop
 800add8:	2000024c 	.word	0x2000024c
 800addc:	20000250 	.word	0x20000250

0800ade0 <__sfputc_r>:
 800ade0:	6893      	ldr	r3, [r2, #8]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	b410      	push	{r4}
 800ade8:	6093      	str	r3, [r2, #8]
 800adea:	da08      	bge.n	800adfe <__sfputc_r+0x1e>
 800adec:	6994      	ldr	r4, [r2, #24]
 800adee:	42a3      	cmp	r3, r4
 800adf0:	db01      	blt.n	800adf6 <__sfputc_r+0x16>
 800adf2:	290a      	cmp	r1, #10
 800adf4:	d103      	bne.n	800adfe <__sfputc_r+0x1e>
 800adf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adfa:	f000 bb7b 	b.w	800b4f4 <__swbuf_r>
 800adfe:	6813      	ldr	r3, [r2, #0]
 800ae00:	1c58      	adds	r0, r3, #1
 800ae02:	6010      	str	r0, [r2, #0]
 800ae04:	7019      	strb	r1, [r3, #0]
 800ae06:	4608      	mov	r0, r1
 800ae08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <__sfputs_r>:
 800ae0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae10:	4606      	mov	r6, r0
 800ae12:	460f      	mov	r7, r1
 800ae14:	4614      	mov	r4, r2
 800ae16:	18d5      	adds	r5, r2, r3
 800ae18:	42ac      	cmp	r4, r5
 800ae1a:	d101      	bne.n	800ae20 <__sfputs_r+0x12>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e007      	b.n	800ae30 <__sfputs_r+0x22>
 800ae20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae24:	463a      	mov	r2, r7
 800ae26:	4630      	mov	r0, r6
 800ae28:	f7ff ffda 	bl	800ade0 <__sfputc_r>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d1f3      	bne.n	800ae18 <__sfputs_r+0xa>
 800ae30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae34 <_vfiprintf_r>:
 800ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	460d      	mov	r5, r1
 800ae3a:	b09d      	sub	sp, #116	; 0x74
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	4698      	mov	r8, r3
 800ae40:	4606      	mov	r6, r0
 800ae42:	b118      	cbz	r0, 800ae4c <_vfiprintf_r+0x18>
 800ae44:	6983      	ldr	r3, [r0, #24]
 800ae46:	b90b      	cbnz	r3, 800ae4c <_vfiprintf_r+0x18>
 800ae48:	f7ff fed0 	bl	800abec <__sinit>
 800ae4c:	4b89      	ldr	r3, [pc, #548]	; (800b074 <_vfiprintf_r+0x240>)
 800ae4e:	429d      	cmp	r5, r3
 800ae50:	d11b      	bne.n	800ae8a <_vfiprintf_r+0x56>
 800ae52:	6875      	ldr	r5, [r6, #4]
 800ae54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae56:	07d9      	lsls	r1, r3, #31
 800ae58:	d405      	bmi.n	800ae66 <_vfiprintf_r+0x32>
 800ae5a:	89ab      	ldrh	r3, [r5, #12]
 800ae5c:	059a      	lsls	r2, r3, #22
 800ae5e:	d402      	bmi.n	800ae66 <_vfiprintf_r+0x32>
 800ae60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae62:	f7ff ff61 	bl	800ad28 <__retarget_lock_acquire_recursive>
 800ae66:	89ab      	ldrh	r3, [r5, #12]
 800ae68:	071b      	lsls	r3, r3, #28
 800ae6a:	d501      	bpl.n	800ae70 <_vfiprintf_r+0x3c>
 800ae6c:	692b      	ldr	r3, [r5, #16]
 800ae6e:	b9eb      	cbnz	r3, 800aeac <_vfiprintf_r+0x78>
 800ae70:	4629      	mov	r1, r5
 800ae72:	4630      	mov	r0, r6
 800ae74:	f000 fba2 	bl	800b5bc <__swsetup_r>
 800ae78:	b1c0      	cbz	r0, 800aeac <_vfiprintf_r+0x78>
 800ae7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae7c:	07dc      	lsls	r4, r3, #31
 800ae7e:	d50e      	bpl.n	800ae9e <_vfiprintf_r+0x6a>
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295
 800ae84:	b01d      	add	sp, #116	; 0x74
 800ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8a:	4b7b      	ldr	r3, [pc, #492]	; (800b078 <_vfiprintf_r+0x244>)
 800ae8c:	429d      	cmp	r5, r3
 800ae8e:	d101      	bne.n	800ae94 <_vfiprintf_r+0x60>
 800ae90:	68b5      	ldr	r5, [r6, #8]
 800ae92:	e7df      	b.n	800ae54 <_vfiprintf_r+0x20>
 800ae94:	4b79      	ldr	r3, [pc, #484]	; (800b07c <_vfiprintf_r+0x248>)
 800ae96:	429d      	cmp	r5, r3
 800ae98:	bf08      	it	eq
 800ae9a:	68f5      	ldreq	r5, [r6, #12]
 800ae9c:	e7da      	b.n	800ae54 <_vfiprintf_r+0x20>
 800ae9e:	89ab      	ldrh	r3, [r5, #12]
 800aea0:	0598      	lsls	r0, r3, #22
 800aea2:	d4ed      	bmi.n	800ae80 <_vfiprintf_r+0x4c>
 800aea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aea6:	f7ff ff40 	bl	800ad2a <__retarget_lock_release_recursive>
 800aeaa:	e7e9      	b.n	800ae80 <_vfiprintf_r+0x4c>
 800aeac:	2300      	movs	r3, #0
 800aeae:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb0:	2320      	movs	r3, #32
 800aeb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeba:	2330      	movs	r3, #48	; 0x30
 800aebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b080 <_vfiprintf_r+0x24c>
 800aec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aec4:	f04f 0901 	mov.w	r9, #1
 800aec8:	4623      	mov	r3, r4
 800aeca:	469a      	mov	sl, r3
 800aecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed0:	b10a      	cbz	r2, 800aed6 <_vfiprintf_r+0xa2>
 800aed2:	2a25      	cmp	r2, #37	; 0x25
 800aed4:	d1f9      	bne.n	800aeca <_vfiprintf_r+0x96>
 800aed6:	ebba 0b04 	subs.w	fp, sl, r4
 800aeda:	d00b      	beq.n	800aef4 <_vfiprintf_r+0xc0>
 800aedc:	465b      	mov	r3, fp
 800aede:	4622      	mov	r2, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff ff93 	bl	800ae0e <__sfputs_r>
 800aee8:	3001      	adds	r0, #1
 800aeea:	f000 80aa 	beq.w	800b042 <_vfiprintf_r+0x20e>
 800aeee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef0:	445a      	add	r2, fp
 800aef2:	9209      	str	r2, [sp, #36]	; 0x24
 800aef4:	f89a 3000 	ldrb.w	r3, [sl]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 80a2 	beq.w	800b042 <_vfiprintf_r+0x20e>
 800aefe:	2300      	movs	r3, #0
 800af00:	f04f 32ff 	mov.w	r2, #4294967295
 800af04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af08:	f10a 0a01 	add.w	sl, sl, #1
 800af0c:	9304      	str	r3, [sp, #16]
 800af0e:	9307      	str	r3, [sp, #28]
 800af10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af14:	931a      	str	r3, [sp, #104]	; 0x68
 800af16:	4654      	mov	r4, sl
 800af18:	2205      	movs	r2, #5
 800af1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1e:	4858      	ldr	r0, [pc, #352]	; (800b080 <_vfiprintf_r+0x24c>)
 800af20:	f7f5 f976 	bl	8000210 <memchr>
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	b9d8      	cbnz	r0, 800af60 <_vfiprintf_r+0x12c>
 800af28:	06d1      	lsls	r1, r2, #27
 800af2a:	bf44      	itt	mi
 800af2c:	2320      	movmi	r3, #32
 800af2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af32:	0713      	lsls	r3, r2, #28
 800af34:	bf44      	itt	mi
 800af36:	232b      	movmi	r3, #43	; 0x2b
 800af38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af3c:	f89a 3000 	ldrb.w	r3, [sl]
 800af40:	2b2a      	cmp	r3, #42	; 0x2a
 800af42:	d015      	beq.n	800af70 <_vfiprintf_r+0x13c>
 800af44:	9a07      	ldr	r2, [sp, #28]
 800af46:	4654      	mov	r4, sl
 800af48:	2000      	movs	r0, #0
 800af4a:	f04f 0c0a 	mov.w	ip, #10
 800af4e:	4621      	mov	r1, r4
 800af50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af54:	3b30      	subs	r3, #48	; 0x30
 800af56:	2b09      	cmp	r3, #9
 800af58:	d94e      	bls.n	800aff8 <_vfiprintf_r+0x1c4>
 800af5a:	b1b0      	cbz	r0, 800af8a <_vfiprintf_r+0x156>
 800af5c:	9207      	str	r2, [sp, #28]
 800af5e:	e014      	b.n	800af8a <_vfiprintf_r+0x156>
 800af60:	eba0 0308 	sub.w	r3, r0, r8
 800af64:	fa09 f303 	lsl.w	r3, r9, r3
 800af68:	4313      	orrs	r3, r2
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	46a2      	mov	sl, r4
 800af6e:	e7d2      	b.n	800af16 <_vfiprintf_r+0xe2>
 800af70:	9b03      	ldr	r3, [sp, #12]
 800af72:	1d19      	adds	r1, r3, #4
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	9103      	str	r1, [sp, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	bfbb      	ittet	lt
 800af7c:	425b      	neglt	r3, r3
 800af7e:	f042 0202 	orrlt.w	r2, r2, #2
 800af82:	9307      	strge	r3, [sp, #28]
 800af84:	9307      	strlt	r3, [sp, #28]
 800af86:	bfb8      	it	lt
 800af88:	9204      	strlt	r2, [sp, #16]
 800af8a:	7823      	ldrb	r3, [r4, #0]
 800af8c:	2b2e      	cmp	r3, #46	; 0x2e
 800af8e:	d10c      	bne.n	800afaa <_vfiprintf_r+0x176>
 800af90:	7863      	ldrb	r3, [r4, #1]
 800af92:	2b2a      	cmp	r3, #42	; 0x2a
 800af94:	d135      	bne.n	800b002 <_vfiprintf_r+0x1ce>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	1d1a      	adds	r2, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9203      	str	r2, [sp, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfb8      	it	lt
 800afa2:	f04f 33ff 	movlt.w	r3, #4294967295
 800afa6:	3402      	adds	r4, #2
 800afa8:	9305      	str	r3, [sp, #20]
 800afaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b090 <_vfiprintf_r+0x25c>
 800afae:	7821      	ldrb	r1, [r4, #0]
 800afb0:	2203      	movs	r2, #3
 800afb2:	4650      	mov	r0, sl
 800afb4:	f7f5 f92c 	bl	8000210 <memchr>
 800afb8:	b140      	cbz	r0, 800afcc <_vfiprintf_r+0x198>
 800afba:	2340      	movs	r3, #64	; 0x40
 800afbc:	eba0 000a 	sub.w	r0, r0, sl
 800afc0:	fa03 f000 	lsl.w	r0, r3, r0
 800afc4:	9b04      	ldr	r3, [sp, #16]
 800afc6:	4303      	orrs	r3, r0
 800afc8:	3401      	adds	r4, #1
 800afca:	9304      	str	r3, [sp, #16]
 800afcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd0:	482c      	ldr	r0, [pc, #176]	; (800b084 <_vfiprintf_r+0x250>)
 800afd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afd6:	2206      	movs	r2, #6
 800afd8:	f7f5 f91a 	bl	8000210 <memchr>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d03f      	beq.n	800b060 <_vfiprintf_r+0x22c>
 800afe0:	4b29      	ldr	r3, [pc, #164]	; (800b088 <_vfiprintf_r+0x254>)
 800afe2:	bb1b      	cbnz	r3, 800b02c <_vfiprintf_r+0x1f8>
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	3307      	adds	r3, #7
 800afe8:	f023 0307 	bic.w	r3, r3, #7
 800afec:	3308      	adds	r3, #8
 800afee:	9303      	str	r3, [sp, #12]
 800aff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff2:	443b      	add	r3, r7
 800aff4:	9309      	str	r3, [sp, #36]	; 0x24
 800aff6:	e767      	b.n	800aec8 <_vfiprintf_r+0x94>
 800aff8:	fb0c 3202 	mla	r2, ip, r2, r3
 800affc:	460c      	mov	r4, r1
 800affe:	2001      	movs	r0, #1
 800b000:	e7a5      	b.n	800af4e <_vfiprintf_r+0x11a>
 800b002:	2300      	movs	r3, #0
 800b004:	3401      	adds	r4, #1
 800b006:	9305      	str	r3, [sp, #20]
 800b008:	4619      	mov	r1, r3
 800b00a:	f04f 0c0a 	mov.w	ip, #10
 800b00e:	4620      	mov	r0, r4
 800b010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b014:	3a30      	subs	r2, #48	; 0x30
 800b016:	2a09      	cmp	r2, #9
 800b018:	d903      	bls.n	800b022 <_vfiprintf_r+0x1ee>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d0c5      	beq.n	800afaa <_vfiprintf_r+0x176>
 800b01e:	9105      	str	r1, [sp, #20]
 800b020:	e7c3      	b.n	800afaa <_vfiprintf_r+0x176>
 800b022:	fb0c 2101 	mla	r1, ip, r1, r2
 800b026:	4604      	mov	r4, r0
 800b028:	2301      	movs	r3, #1
 800b02a:	e7f0      	b.n	800b00e <_vfiprintf_r+0x1da>
 800b02c:	ab03      	add	r3, sp, #12
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	462a      	mov	r2, r5
 800b032:	4b16      	ldr	r3, [pc, #88]	; (800b08c <_vfiprintf_r+0x258>)
 800b034:	a904      	add	r1, sp, #16
 800b036:	4630      	mov	r0, r6
 800b038:	f3af 8000 	nop.w
 800b03c:	4607      	mov	r7, r0
 800b03e:	1c78      	adds	r0, r7, #1
 800b040:	d1d6      	bne.n	800aff0 <_vfiprintf_r+0x1bc>
 800b042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b044:	07d9      	lsls	r1, r3, #31
 800b046:	d405      	bmi.n	800b054 <_vfiprintf_r+0x220>
 800b048:	89ab      	ldrh	r3, [r5, #12]
 800b04a:	059a      	lsls	r2, r3, #22
 800b04c:	d402      	bmi.n	800b054 <_vfiprintf_r+0x220>
 800b04e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b050:	f7ff fe6b 	bl	800ad2a <__retarget_lock_release_recursive>
 800b054:	89ab      	ldrh	r3, [r5, #12]
 800b056:	065b      	lsls	r3, r3, #25
 800b058:	f53f af12 	bmi.w	800ae80 <_vfiprintf_r+0x4c>
 800b05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b05e:	e711      	b.n	800ae84 <_vfiprintf_r+0x50>
 800b060:	ab03      	add	r3, sp, #12
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	462a      	mov	r2, r5
 800b066:	4b09      	ldr	r3, [pc, #36]	; (800b08c <_vfiprintf_r+0x258>)
 800b068:	a904      	add	r1, sp, #16
 800b06a:	4630      	mov	r0, r6
 800b06c:	f000 f880 	bl	800b170 <_printf_i>
 800b070:	e7e4      	b.n	800b03c <_vfiprintf_r+0x208>
 800b072:	bf00      	nop
 800b074:	0800ce28 	.word	0x0800ce28
 800b078:	0800ce48 	.word	0x0800ce48
 800b07c:	0800ce08 	.word	0x0800ce08
 800b080:	0800ce68 	.word	0x0800ce68
 800b084:	0800ce72 	.word	0x0800ce72
 800b088:	00000000 	.word	0x00000000
 800b08c:	0800ae0f 	.word	0x0800ae0f
 800b090:	0800ce6e 	.word	0x0800ce6e

0800b094 <_printf_common>:
 800b094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b098:	4616      	mov	r6, r2
 800b09a:	4699      	mov	r9, r3
 800b09c:	688a      	ldr	r2, [r1, #8]
 800b09e:	690b      	ldr	r3, [r1, #16]
 800b0a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	bfb8      	it	lt
 800b0a8:	4613      	movlt	r3, r2
 800b0aa:	6033      	str	r3, [r6, #0]
 800b0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	b10a      	cbz	r2, 800b0ba <_printf_common+0x26>
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	6033      	str	r3, [r6, #0]
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	0699      	lsls	r1, r3, #26
 800b0be:	bf42      	ittt	mi
 800b0c0:	6833      	ldrmi	r3, [r6, #0]
 800b0c2:	3302      	addmi	r3, #2
 800b0c4:	6033      	strmi	r3, [r6, #0]
 800b0c6:	6825      	ldr	r5, [r4, #0]
 800b0c8:	f015 0506 	ands.w	r5, r5, #6
 800b0cc:	d106      	bne.n	800b0dc <_printf_common+0x48>
 800b0ce:	f104 0a19 	add.w	sl, r4, #25
 800b0d2:	68e3      	ldr	r3, [r4, #12]
 800b0d4:	6832      	ldr	r2, [r6, #0]
 800b0d6:	1a9b      	subs	r3, r3, r2
 800b0d8:	42ab      	cmp	r3, r5
 800b0da:	dc26      	bgt.n	800b12a <_printf_common+0x96>
 800b0dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0e0:	1e13      	subs	r3, r2, #0
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	bf18      	it	ne
 800b0e6:	2301      	movne	r3, #1
 800b0e8:	0692      	lsls	r2, r2, #26
 800b0ea:	d42b      	bmi.n	800b144 <_printf_common+0xb0>
 800b0ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	47c0      	blx	r8
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	d01e      	beq.n	800b138 <_printf_common+0xa4>
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	68e5      	ldr	r5, [r4, #12]
 800b0fe:	6832      	ldr	r2, [r6, #0]
 800b100:	f003 0306 	and.w	r3, r3, #6
 800b104:	2b04      	cmp	r3, #4
 800b106:	bf08      	it	eq
 800b108:	1aad      	subeq	r5, r5, r2
 800b10a:	68a3      	ldr	r3, [r4, #8]
 800b10c:	6922      	ldr	r2, [r4, #16]
 800b10e:	bf0c      	ite	eq
 800b110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b114:	2500      	movne	r5, #0
 800b116:	4293      	cmp	r3, r2
 800b118:	bfc4      	itt	gt
 800b11a:	1a9b      	subgt	r3, r3, r2
 800b11c:	18ed      	addgt	r5, r5, r3
 800b11e:	2600      	movs	r6, #0
 800b120:	341a      	adds	r4, #26
 800b122:	42b5      	cmp	r5, r6
 800b124:	d11a      	bne.n	800b15c <_printf_common+0xc8>
 800b126:	2000      	movs	r0, #0
 800b128:	e008      	b.n	800b13c <_printf_common+0xa8>
 800b12a:	2301      	movs	r3, #1
 800b12c:	4652      	mov	r2, sl
 800b12e:	4649      	mov	r1, r9
 800b130:	4638      	mov	r0, r7
 800b132:	47c0      	blx	r8
 800b134:	3001      	adds	r0, #1
 800b136:	d103      	bne.n	800b140 <_printf_common+0xac>
 800b138:	f04f 30ff 	mov.w	r0, #4294967295
 800b13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b140:	3501      	adds	r5, #1
 800b142:	e7c6      	b.n	800b0d2 <_printf_common+0x3e>
 800b144:	18e1      	adds	r1, r4, r3
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	2030      	movs	r0, #48	; 0x30
 800b14a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b14e:	4422      	add	r2, r4
 800b150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b158:	3302      	adds	r3, #2
 800b15a:	e7c7      	b.n	800b0ec <_printf_common+0x58>
 800b15c:	2301      	movs	r3, #1
 800b15e:	4622      	mov	r2, r4
 800b160:	4649      	mov	r1, r9
 800b162:	4638      	mov	r0, r7
 800b164:	47c0      	blx	r8
 800b166:	3001      	adds	r0, #1
 800b168:	d0e6      	beq.n	800b138 <_printf_common+0xa4>
 800b16a:	3601      	adds	r6, #1
 800b16c:	e7d9      	b.n	800b122 <_printf_common+0x8e>
	...

0800b170 <_printf_i>:
 800b170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b174:	460c      	mov	r4, r1
 800b176:	4691      	mov	r9, r2
 800b178:	7e27      	ldrb	r7, [r4, #24]
 800b17a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b17c:	2f78      	cmp	r7, #120	; 0x78
 800b17e:	4680      	mov	r8, r0
 800b180:	469a      	mov	sl, r3
 800b182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b186:	d807      	bhi.n	800b198 <_printf_i+0x28>
 800b188:	2f62      	cmp	r7, #98	; 0x62
 800b18a:	d80a      	bhi.n	800b1a2 <_printf_i+0x32>
 800b18c:	2f00      	cmp	r7, #0
 800b18e:	f000 80d8 	beq.w	800b342 <_printf_i+0x1d2>
 800b192:	2f58      	cmp	r7, #88	; 0x58
 800b194:	f000 80a3 	beq.w	800b2de <_printf_i+0x16e>
 800b198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b19c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1a0:	e03a      	b.n	800b218 <_printf_i+0xa8>
 800b1a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1a6:	2b15      	cmp	r3, #21
 800b1a8:	d8f6      	bhi.n	800b198 <_printf_i+0x28>
 800b1aa:	a001      	add	r0, pc, #4	; (adr r0, 800b1b0 <_printf_i+0x40>)
 800b1ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b1b0:	0800b209 	.word	0x0800b209
 800b1b4:	0800b21d 	.word	0x0800b21d
 800b1b8:	0800b199 	.word	0x0800b199
 800b1bc:	0800b199 	.word	0x0800b199
 800b1c0:	0800b199 	.word	0x0800b199
 800b1c4:	0800b199 	.word	0x0800b199
 800b1c8:	0800b21d 	.word	0x0800b21d
 800b1cc:	0800b199 	.word	0x0800b199
 800b1d0:	0800b199 	.word	0x0800b199
 800b1d4:	0800b199 	.word	0x0800b199
 800b1d8:	0800b199 	.word	0x0800b199
 800b1dc:	0800b329 	.word	0x0800b329
 800b1e0:	0800b24d 	.word	0x0800b24d
 800b1e4:	0800b30b 	.word	0x0800b30b
 800b1e8:	0800b199 	.word	0x0800b199
 800b1ec:	0800b199 	.word	0x0800b199
 800b1f0:	0800b34b 	.word	0x0800b34b
 800b1f4:	0800b199 	.word	0x0800b199
 800b1f8:	0800b24d 	.word	0x0800b24d
 800b1fc:	0800b199 	.word	0x0800b199
 800b200:	0800b199 	.word	0x0800b199
 800b204:	0800b313 	.word	0x0800b313
 800b208:	680b      	ldr	r3, [r1, #0]
 800b20a:	1d1a      	adds	r2, r3, #4
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	600a      	str	r2, [r1, #0]
 800b210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b218:	2301      	movs	r3, #1
 800b21a:	e0a3      	b.n	800b364 <_printf_i+0x1f4>
 800b21c:	6825      	ldr	r5, [r4, #0]
 800b21e:	6808      	ldr	r0, [r1, #0]
 800b220:	062e      	lsls	r6, r5, #24
 800b222:	f100 0304 	add.w	r3, r0, #4
 800b226:	d50a      	bpl.n	800b23e <_printf_i+0xce>
 800b228:	6805      	ldr	r5, [r0, #0]
 800b22a:	600b      	str	r3, [r1, #0]
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	da03      	bge.n	800b238 <_printf_i+0xc8>
 800b230:	232d      	movs	r3, #45	; 0x2d
 800b232:	426d      	negs	r5, r5
 800b234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b238:	485e      	ldr	r0, [pc, #376]	; (800b3b4 <_printf_i+0x244>)
 800b23a:	230a      	movs	r3, #10
 800b23c:	e019      	b.n	800b272 <_printf_i+0x102>
 800b23e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b242:	6805      	ldr	r5, [r0, #0]
 800b244:	600b      	str	r3, [r1, #0]
 800b246:	bf18      	it	ne
 800b248:	b22d      	sxthne	r5, r5
 800b24a:	e7ef      	b.n	800b22c <_printf_i+0xbc>
 800b24c:	680b      	ldr	r3, [r1, #0]
 800b24e:	6825      	ldr	r5, [r4, #0]
 800b250:	1d18      	adds	r0, r3, #4
 800b252:	6008      	str	r0, [r1, #0]
 800b254:	0628      	lsls	r0, r5, #24
 800b256:	d501      	bpl.n	800b25c <_printf_i+0xec>
 800b258:	681d      	ldr	r5, [r3, #0]
 800b25a:	e002      	b.n	800b262 <_printf_i+0xf2>
 800b25c:	0669      	lsls	r1, r5, #25
 800b25e:	d5fb      	bpl.n	800b258 <_printf_i+0xe8>
 800b260:	881d      	ldrh	r5, [r3, #0]
 800b262:	4854      	ldr	r0, [pc, #336]	; (800b3b4 <_printf_i+0x244>)
 800b264:	2f6f      	cmp	r7, #111	; 0x6f
 800b266:	bf0c      	ite	eq
 800b268:	2308      	moveq	r3, #8
 800b26a:	230a      	movne	r3, #10
 800b26c:	2100      	movs	r1, #0
 800b26e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b272:	6866      	ldr	r6, [r4, #4]
 800b274:	60a6      	str	r6, [r4, #8]
 800b276:	2e00      	cmp	r6, #0
 800b278:	bfa2      	ittt	ge
 800b27a:	6821      	ldrge	r1, [r4, #0]
 800b27c:	f021 0104 	bicge.w	r1, r1, #4
 800b280:	6021      	strge	r1, [r4, #0]
 800b282:	b90d      	cbnz	r5, 800b288 <_printf_i+0x118>
 800b284:	2e00      	cmp	r6, #0
 800b286:	d04d      	beq.n	800b324 <_printf_i+0x1b4>
 800b288:	4616      	mov	r6, r2
 800b28a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b28e:	fb03 5711 	mls	r7, r3, r1, r5
 800b292:	5dc7      	ldrb	r7, [r0, r7]
 800b294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b298:	462f      	mov	r7, r5
 800b29a:	42bb      	cmp	r3, r7
 800b29c:	460d      	mov	r5, r1
 800b29e:	d9f4      	bls.n	800b28a <_printf_i+0x11a>
 800b2a0:	2b08      	cmp	r3, #8
 800b2a2:	d10b      	bne.n	800b2bc <_printf_i+0x14c>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	07df      	lsls	r7, r3, #31
 800b2a8:	d508      	bpl.n	800b2bc <_printf_i+0x14c>
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	6861      	ldr	r1, [r4, #4]
 800b2ae:	4299      	cmp	r1, r3
 800b2b0:	bfde      	ittt	le
 800b2b2:	2330      	movle	r3, #48	; 0x30
 800b2b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2bc:	1b92      	subs	r2, r2, r6
 800b2be:	6122      	str	r2, [r4, #16]
 800b2c0:	f8cd a000 	str.w	sl, [sp]
 800b2c4:	464b      	mov	r3, r9
 800b2c6:	aa03      	add	r2, sp, #12
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	f7ff fee2 	bl	800b094 <_printf_common>
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d14c      	bne.n	800b36e <_printf_i+0x1fe>
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d8:	b004      	add	sp, #16
 800b2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2de:	4835      	ldr	r0, [pc, #212]	; (800b3b4 <_printf_i+0x244>)
 800b2e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	680e      	ldr	r6, [r1, #0]
 800b2e8:	061f      	lsls	r7, r3, #24
 800b2ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800b2ee:	600e      	str	r6, [r1, #0]
 800b2f0:	d514      	bpl.n	800b31c <_printf_i+0x1ac>
 800b2f2:	07d9      	lsls	r1, r3, #31
 800b2f4:	bf44      	itt	mi
 800b2f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b2fa:	6023      	strmi	r3, [r4, #0]
 800b2fc:	b91d      	cbnz	r5, 800b306 <_printf_i+0x196>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	f023 0320 	bic.w	r3, r3, #32
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	2310      	movs	r3, #16
 800b308:	e7b0      	b.n	800b26c <_printf_i+0xfc>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	f043 0320 	orr.w	r3, r3, #32
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	2378      	movs	r3, #120	; 0x78
 800b314:	4828      	ldr	r0, [pc, #160]	; (800b3b8 <_printf_i+0x248>)
 800b316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b31a:	e7e3      	b.n	800b2e4 <_printf_i+0x174>
 800b31c:	065e      	lsls	r6, r3, #25
 800b31e:	bf48      	it	mi
 800b320:	b2ad      	uxthmi	r5, r5
 800b322:	e7e6      	b.n	800b2f2 <_printf_i+0x182>
 800b324:	4616      	mov	r6, r2
 800b326:	e7bb      	b.n	800b2a0 <_printf_i+0x130>
 800b328:	680b      	ldr	r3, [r1, #0]
 800b32a:	6826      	ldr	r6, [r4, #0]
 800b32c:	6960      	ldr	r0, [r4, #20]
 800b32e:	1d1d      	adds	r5, r3, #4
 800b330:	600d      	str	r5, [r1, #0]
 800b332:	0635      	lsls	r5, r6, #24
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	d501      	bpl.n	800b33c <_printf_i+0x1cc>
 800b338:	6018      	str	r0, [r3, #0]
 800b33a:	e002      	b.n	800b342 <_printf_i+0x1d2>
 800b33c:	0671      	lsls	r1, r6, #25
 800b33e:	d5fb      	bpl.n	800b338 <_printf_i+0x1c8>
 800b340:	8018      	strh	r0, [r3, #0]
 800b342:	2300      	movs	r3, #0
 800b344:	6123      	str	r3, [r4, #16]
 800b346:	4616      	mov	r6, r2
 800b348:	e7ba      	b.n	800b2c0 <_printf_i+0x150>
 800b34a:	680b      	ldr	r3, [r1, #0]
 800b34c:	1d1a      	adds	r2, r3, #4
 800b34e:	600a      	str	r2, [r1, #0]
 800b350:	681e      	ldr	r6, [r3, #0]
 800b352:	6862      	ldr	r2, [r4, #4]
 800b354:	2100      	movs	r1, #0
 800b356:	4630      	mov	r0, r6
 800b358:	f7f4 ff5a 	bl	8000210 <memchr>
 800b35c:	b108      	cbz	r0, 800b362 <_printf_i+0x1f2>
 800b35e:	1b80      	subs	r0, r0, r6
 800b360:	6060      	str	r0, [r4, #4]
 800b362:	6863      	ldr	r3, [r4, #4]
 800b364:	6123      	str	r3, [r4, #16]
 800b366:	2300      	movs	r3, #0
 800b368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b36c:	e7a8      	b.n	800b2c0 <_printf_i+0x150>
 800b36e:	6923      	ldr	r3, [r4, #16]
 800b370:	4632      	mov	r2, r6
 800b372:	4649      	mov	r1, r9
 800b374:	4640      	mov	r0, r8
 800b376:	47d0      	blx	sl
 800b378:	3001      	adds	r0, #1
 800b37a:	d0ab      	beq.n	800b2d4 <_printf_i+0x164>
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	079b      	lsls	r3, r3, #30
 800b380:	d413      	bmi.n	800b3aa <_printf_i+0x23a>
 800b382:	68e0      	ldr	r0, [r4, #12]
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	4298      	cmp	r0, r3
 800b388:	bfb8      	it	lt
 800b38a:	4618      	movlt	r0, r3
 800b38c:	e7a4      	b.n	800b2d8 <_printf_i+0x168>
 800b38e:	2301      	movs	r3, #1
 800b390:	4632      	mov	r2, r6
 800b392:	4649      	mov	r1, r9
 800b394:	4640      	mov	r0, r8
 800b396:	47d0      	blx	sl
 800b398:	3001      	adds	r0, #1
 800b39a:	d09b      	beq.n	800b2d4 <_printf_i+0x164>
 800b39c:	3501      	adds	r5, #1
 800b39e:	68e3      	ldr	r3, [r4, #12]
 800b3a0:	9903      	ldr	r1, [sp, #12]
 800b3a2:	1a5b      	subs	r3, r3, r1
 800b3a4:	42ab      	cmp	r3, r5
 800b3a6:	dcf2      	bgt.n	800b38e <_printf_i+0x21e>
 800b3a8:	e7eb      	b.n	800b382 <_printf_i+0x212>
 800b3aa:	2500      	movs	r5, #0
 800b3ac:	f104 0619 	add.w	r6, r4, #25
 800b3b0:	e7f5      	b.n	800b39e <_printf_i+0x22e>
 800b3b2:	bf00      	nop
 800b3b4:	0800ce79 	.word	0x0800ce79
 800b3b8:	0800ce8a 	.word	0x0800ce8a

0800b3bc <_putc_r>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	460d      	mov	r5, r1
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	b118      	cbz	r0, 800b3ce <_putc_r+0x12>
 800b3c6:	6983      	ldr	r3, [r0, #24]
 800b3c8:	b90b      	cbnz	r3, 800b3ce <_putc_r+0x12>
 800b3ca:	f7ff fc0f 	bl	800abec <__sinit>
 800b3ce:	4b1c      	ldr	r3, [pc, #112]	; (800b440 <_putc_r+0x84>)
 800b3d0:	429c      	cmp	r4, r3
 800b3d2:	d124      	bne.n	800b41e <_putc_r+0x62>
 800b3d4:	6874      	ldr	r4, [r6, #4]
 800b3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3d8:	07d8      	lsls	r0, r3, #31
 800b3da:	d405      	bmi.n	800b3e8 <_putc_r+0x2c>
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	0599      	lsls	r1, r3, #22
 800b3e0:	d402      	bmi.n	800b3e8 <_putc_r+0x2c>
 800b3e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3e4:	f7ff fca0 	bl	800ad28 <__retarget_lock_acquire_recursive>
 800b3e8:	68a3      	ldr	r3, [r4, #8]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	60a3      	str	r3, [r4, #8]
 800b3f0:	da05      	bge.n	800b3fe <_putc_r+0x42>
 800b3f2:	69a2      	ldr	r2, [r4, #24]
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	db1c      	blt.n	800b432 <_putc_r+0x76>
 800b3f8:	b2eb      	uxtb	r3, r5
 800b3fa:	2b0a      	cmp	r3, #10
 800b3fc:	d019      	beq.n	800b432 <_putc_r+0x76>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	6022      	str	r2, [r4, #0]
 800b404:	701d      	strb	r5, [r3, #0]
 800b406:	b2ed      	uxtb	r5, r5
 800b408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b40a:	07da      	lsls	r2, r3, #31
 800b40c:	d405      	bmi.n	800b41a <_putc_r+0x5e>
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	059b      	lsls	r3, r3, #22
 800b412:	d402      	bmi.n	800b41a <_putc_r+0x5e>
 800b414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b416:	f7ff fc88 	bl	800ad2a <__retarget_lock_release_recursive>
 800b41a:	4628      	mov	r0, r5
 800b41c:	bd70      	pop	{r4, r5, r6, pc}
 800b41e:	4b09      	ldr	r3, [pc, #36]	; (800b444 <_putc_r+0x88>)
 800b420:	429c      	cmp	r4, r3
 800b422:	d101      	bne.n	800b428 <_putc_r+0x6c>
 800b424:	68b4      	ldr	r4, [r6, #8]
 800b426:	e7d6      	b.n	800b3d6 <_putc_r+0x1a>
 800b428:	4b07      	ldr	r3, [pc, #28]	; (800b448 <_putc_r+0x8c>)
 800b42a:	429c      	cmp	r4, r3
 800b42c:	bf08      	it	eq
 800b42e:	68f4      	ldreq	r4, [r6, #12]
 800b430:	e7d1      	b.n	800b3d6 <_putc_r+0x1a>
 800b432:	4629      	mov	r1, r5
 800b434:	4622      	mov	r2, r4
 800b436:	4630      	mov	r0, r6
 800b438:	f000 f85c 	bl	800b4f4 <__swbuf_r>
 800b43c:	4605      	mov	r5, r0
 800b43e:	e7e3      	b.n	800b408 <_putc_r+0x4c>
 800b440:	0800ce28 	.word	0x0800ce28
 800b444:	0800ce48 	.word	0x0800ce48
 800b448:	0800ce08 	.word	0x0800ce08

0800b44c <_sbrk_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4d06      	ldr	r5, [pc, #24]	; (800b468 <_sbrk_r+0x1c>)
 800b450:	2300      	movs	r3, #0
 800b452:	4604      	mov	r4, r0
 800b454:	4608      	mov	r0, r1
 800b456:	602b      	str	r3, [r5, #0]
 800b458:	f7f7 fd68 	bl	8002f2c <_sbrk>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d102      	bne.n	800b466 <_sbrk_r+0x1a>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	b103      	cbz	r3, 800b466 <_sbrk_r+0x1a>
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	bd38      	pop	{r3, r4, r5, pc}
 800b468:	2000103c 	.word	0x2000103c

0800b46c <__sread>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	460c      	mov	r4, r1
 800b470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b474:	f000 fab4 	bl	800b9e0 <_read_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	bfab      	itete	ge
 800b47c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b47e:	89a3      	ldrhlt	r3, [r4, #12]
 800b480:	181b      	addge	r3, r3, r0
 800b482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b486:	bfac      	ite	ge
 800b488:	6563      	strge	r3, [r4, #84]	; 0x54
 800b48a:	81a3      	strhlt	r3, [r4, #12]
 800b48c:	bd10      	pop	{r4, pc}

0800b48e <__swrite>:
 800b48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b492:	461f      	mov	r7, r3
 800b494:	898b      	ldrh	r3, [r1, #12]
 800b496:	05db      	lsls	r3, r3, #23
 800b498:	4605      	mov	r5, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	4616      	mov	r6, r2
 800b49e:	d505      	bpl.n	800b4ac <__swrite+0x1e>
 800b4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f000 f9c8 	bl	800b83c <_lseek_r>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	4632      	mov	r2, r6
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	4628      	mov	r0, r5
 800b4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c2:	f000 b869 	b.w	800b598 <_write_r>

0800b4c6 <__sseek>:
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ce:	f000 f9b5 	bl	800b83c <_lseek_r>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	bf15      	itete	ne
 800b4d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4e2:	81a3      	strheq	r3, [r4, #12]
 800b4e4:	bf18      	it	ne
 800b4e6:	81a3      	strhne	r3, [r4, #12]
 800b4e8:	bd10      	pop	{r4, pc}

0800b4ea <__sclose>:
 800b4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ee:	f000 b8d3 	b.w	800b698 <_close_r>
	...

0800b4f4 <__swbuf_r>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	460e      	mov	r6, r1
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	b118      	cbz	r0, 800b506 <__swbuf_r+0x12>
 800b4fe:	6983      	ldr	r3, [r0, #24]
 800b500:	b90b      	cbnz	r3, 800b506 <__swbuf_r+0x12>
 800b502:	f7ff fb73 	bl	800abec <__sinit>
 800b506:	4b21      	ldr	r3, [pc, #132]	; (800b58c <__swbuf_r+0x98>)
 800b508:	429c      	cmp	r4, r3
 800b50a:	d12b      	bne.n	800b564 <__swbuf_r+0x70>
 800b50c:	686c      	ldr	r4, [r5, #4]
 800b50e:	69a3      	ldr	r3, [r4, #24]
 800b510:	60a3      	str	r3, [r4, #8]
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	071a      	lsls	r2, r3, #28
 800b516:	d52f      	bpl.n	800b578 <__swbuf_r+0x84>
 800b518:	6923      	ldr	r3, [r4, #16]
 800b51a:	b36b      	cbz	r3, 800b578 <__swbuf_r+0x84>
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	6820      	ldr	r0, [r4, #0]
 800b520:	1ac0      	subs	r0, r0, r3
 800b522:	6963      	ldr	r3, [r4, #20]
 800b524:	b2f6      	uxtb	r6, r6
 800b526:	4283      	cmp	r3, r0
 800b528:	4637      	mov	r7, r6
 800b52a:	dc04      	bgt.n	800b536 <__swbuf_r+0x42>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4628      	mov	r0, r5
 800b530:	f000 f948 	bl	800b7c4 <_fflush_r>
 800b534:	bb30      	cbnz	r0, 800b584 <__swbuf_r+0x90>
 800b536:	68a3      	ldr	r3, [r4, #8]
 800b538:	3b01      	subs	r3, #1
 800b53a:	60a3      	str	r3, [r4, #8]
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	6022      	str	r2, [r4, #0]
 800b542:	701e      	strb	r6, [r3, #0]
 800b544:	6963      	ldr	r3, [r4, #20]
 800b546:	3001      	adds	r0, #1
 800b548:	4283      	cmp	r3, r0
 800b54a:	d004      	beq.n	800b556 <__swbuf_r+0x62>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	07db      	lsls	r3, r3, #31
 800b550:	d506      	bpl.n	800b560 <__swbuf_r+0x6c>
 800b552:	2e0a      	cmp	r6, #10
 800b554:	d104      	bne.n	800b560 <__swbuf_r+0x6c>
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 f933 	bl	800b7c4 <_fflush_r>
 800b55e:	b988      	cbnz	r0, 800b584 <__swbuf_r+0x90>
 800b560:	4638      	mov	r0, r7
 800b562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b564:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <__swbuf_r+0x9c>)
 800b566:	429c      	cmp	r4, r3
 800b568:	d101      	bne.n	800b56e <__swbuf_r+0x7a>
 800b56a:	68ac      	ldr	r4, [r5, #8]
 800b56c:	e7cf      	b.n	800b50e <__swbuf_r+0x1a>
 800b56e:	4b09      	ldr	r3, [pc, #36]	; (800b594 <__swbuf_r+0xa0>)
 800b570:	429c      	cmp	r4, r3
 800b572:	bf08      	it	eq
 800b574:	68ec      	ldreq	r4, [r5, #12]
 800b576:	e7ca      	b.n	800b50e <__swbuf_r+0x1a>
 800b578:	4621      	mov	r1, r4
 800b57a:	4628      	mov	r0, r5
 800b57c:	f000 f81e 	bl	800b5bc <__swsetup_r>
 800b580:	2800      	cmp	r0, #0
 800b582:	d0cb      	beq.n	800b51c <__swbuf_r+0x28>
 800b584:	f04f 37ff 	mov.w	r7, #4294967295
 800b588:	e7ea      	b.n	800b560 <__swbuf_r+0x6c>
 800b58a:	bf00      	nop
 800b58c:	0800ce28 	.word	0x0800ce28
 800b590:	0800ce48 	.word	0x0800ce48
 800b594:	0800ce08 	.word	0x0800ce08

0800b598 <_write_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	; (800b5b8 <_write_r+0x20>)
 800b59c:	4604      	mov	r4, r0
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	602a      	str	r2, [r5, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f7f7 fc6f 	bl	8002e8a <_write>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_write_r+0x1e>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_write_r+0x1e>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	2000103c 	.word	0x2000103c

0800b5bc <__swsetup_r>:
 800b5bc:	4b32      	ldr	r3, [pc, #200]	; (800b688 <__swsetup_r+0xcc>)
 800b5be:	b570      	push	{r4, r5, r6, lr}
 800b5c0:	681d      	ldr	r5, [r3, #0]
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	b125      	cbz	r5, 800b5d2 <__swsetup_r+0x16>
 800b5c8:	69ab      	ldr	r3, [r5, #24]
 800b5ca:	b913      	cbnz	r3, 800b5d2 <__swsetup_r+0x16>
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f7ff fb0d 	bl	800abec <__sinit>
 800b5d2:	4b2e      	ldr	r3, [pc, #184]	; (800b68c <__swsetup_r+0xd0>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	d10f      	bne.n	800b5f8 <__swsetup_r+0x3c>
 800b5d8:	686c      	ldr	r4, [r5, #4]
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5e0:	0719      	lsls	r1, r3, #28
 800b5e2:	d42c      	bmi.n	800b63e <__swsetup_r+0x82>
 800b5e4:	06dd      	lsls	r5, r3, #27
 800b5e6:	d411      	bmi.n	800b60c <__swsetup_r+0x50>
 800b5e8:	2309      	movs	r3, #9
 800b5ea:	6033      	str	r3, [r6, #0]
 800b5ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f6:	e03e      	b.n	800b676 <__swsetup_r+0xba>
 800b5f8:	4b25      	ldr	r3, [pc, #148]	; (800b690 <__swsetup_r+0xd4>)
 800b5fa:	429c      	cmp	r4, r3
 800b5fc:	d101      	bne.n	800b602 <__swsetup_r+0x46>
 800b5fe:	68ac      	ldr	r4, [r5, #8]
 800b600:	e7eb      	b.n	800b5da <__swsetup_r+0x1e>
 800b602:	4b24      	ldr	r3, [pc, #144]	; (800b694 <__swsetup_r+0xd8>)
 800b604:	429c      	cmp	r4, r3
 800b606:	bf08      	it	eq
 800b608:	68ec      	ldreq	r4, [r5, #12]
 800b60a:	e7e6      	b.n	800b5da <__swsetup_r+0x1e>
 800b60c:	0758      	lsls	r0, r3, #29
 800b60e:	d512      	bpl.n	800b636 <__swsetup_r+0x7a>
 800b610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b612:	b141      	cbz	r1, 800b626 <__swsetup_r+0x6a>
 800b614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b618:	4299      	cmp	r1, r3
 800b61a:	d002      	beq.n	800b622 <__swsetup_r+0x66>
 800b61c:	4630      	mov	r0, r6
 800b61e:	f000 f98f 	bl	800b940 <_free_r>
 800b622:	2300      	movs	r3, #0
 800b624:	6363      	str	r3, [r4, #52]	; 0x34
 800b626:	89a3      	ldrh	r3, [r4, #12]
 800b628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	2300      	movs	r3, #0
 800b630:	6063      	str	r3, [r4, #4]
 800b632:	6923      	ldr	r3, [r4, #16]
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	f043 0308 	orr.w	r3, r3, #8
 800b63c:	81a3      	strh	r3, [r4, #12]
 800b63e:	6923      	ldr	r3, [r4, #16]
 800b640:	b94b      	cbnz	r3, 800b656 <__swsetup_r+0x9a>
 800b642:	89a3      	ldrh	r3, [r4, #12]
 800b644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b64c:	d003      	beq.n	800b656 <__swsetup_r+0x9a>
 800b64e:	4621      	mov	r1, r4
 800b650:	4630      	mov	r0, r6
 800b652:	f000 f929 	bl	800b8a8 <__smakebuf_r>
 800b656:	89a0      	ldrh	r0, [r4, #12]
 800b658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b65c:	f010 0301 	ands.w	r3, r0, #1
 800b660:	d00a      	beq.n	800b678 <__swsetup_r+0xbc>
 800b662:	2300      	movs	r3, #0
 800b664:	60a3      	str	r3, [r4, #8]
 800b666:	6963      	ldr	r3, [r4, #20]
 800b668:	425b      	negs	r3, r3
 800b66a:	61a3      	str	r3, [r4, #24]
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	b943      	cbnz	r3, 800b682 <__swsetup_r+0xc6>
 800b670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b674:	d1ba      	bne.n	800b5ec <__swsetup_r+0x30>
 800b676:	bd70      	pop	{r4, r5, r6, pc}
 800b678:	0781      	lsls	r1, r0, #30
 800b67a:	bf58      	it	pl
 800b67c:	6963      	ldrpl	r3, [r4, #20]
 800b67e:	60a3      	str	r3, [r4, #8]
 800b680:	e7f4      	b.n	800b66c <__swsetup_r+0xb0>
 800b682:	2000      	movs	r0, #0
 800b684:	e7f7      	b.n	800b676 <__swsetup_r+0xba>
 800b686:	bf00      	nop
 800b688:	20000194 	.word	0x20000194
 800b68c:	0800ce28 	.word	0x0800ce28
 800b690:	0800ce48 	.word	0x0800ce48
 800b694:	0800ce08 	.word	0x0800ce08

0800b698 <_close_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4d06      	ldr	r5, [pc, #24]	; (800b6b4 <_close_r+0x1c>)
 800b69c:	2300      	movs	r3, #0
 800b69e:	4604      	mov	r4, r0
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	602b      	str	r3, [r5, #0]
 800b6a4:	f7f7 fc0d 	bl	8002ec2 <_close>
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	d102      	bne.n	800b6b2 <_close_r+0x1a>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	b103      	cbz	r3, 800b6b2 <_close_r+0x1a>
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	2000103c 	.word	0x2000103c

0800b6b8 <__sflush_r>:
 800b6b8:	898a      	ldrh	r2, [r1, #12]
 800b6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6be:	4605      	mov	r5, r0
 800b6c0:	0710      	lsls	r0, r2, #28
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	d458      	bmi.n	800b778 <__sflush_r+0xc0>
 800b6c6:	684b      	ldr	r3, [r1, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	dc05      	bgt.n	800b6d8 <__sflush_r+0x20>
 800b6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	dc02      	bgt.n	800b6d8 <__sflush_r+0x20>
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6da:	2e00      	cmp	r6, #0
 800b6dc:	d0f9      	beq.n	800b6d2 <__sflush_r+0x1a>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6e4:	682f      	ldr	r7, [r5, #0]
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	d032      	beq.n	800b750 <__sflush_r+0x98>
 800b6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	075a      	lsls	r2, r3, #29
 800b6f0:	d505      	bpl.n	800b6fe <__sflush_r+0x46>
 800b6f2:	6863      	ldr	r3, [r4, #4]
 800b6f4:	1ac0      	subs	r0, r0, r3
 800b6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6f8:	b10b      	cbz	r3, 800b6fe <__sflush_r+0x46>
 800b6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6fc:	1ac0      	subs	r0, r0, r3
 800b6fe:	2300      	movs	r3, #0
 800b700:	4602      	mov	r2, r0
 800b702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b704:	6a21      	ldr	r1, [r4, #32]
 800b706:	4628      	mov	r0, r5
 800b708:	47b0      	blx	r6
 800b70a:	1c43      	adds	r3, r0, #1
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	d106      	bne.n	800b71e <__sflush_r+0x66>
 800b710:	6829      	ldr	r1, [r5, #0]
 800b712:	291d      	cmp	r1, #29
 800b714:	d82c      	bhi.n	800b770 <__sflush_r+0xb8>
 800b716:	4a2a      	ldr	r2, [pc, #168]	; (800b7c0 <__sflush_r+0x108>)
 800b718:	40ca      	lsrs	r2, r1
 800b71a:	07d6      	lsls	r6, r2, #31
 800b71c:	d528      	bpl.n	800b770 <__sflush_r+0xb8>
 800b71e:	2200      	movs	r2, #0
 800b720:	6062      	str	r2, [r4, #4]
 800b722:	04d9      	lsls	r1, r3, #19
 800b724:	6922      	ldr	r2, [r4, #16]
 800b726:	6022      	str	r2, [r4, #0]
 800b728:	d504      	bpl.n	800b734 <__sflush_r+0x7c>
 800b72a:	1c42      	adds	r2, r0, #1
 800b72c:	d101      	bne.n	800b732 <__sflush_r+0x7a>
 800b72e:	682b      	ldr	r3, [r5, #0]
 800b730:	b903      	cbnz	r3, 800b734 <__sflush_r+0x7c>
 800b732:	6560      	str	r0, [r4, #84]	; 0x54
 800b734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b736:	602f      	str	r7, [r5, #0]
 800b738:	2900      	cmp	r1, #0
 800b73a:	d0ca      	beq.n	800b6d2 <__sflush_r+0x1a>
 800b73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b740:	4299      	cmp	r1, r3
 800b742:	d002      	beq.n	800b74a <__sflush_r+0x92>
 800b744:	4628      	mov	r0, r5
 800b746:	f000 f8fb 	bl	800b940 <_free_r>
 800b74a:	2000      	movs	r0, #0
 800b74c:	6360      	str	r0, [r4, #52]	; 0x34
 800b74e:	e7c1      	b.n	800b6d4 <__sflush_r+0x1c>
 800b750:	6a21      	ldr	r1, [r4, #32]
 800b752:	2301      	movs	r3, #1
 800b754:	4628      	mov	r0, r5
 800b756:	47b0      	blx	r6
 800b758:	1c41      	adds	r1, r0, #1
 800b75a:	d1c7      	bne.n	800b6ec <__sflush_r+0x34>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0c4      	beq.n	800b6ec <__sflush_r+0x34>
 800b762:	2b1d      	cmp	r3, #29
 800b764:	d001      	beq.n	800b76a <__sflush_r+0xb2>
 800b766:	2b16      	cmp	r3, #22
 800b768:	d101      	bne.n	800b76e <__sflush_r+0xb6>
 800b76a:	602f      	str	r7, [r5, #0]
 800b76c:	e7b1      	b.n	800b6d2 <__sflush_r+0x1a>
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	e7ad      	b.n	800b6d4 <__sflush_r+0x1c>
 800b778:	690f      	ldr	r7, [r1, #16]
 800b77a:	2f00      	cmp	r7, #0
 800b77c:	d0a9      	beq.n	800b6d2 <__sflush_r+0x1a>
 800b77e:	0793      	lsls	r3, r2, #30
 800b780:	680e      	ldr	r6, [r1, #0]
 800b782:	bf08      	it	eq
 800b784:	694b      	ldreq	r3, [r1, #20]
 800b786:	600f      	str	r7, [r1, #0]
 800b788:	bf18      	it	ne
 800b78a:	2300      	movne	r3, #0
 800b78c:	eba6 0807 	sub.w	r8, r6, r7
 800b790:	608b      	str	r3, [r1, #8]
 800b792:	f1b8 0f00 	cmp.w	r8, #0
 800b796:	dd9c      	ble.n	800b6d2 <__sflush_r+0x1a>
 800b798:	6a21      	ldr	r1, [r4, #32]
 800b79a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b79c:	4643      	mov	r3, r8
 800b79e:	463a      	mov	r2, r7
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	47b0      	blx	r6
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	dc06      	bgt.n	800b7b6 <__sflush_r+0xfe>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	e78e      	b.n	800b6d4 <__sflush_r+0x1c>
 800b7b6:	4407      	add	r7, r0
 800b7b8:	eba8 0800 	sub.w	r8, r8, r0
 800b7bc:	e7e9      	b.n	800b792 <__sflush_r+0xda>
 800b7be:	bf00      	nop
 800b7c0:	20400001 	.word	0x20400001

0800b7c4 <_fflush_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	690b      	ldr	r3, [r1, #16]
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	b913      	cbnz	r3, 800b7d4 <_fflush_r+0x10>
 800b7ce:	2500      	movs	r5, #0
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	b118      	cbz	r0, 800b7de <_fflush_r+0x1a>
 800b7d6:	6983      	ldr	r3, [r0, #24]
 800b7d8:	b90b      	cbnz	r3, 800b7de <_fflush_r+0x1a>
 800b7da:	f7ff fa07 	bl	800abec <__sinit>
 800b7de:	4b14      	ldr	r3, [pc, #80]	; (800b830 <_fflush_r+0x6c>)
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	d11b      	bne.n	800b81c <_fflush_r+0x58>
 800b7e4:	686c      	ldr	r4, [r5, #4]
 800b7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d0ef      	beq.n	800b7ce <_fflush_r+0xa>
 800b7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7f0:	07d0      	lsls	r0, r2, #31
 800b7f2:	d404      	bmi.n	800b7fe <_fflush_r+0x3a>
 800b7f4:	0599      	lsls	r1, r3, #22
 800b7f6:	d402      	bmi.n	800b7fe <_fflush_r+0x3a>
 800b7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7fa:	f7ff fa95 	bl	800ad28 <__retarget_lock_acquire_recursive>
 800b7fe:	4628      	mov	r0, r5
 800b800:	4621      	mov	r1, r4
 800b802:	f7ff ff59 	bl	800b6b8 <__sflush_r>
 800b806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b808:	07da      	lsls	r2, r3, #31
 800b80a:	4605      	mov	r5, r0
 800b80c:	d4e0      	bmi.n	800b7d0 <_fflush_r+0xc>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	059b      	lsls	r3, r3, #22
 800b812:	d4dd      	bmi.n	800b7d0 <_fflush_r+0xc>
 800b814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b816:	f7ff fa88 	bl	800ad2a <__retarget_lock_release_recursive>
 800b81a:	e7d9      	b.n	800b7d0 <_fflush_r+0xc>
 800b81c:	4b05      	ldr	r3, [pc, #20]	; (800b834 <_fflush_r+0x70>)
 800b81e:	429c      	cmp	r4, r3
 800b820:	d101      	bne.n	800b826 <_fflush_r+0x62>
 800b822:	68ac      	ldr	r4, [r5, #8]
 800b824:	e7df      	b.n	800b7e6 <_fflush_r+0x22>
 800b826:	4b04      	ldr	r3, [pc, #16]	; (800b838 <_fflush_r+0x74>)
 800b828:	429c      	cmp	r4, r3
 800b82a:	bf08      	it	eq
 800b82c:	68ec      	ldreq	r4, [r5, #12]
 800b82e:	e7da      	b.n	800b7e6 <_fflush_r+0x22>
 800b830:	0800ce28 	.word	0x0800ce28
 800b834:	0800ce48 	.word	0x0800ce48
 800b838:	0800ce08 	.word	0x0800ce08

0800b83c <_lseek_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4d07      	ldr	r5, [pc, #28]	; (800b85c <_lseek_r+0x20>)
 800b840:	4604      	mov	r4, r0
 800b842:	4608      	mov	r0, r1
 800b844:	4611      	mov	r1, r2
 800b846:	2200      	movs	r2, #0
 800b848:	602a      	str	r2, [r5, #0]
 800b84a:	461a      	mov	r2, r3
 800b84c:	f7f7 fb60 	bl	8002f10 <_lseek>
 800b850:	1c43      	adds	r3, r0, #1
 800b852:	d102      	bne.n	800b85a <_lseek_r+0x1e>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	b103      	cbz	r3, 800b85a <_lseek_r+0x1e>
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	2000103c 	.word	0x2000103c

0800b860 <__swhatbuf_r>:
 800b860:	b570      	push	{r4, r5, r6, lr}
 800b862:	460e      	mov	r6, r1
 800b864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b868:	2900      	cmp	r1, #0
 800b86a:	b096      	sub	sp, #88	; 0x58
 800b86c:	4614      	mov	r4, r2
 800b86e:	461d      	mov	r5, r3
 800b870:	da07      	bge.n	800b882 <__swhatbuf_r+0x22>
 800b872:	2300      	movs	r3, #0
 800b874:	602b      	str	r3, [r5, #0]
 800b876:	89b3      	ldrh	r3, [r6, #12]
 800b878:	061a      	lsls	r2, r3, #24
 800b87a:	d410      	bmi.n	800b89e <__swhatbuf_r+0x3e>
 800b87c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b880:	e00e      	b.n	800b8a0 <__swhatbuf_r+0x40>
 800b882:	466a      	mov	r2, sp
 800b884:	f000 f8be 	bl	800ba04 <_fstat_r>
 800b888:	2800      	cmp	r0, #0
 800b88a:	dbf2      	blt.n	800b872 <__swhatbuf_r+0x12>
 800b88c:	9a01      	ldr	r2, [sp, #4]
 800b88e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b892:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b896:	425a      	negs	r2, r3
 800b898:	415a      	adcs	r2, r3
 800b89a:	602a      	str	r2, [r5, #0]
 800b89c:	e7ee      	b.n	800b87c <__swhatbuf_r+0x1c>
 800b89e:	2340      	movs	r3, #64	; 0x40
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	b016      	add	sp, #88	; 0x58
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}

0800b8a8 <__smakebuf_r>:
 800b8a8:	898b      	ldrh	r3, [r1, #12]
 800b8aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8ac:	079d      	lsls	r5, r3, #30
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	d507      	bpl.n	800b8c4 <__smakebuf_r+0x1c>
 800b8b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	6123      	str	r3, [r4, #16]
 800b8bc:	2301      	movs	r3, #1
 800b8be:	6163      	str	r3, [r4, #20]
 800b8c0:	b002      	add	sp, #8
 800b8c2:	bd70      	pop	{r4, r5, r6, pc}
 800b8c4:	ab01      	add	r3, sp, #4
 800b8c6:	466a      	mov	r2, sp
 800b8c8:	f7ff ffca 	bl	800b860 <__swhatbuf_r>
 800b8cc:	9900      	ldr	r1, [sp, #0]
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7ff fa2b 	bl	800ad2c <_malloc_r>
 800b8d6:	b948      	cbnz	r0, 800b8ec <__smakebuf_r+0x44>
 800b8d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8dc:	059a      	lsls	r2, r3, #22
 800b8de:	d4ef      	bmi.n	800b8c0 <__smakebuf_r+0x18>
 800b8e0:	f023 0303 	bic.w	r3, r3, #3
 800b8e4:	f043 0302 	orr.w	r3, r3, #2
 800b8e8:	81a3      	strh	r3, [r4, #12]
 800b8ea:	e7e3      	b.n	800b8b4 <__smakebuf_r+0xc>
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <__smakebuf_r+0x7c>)
 800b8ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	6020      	str	r0, [r4, #0]
 800b8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f8:	81a3      	strh	r3, [r4, #12]
 800b8fa:	9b00      	ldr	r3, [sp, #0]
 800b8fc:	6163      	str	r3, [r4, #20]
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	6120      	str	r0, [r4, #16]
 800b902:	b15b      	cbz	r3, 800b91c <__smakebuf_r+0x74>
 800b904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b908:	4630      	mov	r0, r6
 800b90a:	f000 f88d 	bl	800ba28 <_isatty_r>
 800b90e:	b128      	cbz	r0, 800b91c <__smakebuf_r+0x74>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	f023 0303 	bic.w	r3, r3, #3
 800b916:	f043 0301 	orr.w	r3, r3, #1
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	89a0      	ldrh	r0, [r4, #12]
 800b91e:	4305      	orrs	r5, r0
 800b920:	81a5      	strh	r5, [r4, #12]
 800b922:	e7cd      	b.n	800b8c0 <__smakebuf_r+0x18>
 800b924:	0800ab85 	.word	0x0800ab85

0800b928 <__malloc_lock>:
 800b928:	4801      	ldr	r0, [pc, #4]	; (800b930 <__malloc_lock+0x8>)
 800b92a:	f7ff b9fd 	b.w	800ad28 <__retarget_lock_acquire_recursive>
 800b92e:	bf00      	nop
 800b930:	20001034 	.word	0x20001034

0800b934 <__malloc_unlock>:
 800b934:	4801      	ldr	r0, [pc, #4]	; (800b93c <__malloc_unlock+0x8>)
 800b936:	f7ff b9f8 	b.w	800ad2a <__retarget_lock_release_recursive>
 800b93a:	bf00      	nop
 800b93c:	20001034 	.word	0x20001034

0800b940 <_free_r>:
 800b940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b942:	2900      	cmp	r1, #0
 800b944:	d048      	beq.n	800b9d8 <_free_r+0x98>
 800b946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b94a:	9001      	str	r0, [sp, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f1a1 0404 	sub.w	r4, r1, #4
 800b952:	bfb8      	it	lt
 800b954:	18e4      	addlt	r4, r4, r3
 800b956:	f7ff ffe7 	bl	800b928 <__malloc_lock>
 800b95a:	4a20      	ldr	r2, [pc, #128]	; (800b9dc <_free_r+0x9c>)
 800b95c:	9801      	ldr	r0, [sp, #4]
 800b95e:	6813      	ldr	r3, [r2, #0]
 800b960:	4615      	mov	r5, r2
 800b962:	b933      	cbnz	r3, 800b972 <_free_r+0x32>
 800b964:	6063      	str	r3, [r4, #4]
 800b966:	6014      	str	r4, [r2, #0]
 800b968:	b003      	add	sp, #12
 800b96a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b96e:	f7ff bfe1 	b.w	800b934 <__malloc_unlock>
 800b972:	42a3      	cmp	r3, r4
 800b974:	d90b      	bls.n	800b98e <_free_r+0x4e>
 800b976:	6821      	ldr	r1, [r4, #0]
 800b978:	1862      	adds	r2, r4, r1
 800b97a:	4293      	cmp	r3, r2
 800b97c:	bf04      	itt	eq
 800b97e:	681a      	ldreq	r2, [r3, #0]
 800b980:	685b      	ldreq	r3, [r3, #4]
 800b982:	6063      	str	r3, [r4, #4]
 800b984:	bf04      	itt	eq
 800b986:	1852      	addeq	r2, r2, r1
 800b988:	6022      	streq	r2, [r4, #0]
 800b98a:	602c      	str	r4, [r5, #0]
 800b98c:	e7ec      	b.n	800b968 <_free_r+0x28>
 800b98e:	461a      	mov	r2, r3
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	b10b      	cbz	r3, 800b998 <_free_r+0x58>
 800b994:	42a3      	cmp	r3, r4
 800b996:	d9fa      	bls.n	800b98e <_free_r+0x4e>
 800b998:	6811      	ldr	r1, [r2, #0]
 800b99a:	1855      	adds	r5, r2, r1
 800b99c:	42a5      	cmp	r5, r4
 800b99e:	d10b      	bne.n	800b9b8 <_free_r+0x78>
 800b9a0:	6824      	ldr	r4, [r4, #0]
 800b9a2:	4421      	add	r1, r4
 800b9a4:	1854      	adds	r4, r2, r1
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	6011      	str	r1, [r2, #0]
 800b9aa:	d1dd      	bne.n	800b968 <_free_r+0x28>
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	6053      	str	r3, [r2, #4]
 800b9b2:	4421      	add	r1, r4
 800b9b4:	6011      	str	r1, [r2, #0]
 800b9b6:	e7d7      	b.n	800b968 <_free_r+0x28>
 800b9b8:	d902      	bls.n	800b9c0 <_free_r+0x80>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	e7d3      	b.n	800b968 <_free_r+0x28>
 800b9c0:	6825      	ldr	r5, [r4, #0]
 800b9c2:	1961      	adds	r1, r4, r5
 800b9c4:	428b      	cmp	r3, r1
 800b9c6:	bf04      	itt	eq
 800b9c8:	6819      	ldreq	r1, [r3, #0]
 800b9ca:	685b      	ldreq	r3, [r3, #4]
 800b9cc:	6063      	str	r3, [r4, #4]
 800b9ce:	bf04      	itt	eq
 800b9d0:	1949      	addeq	r1, r1, r5
 800b9d2:	6021      	streq	r1, [r4, #0]
 800b9d4:	6054      	str	r4, [r2, #4]
 800b9d6:	e7c7      	b.n	800b968 <_free_r+0x28>
 800b9d8:	b003      	add	sp, #12
 800b9da:	bd30      	pop	{r4, r5, pc}
 800b9dc:	2000024c 	.word	0x2000024c

0800b9e0 <_read_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d07      	ldr	r5, [pc, #28]	; (800ba00 <_read_r+0x20>)
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	602a      	str	r2, [r5, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f7f7 fa2e 	bl	8002e50 <_read>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d102      	bne.n	800b9fe <_read_r+0x1e>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	b103      	cbz	r3, 800b9fe <_read_r+0x1e>
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	2000103c 	.word	0x2000103c

0800ba04 <_fstat_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d07      	ldr	r5, [pc, #28]	; (800ba24 <_fstat_r+0x20>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	4611      	mov	r1, r2
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	f7f7 fa62 	bl	8002eda <_fstat>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d102      	bne.n	800ba20 <_fstat_r+0x1c>
 800ba1a:	682b      	ldr	r3, [r5, #0]
 800ba1c:	b103      	cbz	r3, 800ba20 <_fstat_r+0x1c>
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	bd38      	pop	{r3, r4, r5, pc}
 800ba22:	bf00      	nop
 800ba24:	2000103c 	.word	0x2000103c

0800ba28 <_isatty_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d06      	ldr	r5, [pc, #24]	; (800ba44 <_isatty_r+0x1c>)
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	602b      	str	r3, [r5, #0]
 800ba34:	f7f7 fa61 	bl	8002efa <_isatty>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_isatty_r+0x1a>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_isatty_r+0x1a>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	2000103c 	.word	0x2000103c

0800ba48 <atan>:
 800ba48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	ec55 4b10 	vmov	r4, r5, d0
 800ba50:	4bc3      	ldr	r3, [pc, #780]	; (800bd60 <atan+0x318>)
 800ba52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ba56:	429e      	cmp	r6, r3
 800ba58:	46ab      	mov	fp, r5
 800ba5a:	dd18      	ble.n	800ba8e <atan+0x46>
 800ba5c:	4bc1      	ldr	r3, [pc, #772]	; (800bd64 <atan+0x31c>)
 800ba5e:	429e      	cmp	r6, r3
 800ba60:	dc01      	bgt.n	800ba66 <atan+0x1e>
 800ba62:	d109      	bne.n	800ba78 <atan+0x30>
 800ba64:	b144      	cbz	r4, 800ba78 <atan+0x30>
 800ba66:	4622      	mov	r2, r4
 800ba68:	462b      	mov	r3, r5
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	f7f4 fc25 	bl	80002bc <__adddf3>
 800ba72:	4604      	mov	r4, r0
 800ba74:	460d      	mov	r5, r1
 800ba76:	e006      	b.n	800ba86 <atan+0x3e>
 800ba78:	f1bb 0f00 	cmp.w	fp, #0
 800ba7c:	f300 8131 	bgt.w	800bce2 <atan+0x29a>
 800ba80:	a59b      	add	r5, pc, #620	; (adr r5, 800bcf0 <atan+0x2a8>)
 800ba82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba86:	ec45 4b10 	vmov	d0, r4, r5
 800ba8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8e:	4bb6      	ldr	r3, [pc, #728]	; (800bd68 <atan+0x320>)
 800ba90:	429e      	cmp	r6, r3
 800ba92:	dc14      	bgt.n	800babe <atan+0x76>
 800ba94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ba98:	429e      	cmp	r6, r3
 800ba9a:	dc0d      	bgt.n	800bab8 <atan+0x70>
 800ba9c:	a396      	add	r3, pc, #600	; (adr r3, 800bcf8 <atan+0x2b0>)
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	ee10 0a10 	vmov	r0, s0
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7f4 fc08 	bl	80002bc <__adddf3>
 800baac:	4baf      	ldr	r3, [pc, #700]	; (800bd6c <atan+0x324>)
 800baae:	2200      	movs	r2, #0
 800bab0:	f7f5 f84a 	bl	8000b48 <__aeabi_dcmpgt>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d1e6      	bne.n	800ba86 <atan+0x3e>
 800bab8:	f04f 3aff 	mov.w	sl, #4294967295
 800babc:	e02b      	b.n	800bb16 <atan+0xce>
 800babe:	f000 f963 	bl	800bd88 <fabs>
 800bac2:	4bab      	ldr	r3, [pc, #684]	; (800bd70 <atan+0x328>)
 800bac4:	429e      	cmp	r6, r3
 800bac6:	ec55 4b10 	vmov	r4, r5, d0
 800baca:	f300 80bf 	bgt.w	800bc4c <atan+0x204>
 800bace:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bad2:	429e      	cmp	r6, r3
 800bad4:	f300 80a0 	bgt.w	800bc18 <atan+0x1d0>
 800bad8:	ee10 2a10 	vmov	r2, s0
 800badc:	ee10 0a10 	vmov	r0, s0
 800bae0:	462b      	mov	r3, r5
 800bae2:	4629      	mov	r1, r5
 800bae4:	f7f4 fbea 	bl	80002bc <__adddf3>
 800bae8:	4ba0      	ldr	r3, [pc, #640]	; (800bd6c <atan+0x324>)
 800baea:	2200      	movs	r2, #0
 800baec:	f7f4 fbe4 	bl	80002b8 <__aeabi_dsub>
 800baf0:	2200      	movs	r2, #0
 800baf2:	4606      	mov	r6, r0
 800baf4:	460f      	mov	r7, r1
 800baf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f4 fbdd 	bl	80002bc <__adddf3>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4630      	mov	r0, r6
 800bb08:	4639      	mov	r1, r7
 800bb0a:	f7f4 feb7 	bl	800087c <__aeabi_ddiv>
 800bb0e:	f04f 0a00 	mov.w	sl, #0
 800bb12:	4604      	mov	r4, r0
 800bb14:	460d      	mov	r5, r1
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f7f4 fd83 	bl	8000628 <__aeabi_dmul>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	4680      	mov	r8, r0
 800bb28:	4689      	mov	r9, r1
 800bb2a:	f7f4 fd7d 	bl	8000628 <__aeabi_dmul>
 800bb2e:	a374      	add	r3, pc, #464	; (adr r3, 800bd00 <atan+0x2b8>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	4606      	mov	r6, r0
 800bb36:	460f      	mov	r7, r1
 800bb38:	f7f4 fd76 	bl	8000628 <__aeabi_dmul>
 800bb3c:	a372      	add	r3, pc, #456	; (adr r3, 800bd08 <atan+0x2c0>)
 800bb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb42:	f7f4 fbbb 	bl	80002bc <__adddf3>
 800bb46:	4632      	mov	r2, r6
 800bb48:	463b      	mov	r3, r7
 800bb4a:	f7f4 fd6d 	bl	8000628 <__aeabi_dmul>
 800bb4e:	a370      	add	r3, pc, #448	; (adr r3, 800bd10 <atan+0x2c8>)
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	f7f4 fbb2 	bl	80002bc <__adddf3>
 800bb58:	4632      	mov	r2, r6
 800bb5a:	463b      	mov	r3, r7
 800bb5c:	f7f4 fd64 	bl	8000628 <__aeabi_dmul>
 800bb60:	a36d      	add	r3, pc, #436	; (adr r3, 800bd18 <atan+0x2d0>)
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	f7f4 fba9 	bl	80002bc <__adddf3>
 800bb6a:	4632      	mov	r2, r6
 800bb6c:	463b      	mov	r3, r7
 800bb6e:	f7f4 fd5b 	bl	8000628 <__aeabi_dmul>
 800bb72:	a36b      	add	r3, pc, #428	; (adr r3, 800bd20 <atan+0x2d8>)
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f7f4 fba0 	bl	80002bc <__adddf3>
 800bb7c:	4632      	mov	r2, r6
 800bb7e:	463b      	mov	r3, r7
 800bb80:	f7f4 fd52 	bl	8000628 <__aeabi_dmul>
 800bb84:	a368      	add	r3, pc, #416	; (adr r3, 800bd28 <atan+0x2e0>)
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	f7f4 fb97 	bl	80002bc <__adddf3>
 800bb8e:	4642      	mov	r2, r8
 800bb90:	464b      	mov	r3, r9
 800bb92:	f7f4 fd49 	bl	8000628 <__aeabi_dmul>
 800bb96:	a366      	add	r3, pc, #408	; (adr r3, 800bd30 <atan+0x2e8>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	4689      	mov	r9, r1
 800bba0:	4630      	mov	r0, r6
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f4 fd40 	bl	8000628 <__aeabi_dmul>
 800bba8:	a363      	add	r3, pc, #396	; (adr r3, 800bd38 <atan+0x2f0>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	f7f4 fb83 	bl	80002b8 <__aeabi_dsub>
 800bbb2:	4632      	mov	r2, r6
 800bbb4:	463b      	mov	r3, r7
 800bbb6:	f7f4 fd37 	bl	8000628 <__aeabi_dmul>
 800bbba:	a361      	add	r3, pc, #388	; (adr r3, 800bd40 <atan+0x2f8>)
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f7f4 fb7a 	bl	80002b8 <__aeabi_dsub>
 800bbc4:	4632      	mov	r2, r6
 800bbc6:	463b      	mov	r3, r7
 800bbc8:	f7f4 fd2e 	bl	8000628 <__aeabi_dmul>
 800bbcc:	a35e      	add	r3, pc, #376	; (adr r3, 800bd48 <atan+0x300>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	f7f4 fb71 	bl	80002b8 <__aeabi_dsub>
 800bbd6:	4632      	mov	r2, r6
 800bbd8:	463b      	mov	r3, r7
 800bbda:	f7f4 fd25 	bl	8000628 <__aeabi_dmul>
 800bbde:	a35c      	add	r3, pc, #368	; (adr r3, 800bd50 <atan+0x308>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 fb68 	bl	80002b8 <__aeabi_dsub>
 800bbe8:	4632      	mov	r2, r6
 800bbea:	463b      	mov	r3, r7
 800bbec:	f7f4 fd1c 	bl	8000628 <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	f7f4 fb60 	bl	80002bc <__adddf3>
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	462b      	mov	r3, r5
 800bc00:	f7f4 fd12 	bl	8000628 <__aeabi_dmul>
 800bc04:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	d14b      	bne.n	800bca6 <atan+0x25e>
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	f7f4 fb51 	bl	80002b8 <__aeabi_dsub>
 800bc16:	e72c      	b.n	800ba72 <atan+0x2a>
 800bc18:	ee10 0a10 	vmov	r0, s0
 800bc1c:	4b53      	ldr	r3, [pc, #332]	; (800bd6c <atan+0x324>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	4629      	mov	r1, r5
 800bc22:	f7f4 fb49 	bl	80002b8 <__aeabi_dsub>
 800bc26:	4b51      	ldr	r3, [pc, #324]	; (800bd6c <atan+0x324>)
 800bc28:	4606      	mov	r6, r0
 800bc2a:	460f      	mov	r7, r1
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	f7f4 fb43 	bl	80002bc <__adddf3>
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 fe1d 	bl	800087c <__aeabi_ddiv>
 800bc42:	f04f 0a01 	mov.w	sl, #1
 800bc46:	4604      	mov	r4, r0
 800bc48:	460d      	mov	r5, r1
 800bc4a:	e764      	b.n	800bb16 <atan+0xce>
 800bc4c:	4b49      	ldr	r3, [pc, #292]	; (800bd74 <atan+0x32c>)
 800bc4e:	429e      	cmp	r6, r3
 800bc50:	da1d      	bge.n	800bc8e <atan+0x246>
 800bc52:	ee10 0a10 	vmov	r0, s0
 800bc56:	4b48      	ldr	r3, [pc, #288]	; (800bd78 <atan+0x330>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 fb2c 	bl	80002b8 <__aeabi_dsub>
 800bc60:	4b45      	ldr	r3, [pc, #276]	; (800bd78 <atan+0x330>)
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	2200      	movs	r2, #0
 800bc68:	4620      	mov	r0, r4
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	f7f4 fcdc 	bl	8000628 <__aeabi_dmul>
 800bc70:	4b3e      	ldr	r3, [pc, #248]	; (800bd6c <atan+0x324>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	f7f4 fb22 	bl	80002bc <__adddf3>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	4639      	mov	r1, r7
 800bc80:	f7f4 fdfc 	bl	800087c <__aeabi_ddiv>
 800bc84:	f04f 0a02 	mov.w	sl, #2
 800bc88:	4604      	mov	r4, r0
 800bc8a:	460d      	mov	r5, r1
 800bc8c:	e743      	b.n	800bb16 <atan+0xce>
 800bc8e:	462b      	mov	r3, r5
 800bc90:	ee10 2a10 	vmov	r2, s0
 800bc94:	4939      	ldr	r1, [pc, #228]	; (800bd7c <atan+0x334>)
 800bc96:	2000      	movs	r0, #0
 800bc98:	f7f4 fdf0 	bl	800087c <__aeabi_ddiv>
 800bc9c:	f04f 0a03 	mov.w	sl, #3
 800bca0:	4604      	mov	r4, r0
 800bca2:	460d      	mov	r5, r1
 800bca4:	e737      	b.n	800bb16 <atan+0xce>
 800bca6:	4b36      	ldr	r3, [pc, #216]	; (800bd80 <atan+0x338>)
 800bca8:	4e36      	ldr	r6, [pc, #216]	; (800bd84 <atan+0x33c>)
 800bcaa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bcae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bcb2:	e9da 2300 	ldrd	r2, r3, [sl]
 800bcb6:	f7f4 faff 	bl	80002b8 <__aeabi_dsub>
 800bcba:	4622      	mov	r2, r4
 800bcbc:	462b      	mov	r3, r5
 800bcbe:	f7f4 fafb 	bl	80002b8 <__aeabi_dsub>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bcca:	f7f4 faf5 	bl	80002b8 <__aeabi_dsub>
 800bcce:	f1bb 0f00 	cmp.w	fp, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	f6bf aed6 	bge.w	800ba86 <atan+0x3e>
 800bcda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcde:	461d      	mov	r5, r3
 800bce0:	e6d1      	b.n	800ba86 <atan+0x3e>
 800bce2:	a51d      	add	r5, pc, #116	; (adr r5, 800bd58 <atan+0x310>)
 800bce4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bce8:	e6cd      	b.n	800ba86 <atan+0x3e>
 800bcea:	bf00      	nop
 800bcec:	f3af 8000 	nop.w
 800bcf0:	54442d18 	.word	0x54442d18
 800bcf4:	bff921fb 	.word	0xbff921fb
 800bcf8:	8800759c 	.word	0x8800759c
 800bcfc:	7e37e43c 	.word	0x7e37e43c
 800bd00:	e322da11 	.word	0xe322da11
 800bd04:	3f90ad3a 	.word	0x3f90ad3a
 800bd08:	24760deb 	.word	0x24760deb
 800bd0c:	3fa97b4b 	.word	0x3fa97b4b
 800bd10:	a0d03d51 	.word	0xa0d03d51
 800bd14:	3fb10d66 	.word	0x3fb10d66
 800bd18:	c54c206e 	.word	0xc54c206e
 800bd1c:	3fb745cd 	.word	0x3fb745cd
 800bd20:	920083ff 	.word	0x920083ff
 800bd24:	3fc24924 	.word	0x3fc24924
 800bd28:	5555550d 	.word	0x5555550d
 800bd2c:	3fd55555 	.word	0x3fd55555
 800bd30:	2c6a6c2f 	.word	0x2c6a6c2f
 800bd34:	bfa2b444 	.word	0xbfa2b444
 800bd38:	52defd9a 	.word	0x52defd9a
 800bd3c:	3fadde2d 	.word	0x3fadde2d
 800bd40:	af749a6d 	.word	0xaf749a6d
 800bd44:	3fb3b0f2 	.word	0x3fb3b0f2
 800bd48:	fe231671 	.word	0xfe231671
 800bd4c:	3fbc71c6 	.word	0x3fbc71c6
 800bd50:	9998ebc4 	.word	0x9998ebc4
 800bd54:	3fc99999 	.word	0x3fc99999
 800bd58:	54442d18 	.word	0x54442d18
 800bd5c:	3ff921fb 	.word	0x3ff921fb
 800bd60:	440fffff 	.word	0x440fffff
 800bd64:	7ff00000 	.word	0x7ff00000
 800bd68:	3fdbffff 	.word	0x3fdbffff
 800bd6c:	3ff00000 	.word	0x3ff00000
 800bd70:	3ff2ffff 	.word	0x3ff2ffff
 800bd74:	40038000 	.word	0x40038000
 800bd78:	3ff80000 	.word	0x3ff80000
 800bd7c:	bff00000 	.word	0xbff00000
 800bd80:	0800cec0 	.word	0x0800cec0
 800bd84:	0800cea0 	.word	0x0800cea0

0800bd88 <fabs>:
 800bd88:	ec51 0b10 	vmov	r0, r1, d0
 800bd8c:	ee10 2a10 	vmov	r2, s0
 800bd90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd94:	ec43 2b10 	vmov	d0, r2, r3
 800bd98:	4770      	bx	lr
	...

0800bd9c <round>:
 800bd9c:	ec51 0b10 	vmov	r0, r1, d0
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800bda6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800bdaa:	2c13      	cmp	r4, #19
 800bdac:	ee10 2a10 	vmov	r2, s0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	dc19      	bgt.n	800bde8 <round+0x4c>
 800bdb4:	2c00      	cmp	r4, #0
 800bdb6:	da09      	bge.n	800bdcc <round+0x30>
 800bdb8:	3401      	adds	r4, #1
 800bdba:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800bdbe:	d103      	bne.n	800bdc8 <round+0x2c>
 800bdc0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bdc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdc8:	2100      	movs	r1, #0
 800bdca:	e028      	b.n	800be1e <round+0x82>
 800bdcc:	4d15      	ldr	r5, [pc, #84]	; (800be24 <round+0x88>)
 800bdce:	4125      	asrs	r5, r4
 800bdd0:	ea01 0605 	and.w	r6, r1, r5
 800bdd4:	4332      	orrs	r2, r6
 800bdd6:	d00e      	beq.n	800bdf6 <round+0x5a>
 800bdd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bddc:	fa42 f404 	asr.w	r4, r2, r4
 800bde0:	4423      	add	r3, r4
 800bde2:	ea23 0305 	bic.w	r3, r3, r5
 800bde6:	e7ef      	b.n	800bdc8 <round+0x2c>
 800bde8:	2c33      	cmp	r4, #51	; 0x33
 800bdea:	dd07      	ble.n	800bdfc <round+0x60>
 800bdec:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bdf0:	d101      	bne.n	800bdf6 <round+0x5a>
 800bdf2:	f7f4 fa63 	bl	80002bc <__adddf3>
 800bdf6:	ec41 0b10 	vmov	d0, r0, r1
 800bdfa:	bd70      	pop	{r4, r5, r6, pc}
 800bdfc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800be00:	f04f 35ff 	mov.w	r5, #4294967295
 800be04:	40f5      	lsrs	r5, r6
 800be06:	4228      	tst	r0, r5
 800be08:	d0f5      	beq.n	800bdf6 <round+0x5a>
 800be0a:	2101      	movs	r1, #1
 800be0c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800be10:	fa01 f404 	lsl.w	r4, r1, r4
 800be14:	1912      	adds	r2, r2, r4
 800be16:	bf28      	it	cs
 800be18:	185b      	addcs	r3, r3, r1
 800be1a:	ea22 0105 	bic.w	r1, r2, r5
 800be1e:	4608      	mov	r0, r1
 800be20:	4619      	mov	r1, r3
 800be22:	e7e8      	b.n	800bdf6 <round+0x5a>
 800be24:	000fffff 	.word	0x000fffff

0800be28 <pow>:
 800be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be2c:	ec59 8b10 	vmov	r8, r9, d0
 800be30:	ec57 6b11 	vmov	r6, r7, d1
 800be34:	f000 f8a8 	bl	800bf88 <__ieee754_pow>
 800be38:	4b4e      	ldr	r3, [pc, #312]	; (800bf74 <pow+0x14c>)
 800be3a:	f993 3000 	ldrsb.w	r3, [r3]
 800be3e:	3301      	adds	r3, #1
 800be40:	ec55 4b10 	vmov	r4, r5, d0
 800be44:	d015      	beq.n	800be72 <pow+0x4a>
 800be46:	4632      	mov	r2, r6
 800be48:	463b      	mov	r3, r7
 800be4a:	4630      	mov	r0, r6
 800be4c:	4639      	mov	r1, r7
 800be4e:	f7f4 fe85 	bl	8000b5c <__aeabi_dcmpun>
 800be52:	b970      	cbnz	r0, 800be72 <pow+0x4a>
 800be54:	4642      	mov	r2, r8
 800be56:	464b      	mov	r3, r9
 800be58:	4640      	mov	r0, r8
 800be5a:	4649      	mov	r1, r9
 800be5c:	f7f4 fe7e 	bl	8000b5c <__aeabi_dcmpun>
 800be60:	2200      	movs	r2, #0
 800be62:	2300      	movs	r3, #0
 800be64:	b148      	cbz	r0, 800be7a <pow+0x52>
 800be66:	4630      	mov	r0, r6
 800be68:	4639      	mov	r1, r7
 800be6a:	f7f4 fe45 	bl	8000af8 <__aeabi_dcmpeq>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d17d      	bne.n	800bf6e <pow+0x146>
 800be72:	ec45 4b10 	vmov	d0, r4, r5
 800be76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7a:	4640      	mov	r0, r8
 800be7c:	4649      	mov	r1, r9
 800be7e:	f7f4 fe3b 	bl	8000af8 <__aeabi_dcmpeq>
 800be82:	b1e0      	cbz	r0, 800bebe <pow+0x96>
 800be84:	2200      	movs	r2, #0
 800be86:	2300      	movs	r3, #0
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fe34 	bl	8000af8 <__aeabi_dcmpeq>
 800be90:	2800      	cmp	r0, #0
 800be92:	d16c      	bne.n	800bf6e <pow+0x146>
 800be94:	ec47 6b10 	vmov	d0, r6, r7
 800be98:	f000 fe4c 	bl	800cb34 <finite>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d0e8      	beq.n	800be72 <pow+0x4a>
 800bea0:	2200      	movs	r2, #0
 800bea2:	2300      	movs	r3, #0
 800bea4:	4630      	mov	r0, r6
 800bea6:	4639      	mov	r1, r7
 800bea8:	f7f4 fe30 	bl	8000b0c <__aeabi_dcmplt>
 800beac:	2800      	cmp	r0, #0
 800beae:	d0e0      	beq.n	800be72 <pow+0x4a>
 800beb0:	f7fe fdd6 	bl	800aa60 <__errno>
 800beb4:	2321      	movs	r3, #33	; 0x21
 800beb6:	6003      	str	r3, [r0, #0]
 800beb8:	2400      	movs	r4, #0
 800beba:	4d2f      	ldr	r5, [pc, #188]	; (800bf78 <pow+0x150>)
 800bebc:	e7d9      	b.n	800be72 <pow+0x4a>
 800bebe:	ec45 4b10 	vmov	d0, r4, r5
 800bec2:	f000 fe37 	bl	800cb34 <finite>
 800bec6:	bbb8      	cbnz	r0, 800bf38 <pow+0x110>
 800bec8:	ec49 8b10 	vmov	d0, r8, r9
 800becc:	f000 fe32 	bl	800cb34 <finite>
 800bed0:	b390      	cbz	r0, 800bf38 <pow+0x110>
 800bed2:	ec47 6b10 	vmov	d0, r6, r7
 800bed6:	f000 fe2d 	bl	800cb34 <finite>
 800beda:	b368      	cbz	r0, 800bf38 <pow+0x110>
 800bedc:	4622      	mov	r2, r4
 800bede:	462b      	mov	r3, r5
 800bee0:	4620      	mov	r0, r4
 800bee2:	4629      	mov	r1, r5
 800bee4:	f7f4 fe3a 	bl	8000b5c <__aeabi_dcmpun>
 800bee8:	b160      	cbz	r0, 800bf04 <pow+0xdc>
 800beea:	f7fe fdb9 	bl	800aa60 <__errno>
 800beee:	2321      	movs	r3, #33	; 0x21
 800bef0:	6003      	str	r3, [r0, #0]
 800bef2:	2200      	movs	r2, #0
 800bef4:	2300      	movs	r3, #0
 800bef6:	4610      	mov	r0, r2
 800bef8:	4619      	mov	r1, r3
 800befa:	f7f4 fcbf 	bl	800087c <__aeabi_ddiv>
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	e7b6      	b.n	800be72 <pow+0x4a>
 800bf04:	f7fe fdac 	bl	800aa60 <__errno>
 800bf08:	2322      	movs	r3, #34	; 0x22
 800bf0a:	6003      	str	r3, [r0, #0]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4640      	mov	r0, r8
 800bf12:	4649      	mov	r1, r9
 800bf14:	f7f4 fdfa 	bl	8000b0c <__aeabi_dcmplt>
 800bf18:	2400      	movs	r4, #0
 800bf1a:	b158      	cbz	r0, 800bf34 <pow+0x10c>
 800bf1c:	ec47 6b10 	vmov	d0, r6, r7
 800bf20:	f000 fe1e 	bl	800cb60 <rint>
 800bf24:	4632      	mov	r2, r6
 800bf26:	ec51 0b10 	vmov	r0, r1, d0
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	f7f4 fde4 	bl	8000af8 <__aeabi_dcmpeq>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d0c2      	beq.n	800beba <pow+0x92>
 800bf34:	4d11      	ldr	r5, [pc, #68]	; (800bf7c <pow+0x154>)
 800bf36:	e79c      	b.n	800be72 <pow+0x4a>
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	4629      	mov	r1, r5
 800bf40:	f7f4 fdda 	bl	8000af8 <__aeabi_dcmpeq>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d094      	beq.n	800be72 <pow+0x4a>
 800bf48:	ec49 8b10 	vmov	d0, r8, r9
 800bf4c:	f000 fdf2 	bl	800cb34 <finite>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d08e      	beq.n	800be72 <pow+0x4a>
 800bf54:	ec47 6b10 	vmov	d0, r6, r7
 800bf58:	f000 fdec 	bl	800cb34 <finite>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d088      	beq.n	800be72 <pow+0x4a>
 800bf60:	f7fe fd7e 	bl	800aa60 <__errno>
 800bf64:	2322      	movs	r3, #34	; 0x22
 800bf66:	6003      	str	r3, [r0, #0]
 800bf68:	2400      	movs	r4, #0
 800bf6a:	2500      	movs	r5, #0
 800bf6c:	e781      	b.n	800be72 <pow+0x4a>
 800bf6e:	4d04      	ldr	r5, [pc, #16]	; (800bf80 <pow+0x158>)
 800bf70:	2400      	movs	r4, #0
 800bf72:	e77e      	b.n	800be72 <pow+0x4a>
 800bf74:	200001f8 	.word	0x200001f8
 800bf78:	fff00000 	.word	0xfff00000
 800bf7c:	7ff00000 	.word	0x7ff00000
 800bf80:	3ff00000 	.word	0x3ff00000
 800bf84:	00000000 	.word	0x00000000

0800bf88 <__ieee754_pow>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	ed2d 8b06 	vpush	{d8-d10}
 800bf90:	b08d      	sub	sp, #52	; 0x34
 800bf92:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bf96:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800bf9a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bf9e:	ea56 0100 	orrs.w	r1, r6, r0
 800bfa2:	ec53 2b10 	vmov	r2, r3, d0
 800bfa6:	f000 84d1 	beq.w	800c94c <__ieee754_pow+0x9c4>
 800bfaa:	497f      	ldr	r1, [pc, #508]	; (800c1a8 <__ieee754_pow+0x220>)
 800bfac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bfb0:	428c      	cmp	r4, r1
 800bfb2:	ee10 8a10 	vmov	r8, s0
 800bfb6:	4699      	mov	r9, r3
 800bfb8:	dc09      	bgt.n	800bfce <__ieee754_pow+0x46>
 800bfba:	d103      	bne.n	800bfc4 <__ieee754_pow+0x3c>
 800bfbc:	b97a      	cbnz	r2, 800bfde <__ieee754_pow+0x56>
 800bfbe:	42a6      	cmp	r6, r4
 800bfc0:	dd02      	ble.n	800bfc8 <__ieee754_pow+0x40>
 800bfc2:	e00c      	b.n	800bfde <__ieee754_pow+0x56>
 800bfc4:	428e      	cmp	r6, r1
 800bfc6:	dc02      	bgt.n	800bfce <__ieee754_pow+0x46>
 800bfc8:	428e      	cmp	r6, r1
 800bfca:	d110      	bne.n	800bfee <__ieee754_pow+0x66>
 800bfcc:	b178      	cbz	r0, 800bfee <__ieee754_pow+0x66>
 800bfce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bfd2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bfd6:	ea54 0308 	orrs.w	r3, r4, r8
 800bfda:	f000 84b7 	beq.w	800c94c <__ieee754_pow+0x9c4>
 800bfde:	4873      	ldr	r0, [pc, #460]	; (800c1ac <__ieee754_pow+0x224>)
 800bfe0:	b00d      	add	sp, #52	; 0x34
 800bfe2:	ecbd 8b06 	vpop	{d8-d10}
 800bfe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfea:	f000 bdb1 	b.w	800cb50 <nan>
 800bfee:	f1b9 0f00 	cmp.w	r9, #0
 800bff2:	da36      	bge.n	800c062 <__ieee754_pow+0xda>
 800bff4:	496e      	ldr	r1, [pc, #440]	; (800c1b0 <__ieee754_pow+0x228>)
 800bff6:	428e      	cmp	r6, r1
 800bff8:	dc51      	bgt.n	800c09e <__ieee754_pow+0x116>
 800bffa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800bffe:	428e      	cmp	r6, r1
 800c000:	f340 84af 	ble.w	800c962 <__ieee754_pow+0x9da>
 800c004:	1531      	asrs	r1, r6, #20
 800c006:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c00a:	2914      	cmp	r1, #20
 800c00c:	dd0f      	ble.n	800c02e <__ieee754_pow+0xa6>
 800c00e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c012:	fa20 fc01 	lsr.w	ip, r0, r1
 800c016:	fa0c f101 	lsl.w	r1, ip, r1
 800c01a:	4281      	cmp	r1, r0
 800c01c:	f040 84a1 	bne.w	800c962 <__ieee754_pow+0x9da>
 800c020:	f00c 0c01 	and.w	ip, ip, #1
 800c024:	f1cc 0102 	rsb	r1, ip, #2
 800c028:	9100      	str	r1, [sp, #0]
 800c02a:	b180      	cbz	r0, 800c04e <__ieee754_pow+0xc6>
 800c02c:	e059      	b.n	800c0e2 <__ieee754_pow+0x15a>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d155      	bne.n	800c0de <__ieee754_pow+0x156>
 800c032:	f1c1 0114 	rsb	r1, r1, #20
 800c036:	fa46 fc01 	asr.w	ip, r6, r1
 800c03a:	fa0c f101 	lsl.w	r1, ip, r1
 800c03e:	42b1      	cmp	r1, r6
 800c040:	f040 848c 	bne.w	800c95c <__ieee754_pow+0x9d4>
 800c044:	f00c 0c01 	and.w	ip, ip, #1
 800c048:	f1cc 0102 	rsb	r1, ip, #2
 800c04c:	9100      	str	r1, [sp, #0]
 800c04e:	4959      	ldr	r1, [pc, #356]	; (800c1b4 <__ieee754_pow+0x22c>)
 800c050:	428e      	cmp	r6, r1
 800c052:	d12d      	bne.n	800c0b0 <__ieee754_pow+0x128>
 800c054:	2f00      	cmp	r7, #0
 800c056:	da79      	bge.n	800c14c <__ieee754_pow+0x1c4>
 800c058:	4956      	ldr	r1, [pc, #344]	; (800c1b4 <__ieee754_pow+0x22c>)
 800c05a:	2000      	movs	r0, #0
 800c05c:	f7f4 fc0e 	bl	800087c <__aeabi_ddiv>
 800c060:	e016      	b.n	800c090 <__ieee754_pow+0x108>
 800c062:	2100      	movs	r1, #0
 800c064:	9100      	str	r1, [sp, #0]
 800c066:	2800      	cmp	r0, #0
 800c068:	d13b      	bne.n	800c0e2 <__ieee754_pow+0x15a>
 800c06a:	494f      	ldr	r1, [pc, #316]	; (800c1a8 <__ieee754_pow+0x220>)
 800c06c:	428e      	cmp	r6, r1
 800c06e:	d1ee      	bne.n	800c04e <__ieee754_pow+0xc6>
 800c070:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c074:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c078:	ea53 0308 	orrs.w	r3, r3, r8
 800c07c:	f000 8466 	beq.w	800c94c <__ieee754_pow+0x9c4>
 800c080:	4b4d      	ldr	r3, [pc, #308]	; (800c1b8 <__ieee754_pow+0x230>)
 800c082:	429c      	cmp	r4, r3
 800c084:	dd0d      	ble.n	800c0a2 <__ieee754_pow+0x11a>
 800c086:	2f00      	cmp	r7, #0
 800c088:	f280 8464 	bge.w	800c954 <__ieee754_pow+0x9cc>
 800c08c:	2000      	movs	r0, #0
 800c08e:	2100      	movs	r1, #0
 800c090:	ec41 0b10 	vmov	d0, r0, r1
 800c094:	b00d      	add	sp, #52	; 0x34
 800c096:	ecbd 8b06 	vpop	{d8-d10}
 800c09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09e:	2102      	movs	r1, #2
 800c0a0:	e7e0      	b.n	800c064 <__ieee754_pow+0xdc>
 800c0a2:	2f00      	cmp	r7, #0
 800c0a4:	daf2      	bge.n	800c08c <__ieee754_pow+0x104>
 800c0a6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c0aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c0ae:	e7ef      	b.n	800c090 <__ieee754_pow+0x108>
 800c0b0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c0b4:	d104      	bne.n	800c0c0 <__ieee754_pow+0x138>
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	f7f4 fab5 	bl	8000628 <__aeabi_dmul>
 800c0be:	e7e7      	b.n	800c090 <__ieee754_pow+0x108>
 800c0c0:	493e      	ldr	r1, [pc, #248]	; (800c1bc <__ieee754_pow+0x234>)
 800c0c2:	428f      	cmp	r7, r1
 800c0c4:	d10d      	bne.n	800c0e2 <__ieee754_pow+0x15a>
 800c0c6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ca:	db0a      	blt.n	800c0e2 <__ieee754_pow+0x15a>
 800c0cc:	ec43 2b10 	vmov	d0, r2, r3
 800c0d0:	b00d      	add	sp, #52	; 0x34
 800c0d2:	ecbd 8b06 	vpop	{d8-d10}
 800c0d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0da:	f000 bc77 	b.w	800c9cc <__ieee754_sqrt>
 800c0de:	2100      	movs	r1, #0
 800c0e0:	9100      	str	r1, [sp, #0]
 800c0e2:	ec43 2b10 	vmov	d0, r2, r3
 800c0e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0ea:	f7ff fe4d 	bl	800bd88 <fabs>
 800c0ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0f2:	ec51 0b10 	vmov	r0, r1, d0
 800c0f6:	f1b8 0f00 	cmp.w	r8, #0
 800c0fa:	d12a      	bne.n	800c152 <__ieee754_pow+0x1ca>
 800c0fc:	b12c      	cbz	r4, 800c10a <__ieee754_pow+0x182>
 800c0fe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c1b4 <__ieee754_pow+0x22c>
 800c102:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c106:	45e6      	cmp	lr, ip
 800c108:	d123      	bne.n	800c152 <__ieee754_pow+0x1ca>
 800c10a:	2f00      	cmp	r7, #0
 800c10c:	da05      	bge.n	800c11a <__ieee754_pow+0x192>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	2000      	movs	r0, #0
 800c114:	4927      	ldr	r1, [pc, #156]	; (800c1b4 <__ieee754_pow+0x22c>)
 800c116:	f7f4 fbb1 	bl	800087c <__aeabi_ddiv>
 800c11a:	f1b9 0f00 	cmp.w	r9, #0
 800c11e:	dab7      	bge.n	800c090 <__ieee754_pow+0x108>
 800c120:	9b00      	ldr	r3, [sp, #0]
 800c122:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c126:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c12a:	4323      	orrs	r3, r4
 800c12c:	d108      	bne.n	800c140 <__ieee754_pow+0x1b8>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4610      	mov	r0, r2
 800c134:	4619      	mov	r1, r3
 800c136:	f7f4 f8bf 	bl	80002b8 <__aeabi_dsub>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	e78d      	b.n	800c05c <__ieee754_pow+0xd4>
 800c140:	9b00      	ldr	r3, [sp, #0]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d1a4      	bne.n	800c090 <__ieee754_pow+0x108>
 800c146:	4602      	mov	r2, r0
 800c148:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c14c:	4610      	mov	r0, r2
 800c14e:	4619      	mov	r1, r3
 800c150:	e79e      	b.n	800c090 <__ieee754_pow+0x108>
 800c152:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c156:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c15a:	950a      	str	r5, [sp, #40]	; 0x28
 800c15c:	9d00      	ldr	r5, [sp, #0]
 800c15e:	46ac      	mov	ip, r5
 800c160:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c162:	ea5c 0505 	orrs.w	r5, ip, r5
 800c166:	d0e4      	beq.n	800c132 <__ieee754_pow+0x1aa>
 800c168:	4b15      	ldr	r3, [pc, #84]	; (800c1c0 <__ieee754_pow+0x238>)
 800c16a:	429e      	cmp	r6, r3
 800c16c:	f340 80fc 	ble.w	800c368 <__ieee754_pow+0x3e0>
 800c170:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c174:	429e      	cmp	r6, r3
 800c176:	4b10      	ldr	r3, [pc, #64]	; (800c1b8 <__ieee754_pow+0x230>)
 800c178:	dd07      	ble.n	800c18a <__ieee754_pow+0x202>
 800c17a:	429c      	cmp	r4, r3
 800c17c:	dc0a      	bgt.n	800c194 <__ieee754_pow+0x20c>
 800c17e:	2f00      	cmp	r7, #0
 800c180:	da84      	bge.n	800c08c <__ieee754_pow+0x104>
 800c182:	a307      	add	r3, pc, #28	; (adr r3, 800c1a0 <__ieee754_pow+0x218>)
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	e795      	b.n	800c0b6 <__ieee754_pow+0x12e>
 800c18a:	429c      	cmp	r4, r3
 800c18c:	dbf7      	blt.n	800c17e <__ieee754_pow+0x1f6>
 800c18e:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <__ieee754_pow+0x22c>)
 800c190:	429c      	cmp	r4, r3
 800c192:	dd17      	ble.n	800c1c4 <__ieee754_pow+0x23c>
 800c194:	2f00      	cmp	r7, #0
 800c196:	dcf4      	bgt.n	800c182 <__ieee754_pow+0x1fa>
 800c198:	e778      	b.n	800c08c <__ieee754_pow+0x104>
 800c19a:	bf00      	nop
 800c19c:	f3af 8000 	nop.w
 800c1a0:	8800759c 	.word	0x8800759c
 800c1a4:	7e37e43c 	.word	0x7e37e43c
 800c1a8:	7ff00000 	.word	0x7ff00000
 800c1ac:	0800ce6d 	.word	0x0800ce6d
 800c1b0:	433fffff 	.word	0x433fffff
 800c1b4:	3ff00000 	.word	0x3ff00000
 800c1b8:	3fefffff 	.word	0x3fefffff
 800c1bc:	3fe00000 	.word	0x3fe00000
 800c1c0:	41e00000 	.word	0x41e00000
 800c1c4:	4b64      	ldr	r3, [pc, #400]	; (800c358 <__ieee754_pow+0x3d0>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f7f4 f876 	bl	80002b8 <__aeabi_dsub>
 800c1cc:	a356      	add	r3, pc, #344	; (adr r3, 800c328 <__ieee754_pow+0x3a0>)
 800c1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	f7f4 fa27 	bl	8000628 <__aeabi_dmul>
 800c1da:	a355      	add	r3, pc, #340	; (adr r3, 800c330 <__ieee754_pow+0x3a8>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	460f      	mov	r7, r1
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	f7f4 fa1e 	bl	8000628 <__aeabi_dmul>
 800c1ec:	4b5b      	ldr	r3, [pc, #364]	; (800c35c <__ieee754_pow+0x3d4>)
 800c1ee:	4682      	mov	sl, r0
 800c1f0:	468b      	mov	fp, r1
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	f7f4 fa16 	bl	8000628 <__aeabi_dmul>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	a14d      	add	r1, pc, #308	; (adr r1, 800c338 <__ieee754_pow+0x3b0>)
 800c202:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c206:	f7f4 f857 	bl	80002b8 <__aeabi_dsub>
 800c20a:	4622      	mov	r2, r4
 800c20c:	462b      	mov	r3, r5
 800c20e:	f7f4 fa0b 	bl	8000628 <__aeabi_dmul>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	2000      	movs	r0, #0
 800c218:	4951      	ldr	r1, [pc, #324]	; (800c360 <__ieee754_pow+0x3d8>)
 800c21a:	f7f4 f84d 	bl	80002b8 <__aeabi_dsub>
 800c21e:	4622      	mov	r2, r4
 800c220:	4680      	mov	r8, r0
 800c222:	4689      	mov	r9, r1
 800c224:	462b      	mov	r3, r5
 800c226:	4620      	mov	r0, r4
 800c228:	4629      	mov	r1, r5
 800c22a:	f7f4 f9fd 	bl	8000628 <__aeabi_dmul>
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4640      	mov	r0, r8
 800c234:	4649      	mov	r1, r9
 800c236:	f7f4 f9f7 	bl	8000628 <__aeabi_dmul>
 800c23a:	a341      	add	r3, pc, #260	; (adr r3, 800c340 <__ieee754_pow+0x3b8>)
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f7f4 f9f2 	bl	8000628 <__aeabi_dmul>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	4650      	mov	r0, sl
 800c24a:	4659      	mov	r1, fp
 800c24c:	f7f4 f834 	bl	80002b8 <__aeabi_dsub>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4680      	mov	r8, r0
 800c256:	4689      	mov	r9, r1
 800c258:	4630      	mov	r0, r6
 800c25a:	4639      	mov	r1, r7
 800c25c:	f7f4 f82e 	bl	80002bc <__adddf3>
 800c260:	2400      	movs	r4, #0
 800c262:	4632      	mov	r2, r6
 800c264:	463b      	mov	r3, r7
 800c266:	4620      	mov	r0, r4
 800c268:	460d      	mov	r5, r1
 800c26a:	f7f4 f825 	bl	80002b8 <__aeabi_dsub>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	f7f4 f81f 	bl	80002b8 <__aeabi_dsub>
 800c27a:	9b00      	ldr	r3, [sp, #0]
 800c27c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c27e:	3b01      	subs	r3, #1
 800c280:	4313      	orrs	r3, r2
 800c282:	4682      	mov	sl, r0
 800c284:	468b      	mov	fp, r1
 800c286:	f040 81f1 	bne.w	800c66c <__ieee754_pow+0x6e4>
 800c28a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c348 <__ieee754_pow+0x3c0>
 800c28e:	eeb0 8a47 	vmov.f32	s16, s14
 800c292:	eef0 8a67 	vmov.f32	s17, s15
 800c296:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c29a:	2600      	movs	r6, #0
 800c29c:	4632      	mov	r2, r6
 800c29e:	463b      	mov	r3, r7
 800c2a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2a4:	f7f4 f808 	bl	80002b8 <__aeabi_dsub>
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	462b      	mov	r3, r5
 800c2ac:	f7f4 f9bc 	bl	8000628 <__aeabi_dmul>
 800c2b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	4689      	mov	r9, r1
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	4659      	mov	r1, fp
 800c2bc:	f7f4 f9b4 	bl	8000628 <__aeabi_dmul>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	4649      	mov	r1, r9
 800c2c8:	f7f3 fff8 	bl	80002bc <__adddf3>
 800c2cc:	4632      	mov	r2, r6
 800c2ce:	463b      	mov	r3, r7
 800c2d0:	4680      	mov	r8, r0
 800c2d2:	4689      	mov	r9, r1
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	f7f4 f9a6 	bl	8000628 <__aeabi_dmul>
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4604      	mov	r4, r0
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	f7f3 ffe8 	bl	80002bc <__adddf3>
 800c2ec:	4b1d      	ldr	r3, [pc, #116]	; (800c364 <__ieee754_pow+0x3dc>)
 800c2ee:	4299      	cmp	r1, r3
 800c2f0:	ec45 4b19 	vmov	d9, r4, r5
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	460f      	mov	r7, r1
 800c2f8:	468b      	mov	fp, r1
 800c2fa:	f340 82fe 	ble.w	800c8fa <__ieee754_pow+0x972>
 800c2fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c302:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c306:	4303      	orrs	r3, r0
 800c308:	f000 81f0 	beq.w	800c6ec <__ieee754_pow+0x764>
 800c30c:	a310      	add	r3, pc, #64	; (adr r3, 800c350 <__ieee754_pow+0x3c8>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	ec51 0b18 	vmov	r0, r1, d8
 800c316:	f7f4 f987 	bl	8000628 <__aeabi_dmul>
 800c31a:	a30d      	add	r3, pc, #52	; (adr r3, 800c350 <__ieee754_pow+0x3c8>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	e6cb      	b.n	800c0ba <__ieee754_pow+0x132>
 800c322:	bf00      	nop
 800c324:	f3af 8000 	nop.w
 800c328:	60000000 	.word	0x60000000
 800c32c:	3ff71547 	.word	0x3ff71547
 800c330:	f85ddf44 	.word	0xf85ddf44
 800c334:	3e54ae0b 	.word	0x3e54ae0b
 800c338:	55555555 	.word	0x55555555
 800c33c:	3fd55555 	.word	0x3fd55555
 800c340:	652b82fe 	.word	0x652b82fe
 800c344:	3ff71547 	.word	0x3ff71547
 800c348:	00000000 	.word	0x00000000
 800c34c:	bff00000 	.word	0xbff00000
 800c350:	8800759c 	.word	0x8800759c
 800c354:	7e37e43c 	.word	0x7e37e43c
 800c358:	3ff00000 	.word	0x3ff00000
 800c35c:	3fd00000 	.word	0x3fd00000
 800c360:	3fe00000 	.word	0x3fe00000
 800c364:	408fffff 	.word	0x408fffff
 800c368:	4bd7      	ldr	r3, [pc, #860]	; (800c6c8 <__ieee754_pow+0x740>)
 800c36a:	ea03 0309 	and.w	r3, r3, r9
 800c36e:	2200      	movs	r2, #0
 800c370:	b92b      	cbnz	r3, 800c37e <__ieee754_pow+0x3f6>
 800c372:	4bd6      	ldr	r3, [pc, #856]	; (800c6cc <__ieee754_pow+0x744>)
 800c374:	f7f4 f958 	bl	8000628 <__aeabi_dmul>
 800c378:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c37c:	460c      	mov	r4, r1
 800c37e:	1523      	asrs	r3, r4, #20
 800c380:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c384:	4413      	add	r3, r2
 800c386:	9309      	str	r3, [sp, #36]	; 0x24
 800c388:	4bd1      	ldr	r3, [pc, #836]	; (800c6d0 <__ieee754_pow+0x748>)
 800c38a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c38e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c392:	429c      	cmp	r4, r3
 800c394:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c398:	dd08      	ble.n	800c3ac <__ieee754_pow+0x424>
 800c39a:	4bce      	ldr	r3, [pc, #824]	; (800c6d4 <__ieee754_pow+0x74c>)
 800c39c:	429c      	cmp	r4, r3
 800c39e:	f340 8163 	ble.w	800c668 <__ieee754_pow+0x6e0>
 800c3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c3ac:	2400      	movs	r4, #0
 800c3ae:	00e3      	lsls	r3, r4, #3
 800c3b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3b2:	4bc9      	ldr	r3, [pc, #804]	; (800c6d8 <__ieee754_pow+0x750>)
 800c3b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3b8:	ed93 7b00 	vldr	d7, [r3]
 800c3bc:	4629      	mov	r1, r5
 800c3be:	ec53 2b17 	vmov	r2, r3, d7
 800c3c2:	eeb0 8a47 	vmov.f32	s16, s14
 800c3c6:	eef0 8a67 	vmov.f32	s17, s15
 800c3ca:	4682      	mov	sl, r0
 800c3cc:	f7f3 ff74 	bl	80002b8 <__aeabi_dsub>
 800c3d0:	4652      	mov	r2, sl
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	ec51 0b18 	vmov	r0, r1, d8
 800c3dc:	f7f3 ff6e 	bl	80002bc <__adddf3>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	49bd      	ldr	r1, [pc, #756]	; (800c6dc <__ieee754_pow+0x754>)
 800c3e8:	f7f4 fa48 	bl	800087c <__aeabi_ddiv>
 800c3ec:	ec41 0b19 	vmov	d9, r0, r1
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	4639      	mov	r1, r7
 800c3f8:	f7f4 f916 	bl	8000628 <__aeabi_dmul>
 800c3fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c400:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c404:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c408:	2300      	movs	r3, #0
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c410:	46ab      	mov	fp, r5
 800c412:	106d      	asrs	r5, r5, #1
 800c414:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c418:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c41c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c420:	2200      	movs	r2, #0
 800c422:	4640      	mov	r0, r8
 800c424:	4649      	mov	r1, r9
 800c426:	4614      	mov	r4, r2
 800c428:	461d      	mov	r5, r3
 800c42a:	f7f4 f8fd 	bl	8000628 <__aeabi_dmul>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4630      	mov	r0, r6
 800c434:	4639      	mov	r1, r7
 800c436:	f7f3 ff3f 	bl	80002b8 <__aeabi_dsub>
 800c43a:	ec53 2b18 	vmov	r2, r3, d8
 800c43e:	4606      	mov	r6, r0
 800c440:	460f      	mov	r7, r1
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	f7f3 ff37 	bl	80002b8 <__aeabi_dsub>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4650      	mov	r0, sl
 800c450:	4659      	mov	r1, fp
 800c452:	f7f3 ff31 	bl	80002b8 <__aeabi_dsub>
 800c456:	4642      	mov	r2, r8
 800c458:	464b      	mov	r3, r9
 800c45a:	f7f4 f8e5 	bl	8000628 <__aeabi_dmul>
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	4630      	mov	r0, r6
 800c464:	4639      	mov	r1, r7
 800c466:	f7f3 ff27 	bl	80002b8 <__aeabi_dsub>
 800c46a:	ec53 2b19 	vmov	r2, r3, d9
 800c46e:	f7f4 f8db 	bl	8000628 <__aeabi_dmul>
 800c472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c476:	ec41 0b18 	vmov	d8, r0, r1
 800c47a:	4610      	mov	r0, r2
 800c47c:	4619      	mov	r1, r3
 800c47e:	f7f4 f8d3 	bl	8000628 <__aeabi_dmul>
 800c482:	a37d      	add	r3, pc, #500	; (adr r3, 800c678 <__ieee754_pow+0x6f0>)
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	4604      	mov	r4, r0
 800c48a:	460d      	mov	r5, r1
 800c48c:	f7f4 f8cc 	bl	8000628 <__aeabi_dmul>
 800c490:	a37b      	add	r3, pc, #492	; (adr r3, 800c680 <__ieee754_pow+0x6f8>)
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f7f3 ff11 	bl	80002bc <__adddf3>
 800c49a:	4622      	mov	r2, r4
 800c49c:	462b      	mov	r3, r5
 800c49e:	f7f4 f8c3 	bl	8000628 <__aeabi_dmul>
 800c4a2:	a379      	add	r3, pc, #484	; (adr r3, 800c688 <__ieee754_pow+0x700>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	f7f3 ff08 	bl	80002bc <__adddf3>
 800c4ac:	4622      	mov	r2, r4
 800c4ae:	462b      	mov	r3, r5
 800c4b0:	f7f4 f8ba 	bl	8000628 <__aeabi_dmul>
 800c4b4:	a376      	add	r3, pc, #472	; (adr r3, 800c690 <__ieee754_pow+0x708>)
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	f7f3 feff 	bl	80002bc <__adddf3>
 800c4be:	4622      	mov	r2, r4
 800c4c0:	462b      	mov	r3, r5
 800c4c2:	f7f4 f8b1 	bl	8000628 <__aeabi_dmul>
 800c4c6:	a374      	add	r3, pc, #464	; (adr r3, 800c698 <__ieee754_pow+0x710>)
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	f7f3 fef6 	bl	80002bc <__adddf3>
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	f7f4 f8a8 	bl	8000628 <__aeabi_dmul>
 800c4d8:	a371      	add	r3, pc, #452	; (adr r3, 800c6a0 <__ieee754_pow+0x718>)
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	f7f3 feed 	bl	80002bc <__adddf3>
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	460f      	mov	r7, r1
 800c4e8:	462b      	mov	r3, r5
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	f7f4 f89b 	bl	8000628 <__aeabi_dmul>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	f7f4 f895 	bl	8000628 <__aeabi_dmul>
 800c4fe:	4642      	mov	r2, r8
 800c500:	4604      	mov	r4, r0
 800c502:	460d      	mov	r5, r1
 800c504:	464b      	mov	r3, r9
 800c506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c50a:	f7f3 fed7 	bl	80002bc <__adddf3>
 800c50e:	ec53 2b18 	vmov	r2, r3, d8
 800c512:	f7f4 f889 	bl	8000628 <__aeabi_dmul>
 800c516:	4622      	mov	r2, r4
 800c518:	462b      	mov	r3, r5
 800c51a:	f7f3 fecf 	bl	80002bc <__adddf3>
 800c51e:	4642      	mov	r2, r8
 800c520:	4682      	mov	sl, r0
 800c522:	468b      	mov	fp, r1
 800c524:	464b      	mov	r3, r9
 800c526:	4640      	mov	r0, r8
 800c528:	4649      	mov	r1, r9
 800c52a:	f7f4 f87d 	bl	8000628 <__aeabi_dmul>
 800c52e:	4b6c      	ldr	r3, [pc, #432]	; (800c6e0 <__ieee754_pow+0x758>)
 800c530:	2200      	movs	r2, #0
 800c532:	4606      	mov	r6, r0
 800c534:	460f      	mov	r7, r1
 800c536:	f7f3 fec1 	bl	80002bc <__adddf3>
 800c53a:	4652      	mov	r2, sl
 800c53c:	465b      	mov	r3, fp
 800c53e:	f7f3 febd 	bl	80002bc <__adddf3>
 800c542:	9c04      	ldr	r4, [sp, #16]
 800c544:	460d      	mov	r5, r1
 800c546:	4622      	mov	r2, r4
 800c548:	460b      	mov	r3, r1
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	f7f4 f86b 	bl	8000628 <__aeabi_dmul>
 800c552:	4b63      	ldr	r3, [pc, #396]	; (800c6e0 <__ieee754_pow+0x758>)
 800c554:	4680      	mov	r8, r0
 800c556:	4689      	mov	r9, r1
 800c558:	2200      	movs	r2, #0
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f3 feab 	bl	80002b8 <__aeabi_dsub>
 800c562:	4632      	mov	r2, r6
 800c564:	463b      	mov	r3, r7
 800c566:	f7f3 fea7 	bl	80002b8 <__aeabi_dsub>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4650      	mov	r0, sl
 800c570:	4659      	mov	r1, fp
 800c572:	f7f3 fea1 	bl	80002b8 <__aeabi_dsub>
 800c576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c57a:	f7f4 f855 	bl	8000628 <__aeabi_dmul>
 800c57e:	4622      	mov	r2, r4
 800c580:	4606      	mov	r6, r0
 800c582:	460f      	mov	r7, r1
 800c584:	462b      	mov	r3, r5
 800c586:	ec51 0b18 	vmov	r0, r1, d8
 800c58a:	f7f4 f84d 	bl	8000628 <__aeabi_dmul>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4630      	mov	r0, r6
 800c594:	4639      	mov	r1, r7
 800c596:	f7f3 fe91 	bl	80002bc <__adddf3>
 800c59a:	4606      	mov	r6, r0
 800c59c:	460f      	mov	r7, r1
 800c59e:	4602      	mov	r2, r0
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	f7f3 fe89 	bl	80002bc <__adddf3>
 800c5aa:	9c04      	ldr	r4, [sp, #16]
 800c5ac:	a33e      	add	r3, pc, #248	; (adr r3, 800c6a8 <__ieee754_pow+0x720>)
 800c5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	f7f4 f837 	bl	8000628 <__aeabi_dmul>
 800c5ba:	4642      	mov	r2, r8
 800c5bc:	ec41 0b18 	vmov	d8, r0, r1
 800c5c0:	464b      	mov	r3, r9
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	f7f3 fe77 	bl	80002b8 <__aeabi_dsub>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	f7f3 fe71 	bl	80002b8 <__aeabi_dsub>
 800c5d6:	a336      	add	r3, pc, #216	; (adr r3, 800c6b0 <__ieee754_pow+0x728>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f7f4 f824 	bl	8000628 <__aeabi_dmul>
 800c5e0:	a335      	add	r3, pc, #212	; (adr r3, 800c6b8 <__ieee754_pow+0x730>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	460f      	mov	r7, r1
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	f7f4 f81b 	bl	8000628 <__aeabi_dmul>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	f7f3 fe5f 	bl	80002bc <__adddf3>
 800c5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c600:	4b38      	ldr	r3, [pc, #224]	; (800c6e4 <__ieee754_pow+0x75c>)
 800c602:	4413      	add	r3, r2
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	f7f3 fe58 	bl	80002bc <__adddf3>
 800c60c:	4682      	mov	sl, r0
 800c60e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c610:	468b      	mov	fp, r1
 800c612:	f7f3 ff9f 	bl	8000554 <__aeabi_i2d>
 800c616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c618:	4b33      	ldr	r3, [pc, #204]	; (800c6e8 <__ieee754_pow+0x760>)
 800c61a:	4413      	add	r3, r2
 800c61c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c620:	4606      	mov	r6, r0
 800c622:	460f      	mov	r7, r1
 800c624:	4652      	mov	r2, sl
 800c626:	465b      	mov	r3, fp
 800c628:	ec51 0b18 	vmov	r0, r1, d8
 800c62c:	f7f3 fe46 	bl	80002bc <__adddf3>
 800c630:	4642      	mov	r2, r8
 800c632:	464b      	mov	r3, r9
 800c634:	f7f3 fe42 	bl	80002bc <__adddf3>
 800c638:	4632      	mov	r2, r6
 800c63a:	463b      	mov	r3, r7
 800c63c:	f7f3 fe3e 	bl	80002bc <__adddf3>
 800c640:	9c04      	ldr	r4, [sp, #16]
 800c642:	4632      	mov	r2, r6
 800c644:	463b      	mov	r3, r7
 800c646:	4620      	mov	r0, r4
 800c648:	460d      	mov	r5, r1
 800c64a:	f7f3 fe35 	bl	80002b8 <__aeabi_dsub>
 800c64e:	4642      	mov	r2, r8
 800c650:	464b      	mov	r3, r9
 800c652:	f7f3 fe31 	bl	80002b8 <__aeabi_dsub>
 800c656:	ec53 2b18 	vmov	r2, r3, d8
 800c65a:	f7f3 fe2d 	bl	80002b8 <__aeabi_dsub>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	4650      	mov	r0, sl
 800c664:	4659      	mov	r1, fp
 800c666:	e606      	b.n	800c276 <__ieee754_pow+0x2ee>
 800c668:	2401      	movs	r4, #1
 800c66a:	e6a0      	b.n	800c3ae <__ieee754_pow+0x426>
 800c66c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c6c0 <__ieee754_pow+0x738>
 800c670:	e60d      	b.n	800c28e <__ieee754_pow+0x306>
 800c672:	bf00      	nop
 800c674:	f3af 8000 	nop.w
 800c678:	4a454eef 	.word	0x4a454eef
 800c67c:	3fca7e28 	.word	0x3fca7e28
 800c680:	93c9db65 	.word	0x93c9db65
 800c684:	3fcd864a 	.word	0x3fcd864a
 800c688:	a91d4101 	.word	0xa91d4101
 800c68c:	3fd17460 	.word	0x3fd17460
 800c690:	518f264d 	.word	0x518f264d
 800c694:	3fd55555 	.word	0x3fd55555
 800c698:	db6fabff 	.word	0xdb6fabff
 800c69c:	3fdb6db6 	.word	0x3fdb6db6
 800c6a0:	33333303 	.word	0x33333303
 800c6a4:	3fe33333 	.word	0x3fe33333
 800c6a8:	e0000000 	.word	0xe0000000
 800c6ac:	3feec709 	.word	0x3feec709
 800c6b0:	dc3a03fd 	.word	0xdc3a03fd
 800c6b4:	3feec709 	.word	0x3feec709
 800c6b8:	145b01f5 	.word	0x145b01f5
 800c6bc:	be3e2fe0 	.word	0xbe3e2fe0
 800c6c0:	00000000 	.word	0x00000000
 800c6c4:	3ff00000 	.word	0x3ff00000
 800c6c8:	7ff00000 	.word	0x7ff00000
 800c6cc:	43400000 	.word	0x43400000
 800c6d0:	0003988e 	.word	0x0003988e
 800c6d4:	000bb679 	.word	0x000bb679
 800c6d8:	0800cee0 	.word	0x0800cee0
 800c6dc:	3ff00000 	.word	0x3ff00000
 800c6e0:	40080000 	.word	0x40080000
 800c6e4:	0800cf00 	.word	0x0800cf00
 800c6e8:	0800cef0 	.word	0x0800cef0
 800c6ec:	a3b5      	add	r3, pc, #724	; (adr r3, 800c9c4 <__ieee754_pow+0xa3c>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	f7f3 fde1 	bl	80002bc <__adddf3>
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	ec41 0b1a 	vmov	d10, r0, r1
 800c700:	462b      	mov	r3, r5
 800c702:	4630      	mov	r0, r6
 800c704:	4639      	mov	r1, r7
 800c706:	f7f3 fdd7 	bl	80002b8 <__aeabi_dsub>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	ec51 0b1a 	vmov	r0, r1, d10
 800c712:	f7f4 fa19 	bl	8000b48 <__aeabi_dcmpgt>
 800c716:	2800      	cmp	r0, #0
 800c718:	f47f adf8 	bne.w	800c30c <__ieee754_pow+0x384>
 800c71c:	4aa4      	ldr	r2, [pc, #656]	; (800c9b0 <__ieee754_pow+0xa28>)
 800c71e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c722:	4293      	cmp	r3, r2
 800c724:	f340 810b 	ble.w	800c93e <__ieee754_pow+0x9b6>
 800c728:	151b      	asrs	r3, r3, #20
 800c72a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c72e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c732:	fa4a f303 	asr.w	r3, sl, r3
 800c736:	445b      	add	r3, fp
 800c738:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c73c:	4e9d      	ldr	r6, [pc, #628]	; (800c9b4 <__ieee754_pow+0xa2c>)
 800c73e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c742:	4116      	asrs	r6, r2
 800c744:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c748:	2000      	movs	r0, #0
 800c74a:	ea23 0106 	bic.w	r1, r3, r6
 800c74e:	f1c2 0214 	rsb	r2, r2, #20
 800c752:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c756:	fa4a fa02 	asr.w	sl, sl, r2
 800c75a:	f1bb 0f00 	cmp.w	fp, #0
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	bfb8      	it	lt
 800c768:	f1ca 0a00 	rsblt	sl, sl, #0
 800c76c:	f7f3 fda4 	bl	80002b8 <__aeabi_dsub>
 800c770:	ec41 0b19 	vmov	d9, r0, r1
 800c774:	4642      	mov	r2, r8
 800c776:	464b      	mov	r3, r9
 800c778:	ec51 0b19 	vmov	r0, r1, d9
 800c77c:	f7f3 fd9e 	bl	80002bc <__adddf3>
 800c780:	2400      	movs	r4, #0
 800c782:	a379      	add	r3, pc, #484	; (adr r3, 800c968 <__ieee754_pow+0x9e0>)
 800c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c788:	4620      	mov	r0, r4
 800c78a:	460d      	mov	r5, r1
 800c78c:	f7f3 ff4c 	bl	8000628 <__aeabi_dmul>
 800c790:	ec53 2b19 	vmov	r2, r3, d9
 800c794:	4606      	mov	r6, r0
 800c796:	460f      	mov	r7, r1
 800c798:	4620      	mov	r0, r4
 800c79a:	4629      	mov	r1, r5
 800c79c:	f7f3 fd8c 	bl	80002b8 <__aeabi_dsub>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	f7f3 fd86 	bl	80002b8 <__aeabi_dsub>
 800c7ac:	a370      	add	r3, pc, #448	; (adr r3, 800c970 <__ieee754_pow+0x9e8>)
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	f7f3 ff39 	bl	8000628 <__aeabi_dmul>
 800c7b6:	a370      	add	r3, pc, #448	; (adr r3, 800c978 <__ieee754_pow+0x9f0>)
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	4680      	mov	r8, r0
 800c7be:	4689      	mov	r9, r1
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	4629      	mov	r1, r5
 800c7c4:	f7f3 ff30 	bl	8000628 <__aeabi_dmul>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	f7f3 fd74 	bl	80002bc <__adddf3>
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4630      	mov	r0, r6
 800c7de:	4639      	mov	r1, r7
 800c7e0:	f7f3 fd6c 	bl	80002bc <__adddf3>
 800c7e4:	4632      	mov	r2, r6
 800c7e6:	463b      	mov	r3, r7
 800c7e8:	4680      	mov	r8, r0
 800c7ea:	4689      	mov	r9, r1
 800c7ec:	f7f3 fd64 	bl	80002b8 <__aeabi_dsub>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7f3 fd5e 	bl	80002b8 <__aeabi_dsub>
 800c7fc:	4642      	mov	r2, r8
 800c7fe:	4606      	mov	r6, r0
 800c800:	460f      	mov	r7, r1
 800c802:	464b      	mov	r3, r9
 800c804:	4640      	mov	r0, r8
 800c806:	4649      	mov	r1, r9
 800c808:	f7f3 ff0e 	bl	8000628 <__aeabi_dmul>
 800c80c:	a35c      	add	r3, pc, #368	; (adr r3, 800c980 <__ieee754_pow+0x9f8>)
 800c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c812:	4604      	mov	r4, r0
 800c814:	460d      	mov	r5, r1
 800c816:	f7f3 ff07 	bl	8000628 <__aeabi_dmul>
 800c81a:	a35b      	add	r3, pc, #364	; (adr r3, 800c988 <__ieee754_pow+0xa00>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 fd4a 	bl	80002b8 <__aeabi_dsub>
 800c824:	4622      	mov	r2, r4
 800c826:	462b      	mov	r3, r5
 800c828:	f7f3 fefe 	bl	8000628 <__aeabi_dmul>
 800c82c:	a358      	add	r3, pc, #352	; (adr r3, 800c990 <__ieee754_pow+0xa08>)
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	f7f3 fd43 	bl	80002bc <__adddf3>
 800c836:	4622      	mov	r2, r4
 800c838:	462b      	mov	r3, r5
 800c83a:	f7f3 fef5 	bl	8000628 <__aeabi_dmul>
 800c83e:	a356      	add	r3, pc, #344	; (adr r3, 800c998 <__ieee754_pow+0xa10>)
 800c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c844:	f7f3 fd38 	bl	80002b8 <__aeabi_dsub>
 800c848:	4622      	mov	r2, r4
 800c84a:	462b      	mov	r3, r5
 800c84c:	f7f3 feec 	bl	8000628 <__aeabi_dmul>
 800c850:	a353      	add	r3, pc, #332	; (adr r3, 800c9a0 <__ieee754_pow+0xa18>)
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	f7f3 fd31 	bl	80002bc <__adddf3>
 800c85a:	4622      	mov	r2, r4
 800c85c:	462b      	mov	r3, r5
 800c85e:	f7f3 fee3 	bl	8000628 <__aeabi_dmul>
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f3 fd25 	bl	80002b8 <__aeabi_dsub>
 800c86e:	4604      	mov	r4, r0
 800c870:	460d      	mov	r5, r1
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	4640      	mov	r0, r8
 800c878:	4649      	mov	r1, r9
 800c87a:	f7f3 fed5 	bl	8000628 <__aeabi_dmul>
 800c87e:	2200      	movs	r2, #0
 800c880:	ec41 0b19 	vmov	d9, r0, r1
 800c884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c888:	4620      	mov	r0, r4
 800c88a:	4629      	mov	r1, r5
 800c88c:	f7f3 fd14 	bl	80002b8 <__aeabi_dsub>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	ec51 0b19 	vmov	r0, r1, d9
 800c898:	f7f3 fff0 	bl	800087c <__aeabi_ddiv>
 800c89c:	4632      	mov	r2, r6
 800c89e:	4604      	mov	r4, r0
 800c8a0:	460d      	mov	r5, r1
 800c8a2:	463b      	mov	r3, r7
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	4649      	mov	r1, r9
 800c8a8:	f7f3 febe 	bl	8000628 <__aeabi_dmul>
 800c8ac:	4632      	mov	r2, r6
 800c8ae:	463b      	mov	r3, r7
 800c8b0:	f7f3 fd04 	bl	80002bc <__adddf3>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fcfc 	bl	80002b8 <__aeabi_dsub>
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	464b      	mov	r3, r9
 800c8c4:	f7f3 fcf8 	bl	80002b8 <__aeabi_dsub>
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	493a      	ldr	r1, [pc, #232]	; (800c9b8 <__ieee754_pow+0xa30>)
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	f7f3 fcf2 	bl	80002b8 <__aeabi_dsub>
 800c8d4:	e9cd 0100 	strd	r0, r1, [sp]
 800c8d8:	9b01      	ldr	r3, [sp, #4]
 800c8da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c8de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8e2:	da2f      	bge.n	800c944 <__ieee754_pow+0x9bc>
 800c8e4:	4650      	mov	r0, sl
 800c8e6:	ed9d 0b00 	vldr	d0, [sp]
 800c8ea:	f000 f9c5 	bl	800cc78 <scalbn>
 800c8ee:	ec51 0b10 	vmov	r0, r1, d0
 800c8f2:	ec53 2b18 	vmov	r2, r3, d8
 800c8f6:	f7ff bbe0 	b.w	800c0ba <__ieee754_pow+0x132>
 800c8fa:	4b30      	ldr	r3, [pc, #192]	; (800c9bc <__ieee754_pow+0xa34>)
 800c8fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c900:	429e      	cmp	r6, r3
 800c902:	f77f af0b 	ble.w	800c71c <__ieee754_pow+0x794>
 800c906:	4b2e      	ldr	r3, [pc, #184]	; (800c9c0 <__ieee754_pow+0xa38>)
 800c908:	440b      	add	r3, r1
 800c90a:	4303      	orrs	r3, r0
 800c90c:	d00b      	beq.n	800c926 <__ieee754_pow+0x99e>
 800c90e:	a326      	add	r3, pc, #152	; (adr r3, 800c9a8 <__ieee754_pow+0xa20>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	ec51 0b18 	vmov	r0, r1, d8
 800c918:	f7f3 fe86 	bl	8000628 <__aeabi_dmul>
 800c91c:	a322      	add	r3, pc, #136	; (adr r3, 800c9a8 <__ieee754_pow+0xa20>)
 800c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c922:	f7ff bbca 	b.w	800c0ba <__ieee754_pow+0x132>
 800c926:	4622      	mov	r2, r4
 800c928:	462b      	mov	r3, r5
 800c92a:	f7f3 fcc5 	bl	80002b8 <__aeabi_dsub>
 800c92e:	4642      	mov	r2, r8
 800c930:	464b      	mov	r3, r9
 800c932:	f7f4 f8ff 	bl	8000b34 <__aeabi_dcmpge>
 800c936:	2800      	cmp	r0, #0
 800c938:	f43f aef0 	beq.w	800c71c <__ieee754_pow+0x794>
 800c93c:	e7e7      	b.n	800c90e <__ieee754_pow+0x986>
 800c93e:	f04f 0a00 	mov.w	sl, #0
 800c942:	e717      	b.n	800c774 <__ieee754_pow+0x7ec>
 800c944:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c948:	4619      	mov	r1, r3
 800c94a:	e7d2      	b.n	800c8f2 <__ieee754_pow+0x96a>
 800c94c:	491a      	ldr	r1, [pc, #104]	; (800c9b8 <__ieee754_pow+0xa30>)
 800c94e:	2000      	movs	r0, #0
 800c950:	f7ff bb9e 	b.w	800c090 <__ieee754_pow+0x108>
 800c954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c958:	f7ff bb9a 	b.w	800c090 <__ieee754_pow+0x108>
 800c95c:	9000      	str	r0, [sp, #0]
 800c95e:	f7ff bb76 	b.w	800c04e <__ieee754_pow+0xc6>
 800c962:	2100      	movs	r1, #0
 800c964:	f7ff bb60 	b.w	800c028 <__ieee754_pow+0xa0>
 800c968:	00000000 	.word	0x00000000
 800c96c:	3fe62e43 	.word	0x3fe62e43
 800c970:	fefa39ef 	.word	0xfefa39ef
 800c974:	3fe62e42 	.word	0x3fe62e42
 800c978:	0ca86c39 	.word	0x0ca86c39
 800c97c:	be205c61 	.word	0xbe205c61
 800c980:	72bea4d0 	.word	0x72bea4d0
 800c984:	3e663769 	.word	0x3e663769
 800c988:	c5d26bf1 	.word	0xc5d26bf1
 800c98c:	3ebbbd41 	.word	0x3ebbbd41
 800c990:	af25de2c 	.word	0xaf25de2c
 800c994:	3f11566a 	.word	0x3f11566a
 800c998:	16bebd93 	.word	0x16bebd93
 800c99c:	3f66c16c 	.word	0x3f66c16c
 800c9a0:	5555553e 	.word	0x5555553e
 800c9a4:	3fc55555 	.word	0x3fc55555
 800c9a8:	c2f8f359 	.word	0xc2f8f359
 800c9ac:	01a56e1f 	.word	0x01a56e1f
 800c9b0:	3fe00000 	.word	0x3fe00000
 800c9b4:	000fffff 	.word	0x000fffff
 800c9b8:	3ff00000 	.word	0x3ff00000
 800c9bc:	4090cbff 	.word	0x4090cbff
 800c9c0:	3f6f3400 	.word	0x3f6f3400
 800c9c4:	652b82fe 	.word	0x652b82fe
 800c9c8:	3c971547 	.word	0x3c971547

0800c9cc <__ieee754_sqrt>:
 800c9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d0:	ec55 4b10 	vmov	r4, r5, d0
 800c9d4:	4e56      	ldr	r6, [pc, #344]	; (800cb30 <__ieee754_sqrt+0x164>)
 800c9d6:	43ae      	bics	r6, r5
 800c9d8:	ee10 0a10 	vmov	r0, s0
 800c9dc:	ee10 3a10 	vmov	r3, s0
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	d110      	bne.n	800ca08 <__ieee754_sqrt+0x3c>
 800c9e6:	ee10 2a10 	vmov	r2, s0
 800c9ea:	462b      	mov	r3, r5
 800c9ec:	f7f3 fe1c 	bl	8000628 <__aeabi_dmul>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	f7f3 fc60 	bl	80002bc <__adddf3>
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	460d      	mov	r5, r1
 800ca00:	ec45 4b10 	vmov	d0, r4, r5
 800ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca08:	2d00      	cmp	r5, #0
 800ca0a:	dc10      	bgt.n	800ca2e <__ieee754_sqrt+0x62>
 800ca0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca10:	4330      	orrs	r0, r6
 800ca12:	d0f5      	beq.n	800ca00 <__ieee754_sqrt+0x34>
 800ca14:	b15d      	cbz	r5, 800ca2e <__ieee754_sqrt+0x62>
 800ca16:	ee10 2a10 	vmov	r2, s0
 800ca1a:	462b      	mov	r3, r5
 800ca1c:	ee10 0a10 	vmov	r0, s0
 800ca20:	f7f3 fc4a 	bl	80002b8 <__aeabi_dsub>
 800ca24:	4602      	mov	r2, r0
 800ca26:	460b      	mov	r3, r1
 800ca28:	f7f3 ff28 	bl	800087c <__aeabi_ddiv>
 800ca2c:	e7e6      	b.n	800c9fc <__ieee754_sqrt+0x30>
 800ca2e:	1509      	asrs	r1, r1, #20
 800ca30:	d076      	beq.n	800cb20 <__ieee754_sqrt+0x154>
 800ca32:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ca36:	07ce      	lsls	r6, r1, #31
 800ca38:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ca3c:	bf5e      	ittt	pl
 800ca3e:	0fda      	lsrpl	r2, r3, #31
 800ca40:	005b      	lslpl	r3, r3, #1
 800ca42:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ca46:	0fda      	lsrs	r2, r3, #31
 800ca48:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ca4c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ca50:	2000      	movs	r0, #0
 800ca52:	106d      	asrs	r5, r5, #1
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	f04f 0e16 	mov.w	lr, #22
 800ca5a:	4684      	mov	ip, r0
 800ca5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca60:	eb0c 0401 	add.w	r4, ip, r1
 800ca64:	4294      	cmp	r4, r2
 800ca66:	bfde      	ittt	le
 800ca68:	1b12      	suble	r2, r2, r4
 800ca6a:	eb04 0c01 	addle.w	ip, r4, r1
 800ca6e:	1840      	addle	r0, r0, r1
 800ca70:	0052      	lsls	r2, r2, #1
 800ca72:	f1be 0e01 	subs.w	lr, lr, #1
 800ca76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ca7a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ca7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca82:	d1ed      	bne.n	800ca60 <__ieee754_sqrt+0x94>
 800ca84:	4671      	mov	r1, lr
 800ca86:	2720      	movs	r7, #32
 800ca88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ca8c:	4562      	cmp	r2, ip
 800ca8e:	eb04 060e 	add.w	r6, r4, lr
 800ca92:	dc02      	bgt.n	800ca9a <__ieee754_sqrt+0xce>
 800ca94:	d113      	bne.n	800cabe <__ieee754_sqrt+0xf2>
 800ca96:	429e      	cmp	r6, r3
 800ca98:	d811      	bhi.n	800cabe <__ieee754_sqrt+0xf2>
 800ca9a:	2e00      	cmp	r6, #0
 800ca9c:	eb06 0e04 	add.w	lr, r6, r4
 800caa0:	da43      	bge.n	800cb2a <__ieee754_sqrt+0x15e>
 800caa2:	f1be 0f00 	cmp.w	lr, #0
 800caa6:	db40      	blt.n	800cb2a <__ieee754_sqrt+0x15e>
 800caa8:	f10c 0801 	add.w	r8, ip, #1
 800caac:	eba2 020c 	sub.w	r2, r2, ip
 800cab0:	429e      	cmp	r6, r3
 800cab2:	bf88      	it	hi
 800cab4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cab8:	1b9b      	subs	r3, r3, r6
 800caba:	4421      	add	r1, r4
 800cabc:	46c4      	mov	ip, r8
 800cabe:	0052      	lsls	r2, r2, #1
 800cac0:	3f01      	subs	r7, #1
 800cac2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cac6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800caca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cace:	d1dd      	bne.n	800ca8c <__ieee754_sqrt+0xc0>
 800cad0:	4313      	orrs	r3, r2
 800cad2:	d006      	beq.n	800cae2 <__ieee754_sqrt+0x116>
 800cad4:	1c4c      	adds	r4, r1, #1
 800cad6:	bf13      	iteet	ne
 800cad8:	3101      	addne	r1, #1
 800cada:	3001      	addeq	r0, #1
 800cadc:	4639      	moveq	r1, r7
 800cade:	f021 0101 	bicne.w	r1, r1, #1
 800cae2:	1043      	asrs	r3, r0, #1
 800cae4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cae8:	0849      	lsrs	r1, r1, #1
 800caea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800caee:	07c2      	lsls	r2, r0, #31
 800caf0:	bf48      	it	mi
 800caf2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800caf6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cafa:	460c      	mov	r4, r1
 800cafc:	463d      	mov	r5, r7
 800cafe:	e77f      	b.n	800ca00 <__ieee754_sqrt+0x34>
 800cb00:	0ada      	lsrs	r2, r3, #11
 800cb02:	3815      	subs	r0, #21
 800cb04:	055b      	lsls	r3, r3, #21
 800cb06:	2a00      	cmp	r2, #0
 800cb08:	d0fa      	beq.n	800cb00 <__ieee754_sqrt+0x134>
 800cb0a:	02d7      	lsls	r7, r2, #11
 800cb0c:	d50a      	bpl.n	800cb24 <__ieee754_sqrt+0x158>
 800cb0e:	f1c1 0420 	rsb	r4, r1, #32
 800cb12:	fa23 f404 	lsr.w	r4, r3, r4
 800cb16:	1e4d      	subs	r5, r1, #1
 800cb18:	408b      	lsls	r3, r1
 800cb1a:	4322      	orrs	r2, r4
 800cb1c:	1b41      	subs	r1, r0, r5
 800cb1e:	e788      	b.n	800ca32 <__ieee754_sqrt+0x66>
 800cb20:	4608      	mov	r0, r1
 800cb22:	e7f0      	b.n	800cb06 <__ieee754_sqrt+0x13a>
 800cb24:	0052      	lsls	r2, r2, #1
 800cb26:	3101      	adds	r1, #1
 800cb28:	e7ef      	b.n	800cb0a <__ieee754_sqrt+0x13e>
 800cb2a:	46e0      	mov	r8, ip
 800cb2c:	e7be      	b.n	800caac <__ieee754_sqrt+0xe0>
 800cb2e:	bf00      	nop
 800cb30:	7ff00000 	.word	0x7ff00000

0800cb34 <finite>:
 800cb34:	b082      	sub	sp, #8
 800cb36:	ed8d 0b00 	vstr	d0, [sp]
 800cb3a:	9801      	ldr	r0, [sp, #4]
 800cb3c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cb40:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cb44:	0fc0      	lsrs	r0, r0, #31
 800cb46:	b002      	add	sp, #8
 800cb48:	4770      	bx	lr
 800cb4a:	0000      	movs	r0, r0
 800cb4c:	0000      	movs	r0, r0
	...

0800cb50 <nan>:
 800cb50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb58 <nan+0x8>
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	00000000 	.word	0x00000000
 800cb5c:	7ff80000 	.word	0x7ff80000

0800cb60 <rint>:
 800cb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb62:	ec51 0b10 	vmov	r0, r1, d0
 800cb66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cb6a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cb6e:	2e13      	cmp	r6, #19
 800cb70:	ee10 4a10 	vmov	r4, s0
 800cb74:	460b      	mov	r3, r1
 800cb76:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800cb7a:	dc58      	bgt.n	800cc2e <rint+0xce>
 800cb7c:	2e00      	cmp	r6, #0
 800cb7e:	da2b      	bge.n	800cbd8 <rint+0x78>
 800cb80:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cb84:	4302      	orrs	r2, r0
 800cb86:	d023      	beq.n	800cbd0 <rint+0x70>
 800cb88:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cb8c:	4302      	orrs	r2, r0
 800cb8e:	4254      	negs	r4, r2
 800cb90:	4314      	orrs	r4, r2
 800cb92:	0c4b      	lsrs	r3, r1, #17
 800cb94:	0b24      	lsrs	r4, r4, #12
 800cb96:	045b      	lsls	r3, r3, #17
 800cb98:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cb9c:	ea44 0103 	orr.w	r1, r4, r3
 800cba0:	4b32      	ldr	r3, [pc, #200]	; (800cc6c <rint+0x10c>)
 800cba2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cba6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	4630      	mov	r0, r6
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	f7f3 fb83 	bl	80002bc <__adddf3>
 800cbb6:	e9cd 0100 	strd	r0, r1, [sp]
 800cbba:	463b      	mov	r3, r7
 800cbbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbc0:	4632      	mov	r2, r6
 800cbc2:	f7f3 fb79 	bl	80002b8 <__aeabi_dsub>
 800cbc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cbce:	4639      	mov	r1, r7
 800cbd0:	ec41 0b10 	vmov	d0, r0, r1
 800cbd4:	b003      	add	sp, #12
 800cbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd8:	4a25      	ldr	r2, [pc, #148]	; (800cc70 <rint+0x110>)
 800cbda:	4132      	asrs	r2, r6
 800cbdc:	ea01 0702 	and.w	r7, r1, r2
 800cbe0:	4307      	orrs	r7, r0
 800cbe2:	d0f5      	beq.n	800cbd0 <rint+0x70>
 800cbe4:	0851      	lsrs	r1, r2, #1
 800cbe6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cbea:	4314      	orrs	r4, r2
 800cbec:	d00c      	beq.n	800cc08 <rint+0xa8>
 800cbee:	ea23 0201 	bic.w	r2, r3, r1
 800cbf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cbf6:	2e13      	cmp	r6, #19
 800cbf8:	fa43 f606 	asr.w	r6, r3, r6
 800cbfc:	bf0c      	ite	eq
 800cbfe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cc02:	2400      	movne	r4, #0
 800cc04:	ea42 0306 	orr.w	r3, r2, r6
 800cc08:	4918      	ldr	r1, [pc, #96]	; (800cc6c <rint+0x10c>)
 800cc0a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cc0e:	4622      	mov	r2, r4
 800cc10:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc14:	4620      	mov	r0, r4
 800cc16:	4629      	mov	r1, r5
 800cc18:	f7f3 fb50 	bl	80002bc <__adddf3>
 800cc1c:	e9cd 0100 	strd	r0, r1, [sp]
 800cc20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc24:	4622      	mov	r2, r4
 800cc26:	462b      	mov	r3, r5
 800cc28:	f7f3 fb46 	bl	80002b8 <__aeabi_dsub>
 800cc2c:	e7d0      	b.n	800cbd0 <rint+0x70>
 800cc2e:	2e33      	cmp	r6, #51	; 0x33
 800cc30:	dd07      	ble.n	800cc42 <rint+0xe2>
 800cc32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc36:	d1cb      	bne.n	800cbd0 <rint+0x70>
 800cc38:	ee10 2a10 	vmov	r2, s0
 800cc3c:	f7f3 fb3e 	bl	80002bc <__adddf3>
 800cc40:	e7c6      	b.n	800cbd0 <rint+0x70>
 800cc42:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cc46:	f04f 36ff 	mov.w	r6, #4294967295
 800cc4a:	40d6      	lsrs	r6, r2
 800cc4c:	4230      	tst	r0, r6
 800cc4e:	d0bf      	beq.n	800cbd0 <rint+0x70>
 800cc50:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cc54:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cc58:	bf1f      	itttt	ne
 800cc5a:	ea24 0101 	bicne.w	r1, r4, r1
 800cc5e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cc62:	fa44 f202 	asrne.w	r2, r4, r2
 800cc66:	ea41 0402 	orrne.w	r4, r1, r2
 800cc6a:	e7cd      	b.n	800cc08 <rint+0xa8>
 800cc6c:	0800cf10 	.word	0x0800cf10
 800cc70:	000fffff 	.word	0x000fffff
 800cc74:	00000000 	.word	0x00000000

0800cc78 <scalbn>:
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	ec55 4b10 	vmov	r4, r5, d0
 800cc7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cc82:	4606      	mov	r6, r0
 800cc84:	462b      	mov	r3, r5
 800cc86:	b99a      	cbnz	r2, 800ccb0 <scalbn+0x38>
 800cc88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cc8c:	4323      	orrs	r3, r4
 800cc8e:	d036      	beq.n	800ccfe <scalbn+0x86>
 800cc90:	4b39      	ldr	r3, [pc, #228]	; (800cd78 <scalbn+0x100>)
 800cc92:	4629      	mov	r1, r5
 800cc94:	ee10 0a10 	vmov	r0, s0
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f7f3 fcc5 	bl	8000628 <__aeabi_dmul>
 800cc9e:	4b37      	ldr	r3, [pc, #220]	; (800cd7c <scalbn+0x104>)
 800cca0:	429e      	cmp	r6, r3
 800cca2:	4604      	mov	r4, r0
 800cca4:	460d      	mov	r5, r1
 800cca6:	da10      	bge.n	800ccca <scalbn+0x52>
 800cca8:	a32b      	add	r3, pc, #172	; (adr r3, 800cd58 <scalbn+0xe0>)
 800ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccae:	e03a      	b.n	800cd26 <scalbn+0xae>
 800ccb0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ccb4:	428a      	cmp	r2, r1
 800ccb6:	d10c      	bne.n	800ccd2 <scalbn+0x5a>
 800ccb8:	ee10 2a10 	vmov	r2, s0
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	f7f3 fafc 	bl	80002bc <__adddf3>
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	460d      	mov	r5, r1
 800ccc8:	e019      	b.n	800ccfe <scalbn+0x86>
 800ccca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ccce:	460b      	mov	r3, r1
 800ccd0:	3a36      	subs	r2, #54	; 0x36
 800ccd2:	4432      	add	r2, r6
 800ccd4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ccd8:	428a      	cmp	r2, r1
 800ccda:	dd08      	ble.n	800ccee <scalbn+0x76>
 800ccdc:	2d00      	cmp	r5, #0
 800ccde:	a120      	add	r1, pc, #128	; (adr r1, 800cd60 <scalbn+0xe8>)
 800cce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce4:	da1c      	bge.n	800cd20 <scalbn+0xa8>
 800cce6:	a120      	add	r1, pc, #128	; (adr r1, 800cd68 <scalbn+0xf0>)
 800cce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccec:	e018      	b.n	800cd20 <scalbn+0xa8>
 800ccee:	2a00      	cmp	r2, #0
 800ccf0:	dd08      	ble.n	800cd04 <scalbn+0x8c>
 800ccf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ccfa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ccfe:	ec45 4b10 	vmov	d0, r4, r5
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
 800cd04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cd08:	da19      	bge.n	800cd3e <scalbn+0xc6>
 800cd0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cd0e:	429e      	cmp	r6, r3
 800cd10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cd14:	dd0a      	ble.n	800cd2c <scalbn+0xb4>
 800cd16:	a112      	add	r1, pc, #72	; (adr r1, 800cd60 <scalbn+0xe8>)
 800cd18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1e2      	bne.n	800cce6 <scalbn+0x6e>
 800cd20:	a30f      	add	r3, pc, #60	; (adr r3, 800cd60 <scalbn+0xe8>)
 800cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd26:	f7f3 fc7f 	bl	8000628 <__aeabi_dmul>
 800cd2a:	e7cb      	b.n	800ccc4 <scalbn+0x4c>
 800cd2c:	a10a      	add	r1, pc, #40	; (adr r1, 800cd58 <scalbn+0xe0>)
 800cd2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0b8      	beq.n	800cca8 <scalbn+0x30>
 800cd36:	a10e      	add	r1, pc, #56	; (adr r1, 800cd70 <scalbn+0xf8>)
 800cd38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd3c:	e7b4      	b.n	800cca8 <scalbn+0x30>
 800cd3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd42:	3236      	adds	r2, #54	; 0x36
 800cd44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	4b0c      	ldr	r3, [pc, #48]	; (800cd80 <scalbn+0x108>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	e7e8      	b.n	800cd26 <scalbn+0xae>
 800cd54:	f3af 8000 	nop.w
 800cd58:	c2f8f359 	.word	0xc2f8f359
 800cd5c:	01a56e1f 	.word	0x01a56e1f
 800cd60:	8800759c 	.word	0x8800759c
 800cd64:	7e37e43c 	.word	0x7e37e43c
 800cd68:	8800759c 	.word	0x8800759c
 800cd6c:	fe37e43c 	.word	0xfe37e43c
 800cd70:	c2f8f359 	.word	0xc2f8f359
 800cd74:	81a56e1f 	.word	0x81a56e1f
 800cd78:	43500000 	.word	0x43500000
 800cd7c:	ffff3cb0 	.word	0xffff3cb0
 800cd80:	3c900000 	.word	0x3c900000

0800cd84 <_init>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	bf00      	nop
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr

0800cd90 <_fini>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	bf00      	nop
 800cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd96:	bc08      	pop	{r3}
 800cd98:	469e      	mov	lr, r3
 800cd9a:	4770      	bx	lr
